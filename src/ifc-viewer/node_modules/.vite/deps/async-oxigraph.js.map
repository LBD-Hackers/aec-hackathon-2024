{
  "version": 3,
  "sources": ["../../async-oxigraph/dist/index.js"],
  "sourcesContent": ["// src/interfaces.ts\nvar TaskType = /* @__PURE__ */ ((TaskType2) => {\n  TaskType2[\"DUMP\"] = \"DUMP\";\n  TaskType2[\"INIT\"] = \"INIT\";\n  TaskType2[\"LOAD\"] = \"LOAD\";\n  TaskType2[\"QUERY\"] = \"QUERY\";\n  return TaskType2;\n})(TaskType || {});\nvar ResponseMimetype = /* @__PURE__ */ ((ResponseMimetype3) => {\n  ResponseMimetype3[\"JSONLD\"] = \"application/ld+json\";\n  ResponseMimetype3[\"TURTLE\"] = \"text/turtle\";\n  return ResponseMimetype3;\n})(ResponseMimetype || {});\nvar RDFMimetype = /* @__PURE__ */ ((RDFMimetype2) => {\n  RDFMimetype2[\"TURTLE\"] = \"text/turtle\";\n  RDFMimetype2[\"NTRIPLES\"] = \"application/n-triples\";\n  RDFMimetype2[\"NQUADS\"] = \"application/n-quads\";\n  RDFMimetype2[\"RDFXML\"] = \"application/rdf+xml\";\n  return RDFMimetype2;\n})(RDFMimetype || {});\n\n// src/index.ts\nvar AsyncOxigraph = class {\n  constructor(workerPath = \"./assets/oxigraph/worker.js\") {\n    this.worker = new Worker(workerPath);\n  }\n  async init(wasmPath = \"./web_bg.wasm\") {\n    return await this.runBackgroundTask({ task: \"INIT\" /* INIT */, initPayload: { wasmPath } });\n  }\n  async load(triples, mimetype, baseURI, graphURI) {\n    return await this.runBackgroundTask({ task: \"LOAD\" /* LOAD */, loadPayload: { triples, mimetype, baseURI, graphURI } });\n  }\n  async query(query, responseMimetype) {\n    return await this.runBackgroundTask({ task: \"QUERY\" /* QUERY */, queryPayload: { query, responseMimetype } });\n  }\n  async dump(mimetype = \"application/n-quads\" /* NQUADS */, graphURI) {\n    return await this.runBackgroundTask({ task: \"DUMP\" /* DUMP */, dumpPayload: { mimetype, graphURI } });\n  }\n  close() {\n    this.worker.terminate();\n  }\n  async runBackgroundTask(instruction) {\n    return new Promise((resolve, reject) => {\n      this.worker.addEventListener(\"message\", (event) => {\n        if (event.data.error != void 0)\n          reject(event.data.error);\n        resolve(event.data);\n      }, false);\n      this.worker.postMessage(instruction);\n    });\n  }\n};\nexport {\n  AsyncOxigraph,\n  RDFMimetype,\n  ResponseMimetype,\n  TaskType\n};\n"],
  "mappings": ";;;AACA,IAAIA,KAA4B,CAACC,MAAc;AAC7C,EAAAA,EAAU,MAAM,IAAI;AACpB,EAAAA,EAAU,MAAM,IAAI;AACpB,EAAAA,EAAU,MAAM,IAAI;AACpB,EAAAA,EAAU,OAAO,IAAI;AACrB,SAAOA;AACT,GAAGD,KAAY,CAAC,CAAC;AACjB,IAAIE,KAAoC,CAACC,MAAsB;AAC7D,EAAAA,EAAkB,QAAQ,IAAI;AAC9B,EAAAA,EAAkB,QAAQ,IAAI;AAC9B,SAAOA;AACT,GAAGD,KAAoB,CAAC,CAAC;AACzB,IAAIE,KAA+B,CAACC,MAAiB;AACnD,EAAAA,EAAa,QAAQ,IAAI;AACzB,EAAAA,EAAa,UAAU,IAAI;AAC3B,EAAAA,EAAa,QAAQ,IAAI;AACzB,EAAAA,EAAa,QAAQ,IAAI;AACzB,SAAOA;AACT,GAAGD,KAAe,CAAC,CAAC;AAGpB,IAAIE,IAAgB,MAAM;AAAA,EACxB,YAAYC,IAAa,+BAA+B;AACtD,SAAK,SAAS,IAAI,OAAOA,CAAU;AAAA,EACrC;AAAA,EACA,MAAM,KAAKC,IAAW,iBAAiB;AACrC,WAAO,MAAM,KAAK,kBAAkB,EAAE,MAAM,QAAmB,aAAa,EAAE,UAAAA,EAAS,EAAE,CAAC;AAAA,EAC5F;AAAA,EACA,MAAM,KAAKC,GAASC,GAAUC,GAASC,GAAU;AAC/C,WAAO,MAAM,KAAK,kBAAkB,EAAE,MAAM,QAAmB,aAAa,EAAE,SAAAH,GAAS,UAAAC,GAAU,SAAAC,GAAS,UAAAC,EAAS,EAAE,CAAC;AAAA,EACxH;AAAA,EACA,MAAM,MAAMC,GAAOC,GAAkB;AACnC,WAAO,MAAM,KAAK,kBAAkB,EAAE,MAAM,SAAqB,cAAc,EAAE,OAAAD,GAAO,kBAAAC,EAAiB,EAAE,CAAC;AAAA,EAC9G;AAAA,EACA,MAAM,KAAKJ,IAAW,uBAAoCE,GAAU;AAClE,WAAO,MAAM,KAAK,kBAAkB,EAAE,MAAM,QAAmB,aAAa,EAAE,UAAAF,GAAU,UAAAE,EAAS,EAAE,CAAC;AAAA,EACtG;AAAA,EACA,QAAQ;AACN,SAAK,OAAO,UAAU;AAAA,EACxB;AAAA,EACA,MAAM,kBAAkBG,GAAa;AACnC,WAAO,IAAI,QAAQ,CAACC,GAASC,MAAW;AACtC,WAAK,OAAO,iBAAiB,WAAW,CAACC,MAAU;AACjD,YAAIA,EAAM,KAAK,SAAS;AACtB,UAAAD,EAAOC,EAAM,KAAK,KAAK;AACzB,QAAAF,EAAQE,EAAM,IAAI;AAAA,MACpB,GAAG,KAAK;AACR,WAAK,OAAO,YAAYH,CAAW;AAAA,IACrC,CAAC;AAAA,EACH;AACF;",
  "names": ["TaskType", "TaskType2", "ResponseMimetype", "ResponseMimetype3", "RDFMimetype", "RDFMimetype2", "AsyncOxigraph", "workerPath", "wasmPath", "triples", "mimetype", "baseURI", "graphURI", "query", "responseMimetype", "instruction", "resolve", "reject", "event"]
}
