import "./chunk-EUWZTEIB.js";

// node_modules/async-oxigraph/dist/index.js
var n = ((a) => {
  a["DUMP"] = "DUMP";
  a["INIT"] = "INIT";
  a["LOAD"] = "LOAD";
  a["QUERY"] = "QUERY";
  return a;
})(n || {});
var o = ((a) => {
  a["JSONLD"] = "application/ld+json";
  a["TURTLE"] = "text/turtle";
  return a;
})(o || {});
var i = ((a) => {
  a["TURTLE"] = "text/turtle";
  a["NTRIPLES"] = "application/n-triples";
  a["NQUADS"] = "application/n-quads";
  a["RDFXML"] = "application/rdf+xml";
  return a;
})(i || {});
var u = class {
  constructor(a = "./assets/oxigraph/worker.js") {
    this.worker = new Worker(a);
  }
  async init(a = "./web_bg.wasm") {
    return await this.runBackgroundTask({ task: "INIT", initPayload: { wasmPath: a } });
  }
  async load(a, r, s, t) {
    return await this.runBackgroundTask({ task: "LOAD", loadPayload: { triples: a, mimetype: r, baseURI: s, graphURI: t } });
  }
  async query(a, r) {
    return await this.runBackgroundTask({ task: "QUERY", queryPayload: { query: a, responseMimetype: r } });
  }
  async dump(a = "application/n-quads", r) {
    return await this.runBackgroundTask({ task: "DUMP", dumpPayload: { mimetype: a, graphURI: r } });
  }
  close() {
    this.worker.terminate();
  }
  async runBackgroundTask(a) {
    return new Promise((r, s) => {
      this.worker.addEventListener("message", (t) => {
        if (t.data.error != void 0)
          s(t.data.error);
        r(t.data);
      }, false);
      this.worker.postMessage(a);
    });
  }
};
export {
  u as AsyncOxigraph,
  i as RDFMimetype,
  o as ResponseMimetype,
  n as TaskType
};
//# sourceMappingURL=async-oxigraph.js.map
