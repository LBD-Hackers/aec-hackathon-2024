import {
  b as Of
} from "./chunk-EUWZTEIB.js";

// node_modules/three/build/three.module.js
var _v = {};
Of(_v, {
  ACESFilmicToneMapping: () => Gd,
  AddEquation: () => hi,
  AddOperation: () => zd,
  AdditiveAnimationBlendMode: () => Lh,
  AdditiveBlending: () => mc,
  AlphaFormat: () => $d,
  AlwaysDepth: () => Id,
  AlwaysStencilFunc: () => ff,
  AmbientLight: () => vo,
  AmbientLightProbe: () => Cl,
  AnimationAction: () => Ro,
  AnimationClip: () => Ri,
  AnimationLoader: () => _l,
  AnimationMixer: () => Fl,
  AnimationObjectGroup: () => Nl,
  AnimationUtils: () => ev,
  ArcCurve: () => Ja,
  ArrayCamera: () => Na,
  ArrowHelper: () => sh,
  Audio: () => wo,
  AudioAnalyser: () => Ul,
  AudioContext: () => Ur,
  AudioListener: () => Ll,
  AudioLoader: () => Al,
  AxesHelper: () => rh,
  BackSide: () => Pt,
  BasicDepthPacking: () => hf,
  BasicShadowMap: () => Vf,
  Bone: () => rr,
  BooleanKeyframeTrack: () => Pn,
  Box2: () => Xl,
  Box3: () => qt,
  Box3Helper: () => nh,
  BoxBufferGeometry: () => oh,
  BoxGeometry: () => Zn,
  BoxHelper: () => th,
  BufferAttribute: () => Ke,
  BufferGeometry: () => ze,
  BufferGeometryLoader: () => Eo,
  ByteType: () => Xd,
  Cache: () => Ci,
  Camera: () => ls,
  CameraHelper: () => eh,
  CanvasTexture: () => dl,
  CapsuleBufferGeometry: () => ch,
  CapsuleGeometry: () => dr,
  CatmullRomCurve3: () => $a,
  CineonToneMapping: () => Hd,
  CircleBufferGeometry: () => lh,
  CircleGeometry: () => fr,
  ClampToEdgeWrapping: () => Et,
  Clock: () => To,
  Color: () => de,
  ColorKeyframeTrack: () => Cr,
  ColorManagement: () => Wt,
  CompressedArrayTexture: () => ul,
  CompressedTexture: () => or,
  CompressedTextureLoader: () => xl,
  ConeBufferGeometry: () => hh,
  ConeGeometry: () => pr,
  CubeCamera: () => Ua,
  CubeReflectionMapping: () => Wn,
  CubeRefractionMapping: () => Xn,
  CubeTexture: () => yi,
  CubeTextureLoader: () => vl,
  CubeUVReflectionMapping: () => ys,
  CubicBezierCurve: () => cr,
  CubicBezierCurve3: () => Ka,
  CubicInterpolant: () => uo,
  CullFaceBack: () => pc,
  CullFaceFront: () => _d,
  CullFaceFrontBack: () => kf,
  CullFaceNone: () => gd,
  Curve: () => kt,
  CurvePath: () => Qa,
  CustomBlending: () => vd,
  CustomToneMapping: () => Wd,
  CylinderBufferGeometry: () => uh,
  CylinderGeometry: () => bi,
  Cylindrical: () => Wl,
  Data3DTexture: () => Ks,
  DataArrayTexture: () => as,
  DataTexture: () => Gn,
  DataTextureLoader: () => yl,
  DataUtils: () => $p,
  DecrementStencilOp: () => Qf,
  DecrementWrapStencilOp: () => tp,
  DefaultLoadingManager: () => Lf,
  DepthFormat: () => kn,
  DepthStencilFormat: () => xi,
  DepthTexture: () => Fa,
  DirectionalLight: () => xo,
  DirectionalLightHelper: () => Ql,
  DiscreteInterpolant: () => fo,
  DisplayP3ColorSpace: () => Uh,
  DodecahedronBufferGeometry: () => dh,
  DodecahedronGeometry: () => mr,
  DoubleSide: () => ln,
  DstAlphaFactor: () => wd,
  DstColorFactor: () => Rd,
  DynamicCopyUsage: () => gp,
  DynamicDrawUsage: () => hp,
  DynamicReadUsage: () => fp,
  EdgesGeometry: () => eo,
  EllipseCurve: () => ps,
  EqualDepth: () => Dd,
  EqualStencilFunc: () => rp,
  EquirectangularReflectionMapping: () => Vs,
  EquirectangularRefractionMapping: () => Hs,
  Euler: () => js,
  EventDispatcher: () => nn,
  ExtrudeBufferGeometry: () => fh,
  ExtrudeGeometry: () => vr,
  FileLoader: () => sn,
  Float16BufferAttribute: () => Qc,
  Float32BufferAttribute: () => xe,
  Float64BufferAttribute: () => el,
  FloatType: () => bn,
  Fog: () => ka,
  FogExp2: () => za,
  FramebufferTexture: () => hl,
  FrontSide: () => Rn,
  Frustum: () => hs,
  GLBufferAttribute: () => kl,
  GLSL1: () => xp,
  GLSL3: () => Gc,
  GreaterDepth: () => Fd,
  GreaterEqualDepth: () => Nd,
  GreaterEqualStencilFunc: () => lp,
  GreaterStencilFunc: () => op,
  GridHelper: () => Kl,
  Group: () => zn,
  HalfFloatType: () => ss,
  HemisphereLight: () => mo,
  HemisphereLightHelper: () => $l,
  HemisphereLightProbe: () => Rl,
  IcosahedronBufferGeometry: () => ph,
  IcosahedronGeometry: () => yr,
  ImageBitmapLoader: () => wl,
  ImageLoader: () => Pi,
  ImageUtils: () => $s,
  IncrementStencilOp: () => jf,
  IncrementWrapStencilOp: () => ep,
  InstancedBufferAttribute: () => Jn,
  InstancedBufferGeometry: () => bo,
  InstancedInterleavedBuffer: () => zl,
  InstancedMesh: () => qa,
  Int16BufferAttribute: () => Kc,
  Int32BufferAttribute: () => jc,
  Int8BufferAttribute: () => Zc,
  IntType: () => Yd,
  InterleavedBuffer: () => fs,
  InterleavedBufferAttribute: () => Mi,
  Interpolant: () => Ti,
  InterpolateDiscrete: () => Xs,
  InterpolateLinear: () => qs,
  InterpolateSmooth: () => Ra,
  InvertStencilOp: () => np,
  KeepStencilOp: () => Ca,
  KeyframeTrack: () => Vt,
  LOD: () => Ga,
  LatheBufferGeometry: () => mh,
  LatheGeometry: () => gs,
  Layers: () => os,
  LessDepth: () => Ud,
  LessEqualDepth: () => Pa,
  LessEqualStencilFunc: () => ap,
  LessStencilFunc: () => sp,
  Light: () => pn,
  LightProbe: () => vs,
  Line: () => fn,
  Line3: () => ql,
  LineBasicMaterial: () => yt,
  LineCurve: () => ms,
  LineCurve3: () => ja,
  LineDashedMaterial: () => ho,
  LineLoop: () => Ya,
  LineSegments: () => Jt,
  LinearEncoding: () => Ih,
  LinearFilter: () => lt,
  LinearInterpolant: () => Rr,
  LinearMipMapLinearFilter: () => qf,
  LinearMipMapNearestFilter: () => Xf,
  LinearMipmapLinearFilter: () => qn,
  LinearMipmapNearestFilter: () => Ch,
  LinearSRGBColorSpace: () => tn,
  LinearToneMapping: () => kd,
  Loader: () => Lt,
  LoaderUtils: () => Ir,
  LoadingManager: () => Pr,
  LoopOnce: () => of,
  LoopPingPong: () => lf,
  LoopRepeat: () => cf,
  LuminanceAlphaFormat: () => jd,
  LuminanceFormat: () => Kd,
  MOUSE: () => Bf,
  Material: () => vt,
  MaterialLoader: () => So,
  MathUtils: () => Ip,
  Matrix3: () => Ge,
  Matrix4: () => Ne,
  MaxEquation: () => vc,
  Mesh: () => ft,
  MeshBasicMaterial: () => dn,
  MeshDepthMaterial: () => nr,
  MeshDistanceMaterial: () => ir,
  MeshLambertMaterial: () => co,
  MeshMatcapMaterial: () => lo,
  MeshNormalMaterial: () => oo,
  MeshPhongMaterial: () => ro,
  MeshPhysicalMaterial: () => so,
  MeshStandardMaterial: () => Ar,
  MeshToonMaterial: () => ao,
  MinEquation: () => xc,
  MirroredRepeatWrapping: () => Ws,
  MixOperation: () => Bd,
  MultiplyBlending: () => _c,
  MultiplyOperation: () => Dr,
  NearestFilter: () => ct,
  NearestMipMapLinearFilter: () => Wf,
  NearestMipMapNearestFilter: () => Gf,
  NearestMipmapLinearFilter: () => Ns,
  NearestMipmapNearestFilter: () => La,
  NeverDepth: () => Ld,
  NeverStencilFunc: () => ip,
  NoBlending: () => wn,
  NoColorSpace: () => Hn,
  NoToneMapping: () => hn,
  NormalAnimationBlendMode: () => Lo,
  NormalBlending: () => mi,
  NotEqualDepth: () => Od,
  NotEqualStencilFunc: () => cp,
  NumberKeyframeTrack: () => wi,
  Object3D: () => Ze,
  ObjectLoader: () => Tl,
  ObjectSpaceNormalMap: () => df,
  OctahedronBufferGeometry: () => gh,
  OctahedronGeometry: () => _s,
  OneFactor: () => bd,
  OneMinusDstAlphaFactor: () => Ad,
  OneMinusDstColorFactor: () => Cd,
  OneMinusSrcAlphaFactor: () => Rh,
  OneMinusSrcColorFactor: () => Td,
  OrthographicCamera: () => ds,
  PCFShadowMap: () => wh,
  PCFSoftShadowMap: () => xd,
  PMREMGenerator: () => tr,
  Path: () => Si,
  PerspectiveCamera: () => dt,
  Plane: () => cn,
  PlaneBufferGeometry: () => _h,
  PlaneGeometry: () => us,
  PlaneHelper: () => ih,
  PointLight: () => _o,
  PointLightHelper: () => Jl,
  Points: () => Za,
  PointsMaterial: () => ar,
  PolarGridHelper: () => jl,
  PolyhedronBufferGeometry: () => xh,
  PolyhedronGeometry: () => Cn,
  PositionalAudio: () => Il,
  PropertyBinding: () => Je,
  PropertyMixer: () => Ao,
  QuadraticBezierCurve: () => lr,
  QuadraticBezierCurve3: () => hr,
  Quaternion: () => Tt,
  QuaternionKeyframeTrack: () => $n,
  QuaternionLinearInterpolant: () => po,
  RED_GREEN_RGTC2_Format: () => Vc,
  RED_RGTC1_Format: () => af,
  REVISION: () => Co,
  RGBADepthPacking: () => uf,
  RGBAFormat: () => Ft,
  RGBAIntegerFormat: () => sf,
  RGBA_ASTC_10x10_Format: () => Oc,
  RGBA_ASTC_10x5_Format: () => Dc,
  RGBA_ASTC_10x6_Format: () => Nc,
  RGBA_ASTC_10x8_Format: () => Fc,
  RGBA_ASTC_12x10_Format: () => Bc,
  RGBA_ASTC_12x12_Format: () => zc,
  RGBA_ASTC_4x4_Format: () => wc,
  RGBA_ASTC_5x4_Format: () => Ac,
  RGBA_ASTC_5x5_Format: () => Rc,
  RGBA_ASTC_6x5_Format: () => Cc,
  RGBA_ASTC_6x6_Format: () => Pc,
  RGBA_ASTC_8x5_Format: () => Lc,
  RGBA_ASTC_8x6_Format: () => Ic,
  RGBA_ASTC_8x8_Format: () => Uc,
  RGBA_BPTC_Format: () => Aa,
  RGBA_ETC2_EAC_Format: () => Tc,
  RGBA_PVRTC_2BPPV1_Format: () => bc,
  RGBA_PVRTC_4BPPV1_Format: () => Sc,
  RGBA_S3TC_DXT1_Format: () => Ea,
  RGBA_S3TC_DXT3_Format: () => Ta,
  RGBA_S3TC_DXT5_Format: () => wa,
  RGB_ETC1_Format: () => rf,
  RGB_ETC2_Format: () => Ec,
  RGB_PVRTC_2BPPV1_Format: () => Mc,
  RGB_PVRTC_4BPPV1_Format: () => yc,
  RGB_S3TC_DXT1_Format: () => ba,
  RGFormat: () => tf,
  RGIntegerFormat: () => nf,
  RawShaderMaterial: () => io,
  Ray: () => vi,
  Raycaster: () => Vl,
  RectAreaLight: () => yo,
  RedFormat: () => Qd,
  RedIntegerFormat: () => ef,
  ReinhardToneMapping: () => Vd,
  RepeatWrapping: () => Gs,
  ReplaceStencilOp: () => Kf,
  ReverseSubtractEquation: () => Md,
  RingBufferGeometry: () => vh,
  RingGeometry: () => Mr,
  SIGNED_RED_GREEN_RGTC2_Format: () => Hc,
  SIGNED_RED_RGTC1_Format: () => kc,
  SRGBColorSpace: () => De,
  Scene: () => Va,
  ShaderChunk: () => Fe,
  ShaderLib: () => en,
  ShaderMaterial: () => Zt,
  ShadowMaterial: () => no,
  Shape: () => An,
  ShapeBufferGeometry: () => yh,
  ShapeGeometry: () => Sr,
  ShapePath: () => ah,
  ShapeUtils: () => un,
  ShortType: () => qd,
  Skeleton: () => Xa,
  SkeletonHelper: () => Zl,
  SkinnedMesh: () => Wa,
  Source: () => En,
  Sphere: () => Yt,
  SphereBufferGeometry: () => Mh,
  SphereGeometry: () => xs,
  Spherical: () => Gl,
  SphericalHarmonics3: () => Mo,
  SplineCurve: () => ur,
  SpotLight: () => go,
  SpotLightHelper: () => Yl,
  Sprite: () => Ha,
  SpriteMaterial: () => sr,
  SrcAlphaFactor: () => Ah,
  SrcAlphaSaturateFactor: () => Pd,
  SrcColorFactor: () => Ed,
  StaticCopyUsage: () => mp,
  StaticDrawUsage: () => Zs,
  StaticReadUsage: () => dp,
  StereoCamera: () => Pl,
  StreamCopyUsage: () => _p,
  StreamDrawUsage: () => up,
  StreamReadUsage: () => pp,
  StringKeyframeTrack: () => Ln,
  SubtractEquation: () => yd,
  SubtractiveBlending: () => gc,
  TOUCH: () => zf,
  TangentSpaceNormalMap: () => Kn,
  TetrahedronBufferGeometry: () => Sh,
  TetrahedronGeometry: () => br,
  Texture: () => pt,
  TextureLoader: () => Ml,
  TorusBufferGeometry: () => bh,
  TorusGeometry: () => Er,
  TorusKnotBufferGeometry: () => Eh,
  TorusKnotGeometry: () => Tr,
  Triangle: () => Tn,
  TriangleFanDrawMode: () => Jf,
  TriangleStripDrawMode: () => Zf,
  TrianglesDrawMode: () => Yf,
  TubeBufferGeometry: () => Th,
  TubeGeometry: () => wr,
  TwoPassDoubleSide: () => Hf,
  UVMapping: () => Po,
  Uint16BufferAttribute: () => Qs,
  Uint32BufferAttribute: () => er,
  Uint8BufferAttribute: () => Jc,
  Uint8ClampedBufferAttribute: () => $c,
  Uniform: () => Ol,
  UniformsGroup: () => Bl,
  UniformsLib: () => ae,
  UniformsUtils: () => vf,
  UnsignedByteType: () => Yn,
  UnsignedInt248Type: () => gi,
  UnsignedIntType: () => Bn,
  UnsignedShort4444Type: () => Zd,
  UnsignedShort5551Type: () => Jd,
  UnsignedShortType: () => Ph,
  VSMShadowMap: () => on,
  Vector2: () => $,
  Vector3: () => w,
  Vector4: () => $e,
  VectorKeyframeTrack: () => Ai,
  VideoTexture: () => ll,
  WebGL1Renderer: () => Ba,
  WebGL3DRenderTarget: () => qc,
  WebGLArrayRenderTarget: () => Xc,
  WebGLCubeRenderTarget: () => Da,
  WebGLMultipleRenderTargets: () => Yc,
  WebGLRenderTarget: () => zt,
  WebGLRenderer: () => Oa,
  WebGLUtils: () => Tf,
  WireframeGeometry: () => to,
  WrapAroundEnding: () => Ys,
  ZeroCurvatureEnding: () => di,
  ZeroFactor: () => Sd,
  ZeroSlopeEnding: () => fi,
  ZeroStencilOp: () => $f,
  _SRGBAFormat: () => Ia,
  sRGBEncoding: () => Vn
});
var Co = "152";
var Bf = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
var zf = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
var gd = 0;
var pc = 1;
var _d = 2;
var kf = 3;
var Vf = 0;
var wh = 1;
var xd = 2;
var on = 3;
var Rn = 0;
var Pt = 1;
var ln = 2;
var Hf = 2;
var wn = 0;
var mi = 1;
var mc = 2;
var gc = 3;
var _c = 4;
var vd = 5;
var hi = 100;
var yd = 101;
var Md = 102;
var xc = 103;
var vc = 104;
var Sd = 200;
var bd = 201;
var Ed = 202;
var Td = 203;
var Ah = 204;
var Rh = 205;
var wd = 206;
var Ad = 207;
var Rd = 208;
var Cd = 209;
var Pd = 210;
var Ld = 0;
var Id = 1;
var Ud = 2;
var Pa = 3;
var Dd = 4;
var Nd = 5;
var Fd = 6;
var Od = 7;
var Dr = 0;
var Bd = 1;
var zd = 2;
var hn = 0;
var kd = 1;
var Vd = 2;
var Hd = 3;
var Gd = 4;
var Wd = 5;
var Po = 300;
var Wn = 301;
var Xn = 302;
var Vs = 303;
var Hs = 304;
var ys = 306;
var Gs = 1e3;
var Et = 1001;
var Ws = 1002;
var ct = 1003;
var La = 1004;
var Gf = 1004;
var Ns = 1005;
var Wf = 1005;
var lt = 1006;
var Ch = 1007;
var Xf = 1007;
var qn = 1008;
var qf = 1008;
var Yn = 1009;
var Xd = 1010;
var qd = 1011;
var Ph = 1012;
var Yd = 1013;
var Bn = 1014;
var bn = 1015;
var ss = 1016;
var Zd = 1017;
var Jd = 1018;
var gi = 1020;
var $d = 1021;
var Ft = 1023;
var Kd = 1024;
var jd = 1025;
var kn = 1026;
var xi = 1027;
var Qd = 1028;
var ef = 1029;
var tf = 1030;
var nf = 1031;
var sf = 1033;
var ba = 33776;
var Ea = 33777;
var Ta = 33778;
var wa = 33779;
var yc = 35840;
var Mc = 35841;
var Sc = 35842;
var bc = 35843;
var rf = 36196;
var Ec = 37492;
var Tc = 37496;
var wc = 37808;
var Ac = 37809;
var Rc = 37810;
var Cc = 37811;
var Pc = 37812;
var Lc = 37813;
var Ic = 37814;
var Uc = 37815;
var Dc = 37816;
var Nc = 37817;
var Fc = 37818;
var Oc = 37819;
var Bc = 37820;
var zc = 37821;
var Aa = 36492;
var af = 36283;
var kc = 36284;
var Vc = 36285;
var Hc = 36286;
var of = 2200;
var cf = 2201;
var lf = 2202;
var Xs = 2300;
var qs = 2301;
var Ra = 2302;
var di = 2400;
var fi = 2401;
var Ys = 2402;
var Lo = 2500;
var Lh = 2501;
var Yf = 0;
var Zf = 1;
var Jf = 2;
var Ih = 3e3;
var Vn = 3001;
var hf = 3200;
var uf = 3201;
var Kn = 0;
var df = 1;
var Hn = "";
var De = "srgb";
var tn = "srgb-linear";
var Uh = "display-p3";
var $f = 0;
var Ca = 7680;
var Kf = 7681;
var jf = 7682;
var Qf = 7683;
var ep = 34055;
var tp = 34056;
var np = 5386;
var ip = 512;
var sp = 513;
var rp = 514;
var ap = 515;
var op = 516;
var cp = 517;
var lp = 518;
var ff = 519;
var Zs = 35044;
var hp = 35048;
var up = 35040;
var dp = 35045;
var fp = 35049;
var pp = 35041;
var mp = 35046;
var gp = 35050;
var _p = 35042;
var xp = "100";
var Gc = "300 es";
var Ia = 1035;
var nn = class {
  addEventListener(e, t) {
    if (this._listeners === void 0)
      this._listeners = {};
    const n = this._listeners;
    if (n[e] === void 0) {
      n[e] = [];
    }
    if (n[e].indexOf(t) === -1) {
      n[e].push(t);
    }
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return false;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const n = this._listeners;
    const i = n[e];
    if (i !== void 0) {
      const s = i.indexOf(t);
      if (s !== -1) {
        i.splice(s, 1);
      }
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const t = this._listeners;
    const n = t[e.type];
    if (n !== void 0) {
      e.target = this;
      const i = n.slice(0);
      for (let s = 0, a = i.length; s < a; s++) {
        i[s].call(this, e);
      }
      e.target = null;
    }
  }
};
var St = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
var Xh = 1234567;
var _i = Math.PI / 180;
var rs = 180 / Math.PI;
function Bt() {
  const r = Math.random() * 4294967295 | 0;
  const e = Math.random() * 4294967295 | 0;
  const t = Math.random() * 4294967295 | 0;
  const n = Math.random() * 4294967295 | 0;
  const i = St[r & 255] + St[r >> 8 & 255] + St[r >> 16 & 255] + St[r >> 24 & 255] + "-" + St[e & 255] + St[e >> 8 & 255] + "-" + St[e >> 16 & 15 | 64] + St[e >> 24 & 255] + "-" + St[t & 63 | 128] + St[t >> 8 & 255] + "-" + St[t >> 16 & 255] + St[t >> 24 & 255] + St[n & 255] + St[n >> 8 & 255] + St[n >> 16 & 255] + St[n >> 24 & 255];
  return i.toLowerCase();
}
function st(r, e, t) {
  return Math.max(e, Math.min(t, r));
}
function Dh(r, e) {
  return (r % e + e) % e;
}
function vp(r, e, t, n, i) {
  return n + (r - e) * (i - n) / (t - e);
}
function yp(r, e, t) {
  if (r !== e) {
    return (t - r) / (e - r);
  } else {
    return 0;
  }
}
function Fs(r, e, t) {
  return (1 - t) * r + t * e;
}
function Mp(r, e, t, n) {
  return Fs(r, e, 1 - Math.exp(-t * n));
}
function Sp(r, e = 1) {
  return e - Math.abs(Dh(r, e * 2) - e);
}
function bp(r, e, t) {
  if (r <= e)
    return 0;
  if (r >= t)
    return 1;
  r = (r - e) / (t - e);
  return r * r * (3 - 2 * r);
}
function Ep(r, e, t) {
  if (r <= e)
    return 0;
  if (r >= t)
    return 1;
  r = (r - e) / (t - e);
  return r * r * r * (r * (r * 6 - 15) + 10);
}
function Tp(r, e) {
  return r + Math.floor(Math.random() * (e - r + 1));
}
function wp(r, e) {
  return r + Math.random() * (e - r);
}
function Ap(r) {
  return r * (0.5 - Math.random());
}
function Rp(r) {
  if (r !== void 0)
    Xh = r;
  let e = Xh += 1831565813;
  e = Math.imul(e ^ e >>> 15, e | 1);
  e ^= e + Math.imul(e ^ e >>> 7, e | 61);
  return ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function Cp(r) {
  return r * _i;
}
function Pp(r) {
  return r * rs;
}
function Wc(r) {
  return (r & r - 1) === 0 && r !== 0;
}
function pf(r) {
  return Math.pow(2, Math.ceil(Math.log(r) / Math.LN2));
}
function mf(r) {
  return Math.pow(2, Math.floor(Math.log(r) / Math.LN2));
}
function Lp(r, e, t, n, i) {
  const s = Math.cos;
  const a = Math.sin;
  const o = s(t / 2);
  const c = a(t / 2);
  const l = s((e + n) / 2);
  const h = a((e + n) / 2);
  const u = s((e - n) / 2);
  const d = a((e - n) / 2);
  const f = s((n - e) / 2);
  const m = a((n - e) / 2);
  switch (i) {
    case "XYX":
      r.set(o * h, c * u, c * d, o * l);
      break;
    case "YZY":
      r.set(c * d, o * h, c * u, o * l);
      break;
    case "ZXZ":
      r.set(c * u, c * d, o * h, o * l);
      break;
    case "XZX":
      r.set(o * h, c * m, c * f, o * l);
      break;
    case "YXY":
      r.set(c * f, o * h, c * m, o * l);
      break;
    case "ZYZ":
      r.set(c * m, c * f, o * h, o * l);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
  }
}
function Ot(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint16Array:
      return r / 65535;
    case Uint8Array:
      return r / 255;
    case Int16Array:
      return Math.max(r / 32767, -1);
    case Int8Array:
      return Math.max(r / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function Oe(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint16Array:
      return Math.round(r * 65535);
    case Uint8Array:
      return Math.round(r * 255);
    case Int16Array:
      return Math.round(r * 32767);
    case Int8Array:
      return Math.round(r * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
var Ip = {
  DEG2RAD: _i,
  RAD2DEG: rs,
  generateUUID: Bt,
  clamp: st,
  euclideanModulo: Dh,
  mapLinear: vp,
  inverseLerp: yp,
  lerp: Fs,
  damp: Mp,
  pingpong: Sp,
  smoothstep: bp,
  smootherstep: Ep,
  randInt: Tp,
  randFloat: wp,
  randFloatSpread: Ap,
  seededRandom: Rp,
  degToRad: Cp,
  radToDeg: Pp,
  isPowerOfTwo: Wc,
  ceilPowerOfTwo: pf,
  floorPowerOfTwo: mf,
  setQuaternionFromProperEuler: Lp,
  normalize: Oe,
  denormalize: Ot
};
var $ = class r {
  constructor(e = 0, t = 0) {
    r.prototype.isVector2 = true;
    this.x = e;
    this.y = t;
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    this.x = e;
    this.y = t;
    return this;
  }
  setScalar(e) {
    this.x = e;
    this.y = e;
    return this;
  }
  setX(e) {
    this.x = e;
    return this;
  }
  setY(e) {
    this.y = e;
    return this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    this.x = e.x;
    this.y = e.y;
    return this;
  }
  add(e) {
    this.x += e.x;
    this.y += e.y;
    return this;
  }
  addScalar(e) {
    this.x += e;
    this.y += e;
    return this;
  }
  addVectors(e, t) {
    this.x = e.x + t.x;
    this.y = e.y + t.y;
    return this;
  }
  addScaledVector(e, t) {
    this.x += e.x * t;
    this.y += e.y * t;
    return this;
  }
  sub(e) {
    this.x -= e.x;
    this.y -= e.y;
    return this;
  }
  subScalar(e) {
    this.x -= e;
    this.y -= e;
    return this;
  }
  subVectors(e, t) {
    this.x = e.x - t.x;
    this.y = e.y - t.y;
    return this;
  }
  multiply(e) {
    this.x *= e.x;
    this.y *= e.y;
    return this;
  }
  multiplyScalar(e) {
    this.x *= e;
    this.y *= e;
    return this;
  }
  divide(e) {
    this.x /= e.x;
    this.y /= e.y;
    return this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y;
    const i = e.elements;
    this.x = i[0] * t + i[3] * n + i[6];
    this.y = i[1] * t + i[4] * n + i[7];
    return this;
  }
  min(e) {
    this.x = Math.min(this.x, e.x);
    this.y = Math.min(this.y, e.y);
    return this;
  }
  max(e) {
    this.x = Math.max(this.x, e.x);
    this.y = Math.max(this.y, e.y);
    return this;
  }
  clamp(e, t) {
    this.x = Math.max(e.x, Math.min(t.x, this.x));
    this.y = Math.max(e.y, Math.min(t.y, this.y));
    return this;
  }
  clampScalar(e, t) {
    this.x = Math.max(e, Math.min(t, this.x));
    this.y = Math.max(e, Math.min(t, this.y));
    return this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }
  roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    const e = Math.atan2(-this.y, -this.x) + Math.PI;
    return e;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(st(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y;
    return t * t + n * n;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    this.x += (e.x - this.x) * t;
    this.y += (e.y - this.y) * t;
    return this;
  }
  lerpVectors(e, t, n) {
    this.x = e.x + (t.x - e.x) * n;
    this.y = e.y + (t.y - e.y) * n;
    return this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    this.x = e[t];
    this.y = e[t + 1];
    return this;
  }
  toArray(e = [], t = 0) {
    e[t] = this.x;
    e[t + 1] = this.y;
    return e;
  }
  fromBufferAttribute(e, t) {
    this.x = e.getX(t);
    this.y = e.getY(t);
    return this;
  }
  rotateAround(e, t) {
    const n = Math.cos(t), i = Math.sin(t);
    const s = this.x - e.x;
    const a = this.y - e.y;
    this.x = s * n - a * i + e.x;
    this.y = s * i + a * n + e.y;
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
  }
};
var Ge = class r {
  constructor() {
    r.prototype.isMatrix3 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ];
  }
  set(e, t, n, i, s, a, o, c, l) {
    const h = this.elements;
    h[0] = e;
    h[1] = i;
    h[2] = o;
    h[3] = t;
    h[4] = s;
    h[5] = c;
    h[6] = n;
    h[7] = a;
    h[8] = l;
    return this;
  }
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    );
    return this;
  }
  copy(e) {
    const t = this.elements;
    const n = e.elements;
    t[0] = n[0];
    t[1] = n[1];
    t[2] = n[2];
    t[3] = n[3];
    t[4] = n[4];
    t[5] = n[5];
    t[6] = n[6];
    t[7] = n[7];
    t[8] = n[8];
    return this;
  }
  extractBasis(e, t, n) {
    e.setFromMatrix3Column(this, 0);
    t.setFromMatrix3Column(this, 1);
    n.setFromMatrix3Column(this, 2);
    return this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    );
    return this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements;
    const i = t.elements;
    const s = this.elements;
    const a = n[0], o = n[3], c = n[6];
    const l = n[1], h = n[4], u = n[7];
    const d = n[2], f = n[5], m = n[8];
    const _ = i[0], g = i[3], p = i[6];
    const v = i[1], x = i[4], M = i[7];
    const S = i[2], E = i[5], C = i[8];
    s[0] = a * _ + o * v + c * S;
    s[3] = a * g + o * x + c * E;
    s[6] = a * p + o * M + c * C;
    s[1] = l * _ + h * v + u * S;
    s[4] = l * g + h * x + u * E;
    s[7] = l * p + h * M + u * C;
    s[2] = d * _ + f * v + m * S;
    s[5] = d * g + f * x + m * E;
    s[8] = d * p + f * M + m * C;
    return this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    t[0] *= e;
    t[3] *= e;
    t[6] *= e;
    t[1] *= e;
    t[4] *= e;
    t[7] *= e;
    t[2] *= e;
    t[5] *= e;
    t[8] *= e;
    return this;
  }
  determinant() {
    const e = this.elements;
    const t = e[0], n = e[1], i = e[2], s = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8];
    return t * a * h - t * o * l - n * s * h + n * o * c + i * s * l - i * a * c;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], s = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8], u = h * a - o * l, d = o * c - h * s, f = l * s - a * c, m = t * u + n * d + i * f;
    if (m === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const _ = 1 / m;
    e[0] = u * _;
    e[1] = (i * l - h * n) * _;
    e[2] = (o * n - i * a) * _;
    e[3] = d * _;
    e[4] = (h * t - i * c) * _;
    e[5] = (i * s - o * t) * _;
    e[6] = f * _;
    e[7] = (n * c - l * t) * _;
    e[8] = (a * t - n * s) * _;
    return this;
  }
  transpose() {
    let e;
    const t = this.elements;
    e = t[1];
    t[1] = t[3];
    t[3] = e;
    e = t[2];
    t[2] = t[6];
    t[6] = e;
    e = t[5];
    t[5] = t[7];
    t[7] = e;
    return this;
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    e[0] = t[0];
    e[1] = t[3];
    e[2] = t[6];
    e[3] = t[1];
    e[4] = t[4];
    e[5] = t[7];
    e[6] = t[2];
    e[7] = t[5];
    e[8] = t[8];
    return this;
  }
  setUvTransform(e, t, n, i, s, a, o) {
    const c = Math.cos(s);
    const l = Math.sin(s);
    this.set(
      n * c,
      n * l,
      -n * (c * a + l * o) + a + e,
      -i * l,
      i * c,
      -i * (-l * a + c * o) + o + t,
      0,
      0,
      1
    );
    return this;
  }
  //
  scale(e, t) {
    this.premultiply(Bo.makeScale(e, t));
    return this;
  }
  rotate(e) {
    this.premultiply(Bo.makeRotation(-e));
    return this;
  }
  translate(e, t) {
    this.premultiply(Bo.makeTranslation(e, t));
    return this;
  }
  // for 2D Transforms
  makeTranslation(e, t) {
    this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    );
    return this;
  }
  makeRotation(e) {
    const t = Math.cos(e);
    const n = Math.sin(e);
    this.set(
      t,
      -n,
      0,
      n,
      t,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeScale(e, t) {
    this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    );
    return this;
  }
  //
  equals(e) {
    const t = this.elements;
    const n = e.elements;
    for (let i = 0; i < 9; i++) {
      if (t[i] !== n[i])
        return false;
    }
    return true;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 9; n++) {
      this.elements[n] = e[n + t];
    }
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    e[t] = n[0];
    e[t + 1] = n[1];
    e[t + 2] = n[2];
    e[t + 3] = n[3];
    e[t + 4] = n[4];
    e[t + 5] = n[5];
    e[t + 6] = n[6];
    e[t + 7] = n[7];
    e[t + 8] = n[8];
    return e;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
};
var Bo = new Ge();
function gf(r) {
  for (let e = r.length - 1; e >= 0; --e) {
    if (r[e] >= 65535)
      return true;
  }
  return false;
}
var Up = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function Qi(r, e) {
  return new Up[r](e);
}
function Js(r) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", r);
}
var qh = {};
function Os(r) {
  if (r in qh)
    return;
  qh[r] = true;
  console.warn(r);
}
function ns(r) {
  return r < 0.04045 ? r * 0.0773993808 : Math.pow(r * 0.9478672986 + 0.0521327014, 2.4);
}
function zo(r) {
  return r < 31308e-7 ? r * 12.92 : 1.055 * Math.pow(r, 0.41666) - 0.055;
}
var Dp = new Ge().fromArray([
  0.8224621,
  0.0331941,
  0.0170827,
  0.177538,
  0.9668058,
  0.0723974,
  -1e-7,
  1e-7,
  0.9105199
]);
var Np = new Ge().fromArray([
  1.2249401,
  -0.0420569,
  -0.0196376,
  -0.2249404,
  1.0420571,
  -0.0786361,
  1e-7,
  0,
  1.0982735
]);
function Fp(r) {
  return r.convertSRGBToLinear().applyMatrix3(Np);
}
function Op(r) {
  return r.applyMatrix3(Dp).convertLinearToSRGB();
}
var Bp = {
  [tn]: (r) => r,
  [De]: (r) => r.convertSRGBToLinear(),
  [Uh]: Fp
};
var zp = {
  [tn]: (r) => r,
  [De]: (r) => r.convertLinearToSRGB(),
  [Uh]: Op
};
var Wt = {
  enabled: true,
  get legacyMode() {
    console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
    return !this.enabled;
  },
  set legacyMode(r) {
    console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
    this.enabled = !r;
  },
  get workingColorSpace() {
    return tn;
  },
  set workingColorSpace(r) {
    console.warn("THREE.ColorManagement: .workingColorSpace is readonly.");
  },
  convert: function(r, e, t) {
    if (this.enabled === false || e === t || !e || !t) {
      return r;
    }
    const n = Bp[e];
    const i = zp[t];
    if (n === void 0 || i === void 0) {
      throw new Error(`Unsupported color space conversion, "${e}" to "${t}".`);
    }
    return i(n(r));
  },
  fromWorkingColorSpace: function(r, e) {
    return this.convert(r, this.workingColorSpace, e);
  },
  toWorkingColorSpace: function(r, e) {
    return this.convert(r, e, this.workingColorSpace);
  }
};
var Li;
var $s = class {
  static getDataURL(e) {
    if (/^data:/i.test(e.src)) {
      return e.src;
    }
    if (typeof HTMLCanvasElement === "undefined") {
      return e.src;
    }
    let t;
    if (e instanceof HTMLCanvasElement) {
      t = e;
    } else {
      if (Li === void 0)
        Li = Js("canvas");
      Li.width = e.width;
      Li.height = e.height;
      const n = Li.getContext("2d");
      if (e instanceof ImageData) {
        n.putImageData(e, 0, 0);
      } else {
        n.drawImage(e, 0, 0, e.width, e.height);
      }
      t = Li;
    }
    if (t.width > 2048 || t.height > 2048) {
      console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e);
      return t.toDataURL("image/jpeg", 0.6);
    } else {
      return t.toDataURL("image/png");
    }
  }
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement !== "undefined" && e instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && e instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && e instanceof ImageBitmap) {
      const t = Js("canvas");
      t.width = e.width;
      t.height = e.height;
      const n = t.getContext("2d");
      n.drawImage(e, 0, 0, e.width, e.height);
      const i = n.getImageData(0, 0, e.width, e.height);
      const s = i.data;
      for (let a = 0; a < s.length; a++) {
        s[a] = ns(s[a] / 255) * 255;
      }
      n.putImageData(i, 0, 0);
      return t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let n = 0; n < t.length; n++) {
        if (t instanceof Uint8Array || t instanceof Uint8ClampedArray) {
          t[n] = Math.floor(ns(t[n] / 255) * 255);
        } else {
          t[n] = ns(t[n]);
        }
      }
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else {
      console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
      return e;
    }
  }
};
var En = class {
  constructor(e = null) {
    this.isSource = true;
    this.uuid = Bt();
    this.data = e;
    this.version = 0;
  }
  set needsUpdate(e) {
    if (e === true)
      this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e === "string";
    if (!t && e.images[this.uuid] !== void 0) {
      return e.images[this.uuid];
    }
    const n = {
      uuid: this.uuid,
      url: ""
    };
    const i = this.data;
    if (i !== null) {
      let s;
      if (Array.isArray(i)) {
        s = [];
        for (let a = 0, o = i.length; a < o; a++) {
          if (i[a].isDataTexture) {
            s.push(ko(i[a].image));
          } else {
            s.push(ko(i[a]));
          }
        }
      } else {
        s = ko(i);
      }
      n.url = s;
    }
    if (!t) {
      e.images[this.uuid] = n;
    }
    return n;
  }
};
function ko(r) {
  if (typeof HTMLImageElement !== "undefined" && r instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && r instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && r instanceof ImageBitmap) {
    return $s.getDataURL(r);
  } else {
    if (r.data) {
      return {
        data: Array.from(r.data),
        width: r.width,
        height: r.height,
        type: r.data.constructor.name
      };
    } else {
      console.warn("THREE.Texture: Unable to serialize Texture.");
      return {};
    }
  }
}
var kp = 0;
var pt = class r extends nn {
  constructor(e = r.DEFAULT_IMAGE, t = r.DEFAULT_MAPPING, n = Et, i = Et, s = lt, a = qn, o = Ft, c = Yn, l = r.DEFAULT_ANISOTROPY, h = Hn) {
    super();
    this.isTexture = true;
    Object.defineProperty(this, "id", { value: kp++ });
    this.uuid = Bt();
    this.name = "";
    this.source = new En(e);
    this.mipmaps = [];
    this.mapping = t;
    this.channel = 0;
    this.wrapS = n;
    this.wrapT = i;
    this.magFilter = s;
    this.minFilter = a;
    this.anisotropy = l;
    this.format = o;
    this.internalFormat = null;
    this.type = c;
    this.offset = new $(0, 0);
    this.repeat = new $(1, 1);
    this.center = new $(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = true;
    this.matrix = new Ge();
    this.generateMipmaps = true;
    this.premultiplyAlpha = false;
    this.flipY = true;
    this.unpackAlignment = 4;
    if (typeof h === "string") {
      this.colorSpace = h;
    } else {
      Os("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
      this.colorSpace = h === Vn ? De : Hn;
    }
    this.userData = {};
    this.version = 0;
    this.onUpdate = null;
    this.isRenderTargetTexture = false;
    this.needsPMREMUpdate = false;
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name;
    this.source = e.source;
    this.mipmaps = e.mipmaps.slice(0);
    this.mapping = e.mapping;
    this.channel = e.channel;
    this.wrapS = e.wrapS;
    this.wrapT = e.wrapT;
    this.magFilter = e.magFilter;
    this.minFilter = e.minFilter;
    this.anisotropy = e.anisotropy;
    this.format = e.format;
    this.internalFormat = e.internalFormat;
    this.type = e.type;
    this.offset.copy(e.offset);
    this.repeat.copy(e.repeat);
    this.center.copy(e.center);
    this.rotation = e.rotation;
    this.matrixAutoUpdate = e.matrixAutoUpdate;
    this.matrix.copy(e.matrix);
    this.generateMipmaps = e.generateMipmaps;
    this.premultiplyAlpha = e.premultiplyAlpha;
    this.flipY = e.flipY;
    this.unpackAlignment = e.unpackAlignment;
    this.colorSpace = e.colorSpace;
    this.userData = JSON.parse(JSON.stringify(e.userData));
    this.needsUpdate = true;
    return this;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e === "string";
    if (!t && e.textures[this.uuid] !== void 0) {
      return e.textures[this.uuid];
    }
    const n = {
      metadata: {
        version: 4.5,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    if (Object.keys(this.userData).length > 0)
      n.userData = this.userData;
    if (!t) {
      e.textures[this.uuid] = n;
    }
    return n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== Po)
      return e;
    e.applyMatrix3(this.matrix);
    if (e.x < 0 || e.x > 1) {
      switch (this.wrapS) {
        case Gs:
          e.x = e.x - Math.floor(e.x);
          break;
        case Et:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case Ws:
          if (Math.abs(Math.floor(e.x) % 2) === 1) {
            e.x = Math.ceil(e.x) - e.x;
          } else {
            e.x = e.x - Math.floor(e.x);
          }
          break;
      }
    }
    if (e.y < 0 || e.y > 1) {
      switch (this.wrapT) {
        case Gs:
          e.y = e.y - Math.floor(e.y);
          break;
        case Et:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case Ws:
          if (Math.abs(Math.floor(e.y) % 2) === 1) {
            e.y = Math.ceil(e.y) - e.y;
          } else {
            e.y = e.y - Math.floor(e.y);
          }
          break;
      }
    }
    if (this.flipY) {
      e.y = 1 - e.y;
    }
    return e;
  }
  set needsUpdate(e) {
    if (e === true) {
      this.version++;
      this.source.needsUpdate = true;
    }
  }
  get encoding() {
    Os("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
    return this.colorSpace === De ? Vn : Ih;
  }
  set encoding(e) {
    Os("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
    this.colorSpace = e === Vn ? De : Hn;
  }
};
pt.DEFAULT_IMAGE = null;
pt.DEFAULT_MAPPING = Po;
pt.DEFAULT_ANISOTROPY = 1;
var $e = class r {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    r.prototype.isVector4 = true;
    this.x = e;
    this.y = t;
    this.z = n;
    this.w = i;
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, n, i) {
    this.x = e;
    this.y = t;
    this.z = n;
    this.w = i;
    return this;
  }
  setScalar(e) {
    this.x = e;
    this.y = e;
    this.z = e;
    this.w = e;
    return this;
  }
  setX(e) {
    this.x = e;
    return this;
  }
  setY(e) {
    this.y = e;
    return this;
  }
  setZ(e) {
    this.z = e;
    return this;
  }
  setW(e) {
    this.w = e;
    return this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    this.x = e.x;
    this.y = e.y;
    this.z = e.z;
    this.w = e.w !== void 0 ? e.w : 1;
    return this;
  }
  add(e) {
    this.x += e.x;
    this.y += e.y;
    this.z += e.z;
    this.w += e.w;
    return this;
  }
  addScalar(e) {
    this.x += e;
    this.y += e;
    this.z += e;
    this.w += e;
    return this;
  }
  addVectors(e, t) {
    this.x = e.x + t.x;
    this.y = e.y + t.y;
    this.z = e.z + t.z;
    this.w = e.w + t.w;
    return this;
  }
  addScaledVector(e, t) {
    this.x += e.x * t;
    this.y += e.y * t;
    this.z += e.z * t;
    this.w += e.w * t;
    return this;
  }
  sub(e) {
    this.x -= e.x;
    this.y -= e.y;
    this.z -= e.z;
    this.w -= e.w;
    return this;
  }
  subScalar(e) {
    this.x -= e;
    this.y -= e;
    this.z -= e;
    this.w -= e;
    return this;
  }
  subVectors(e, t) {
    this.x = e.x - t.x;
    this.y = e.y - t.y;
    this.z = e.z - t.z;
    this.w = e.w - t.w;
    return this;
  }
  multiply(e) {
    this.x *= e.x;
    this.y *= e.y;
    this.z *= e.z;
    this.w *= e.w;
    return this;
  }
  multiplyScalar(e) {
    this.x *= e;
    this.y *= e;
    this.z *= e;
    this.w *= e;
    return this;
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, i = this.z, s = this.w;
    const a = e.elements;
    this.x = a[0] * t + a[4] * n + a[8] * i + a[12] * s;
    this.y = a[1] * t + a[5] * n + a[9] * i + a[13] * s;
    this.z = a[2] * t + a[6] * n + a[10] * i + a[14] * s;
    this.w = a[3] * t + a[7] * n + a[11] * i + a[15] * s;
    return this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    if (t < 1e-4) {
      this.x = 1;
      this.y = 0;
      this.z = 0;
    } else {
      this.x = e.x / t;
      this.y = e.y / t;
      this.z = e.z / t;
    }
    return this;
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, n, i, s;
    const a = 0.01, o = 0.1, c = e.elements, l = c[0], h = c[4], u = c[8], d = c[1], f = c[5], m = c[9], _ = c[2], g = c[6], p = c[10];
    if (Math.abs(h - d) < a && Math.abs(u - _) < a && Math.abs(m - g) < a) {
      if (Math.abs(h + d) < o && Math.abs(u + _) < o && Math.abs(m + g) < o && Math.abs(l + f + p - 3) < o) {
        this.set(1, 0, 0, 0);
        return this;
      }
      t = Math.PI;
      const x = (l + 1) / 2;
      const M = (f + 1) / 2;
      const S = (p + 1) / 2;
      const E = (h + d) / 4;
      const C = (u + _) / 4;
      const P = (m + g) / 4;
      if (x > M && x > S) {
        if (x < a) {
          n = 0;
          i = 0.707106781;
          s = 0.707106781;
        } else {
          n = Math.sqrt(x);
          i = E / n;
          s = C / n;
        }
      } else if (M > S) {
        if (M < a) {
          n = 0.707106781;
          i = 0;
          s = 0.707106781;
        } else {
          i = Math.sqrt(M);
          n = E / i;
          s = P / i;
        }
      } else {
        if (S < a) {
          n = 0.707106781;
          i = 0.707106781;
          s = 0;
        } else {
          s = Math.sqrt(S);
          n = C / s;
          i = P / s;
        }
      }
      this.set(n, i, s, t);
      return this;
    }
    let v = Math.sqrt((g - m) * (g - m) + (u - _) * (u - _) + (d - h) * (d - h));
    if (Math.abs(v) < 1e-3)
      v = 1;
    this.x = (g - m) / v;
    this.y = (u - _) / v;
    this.z = (d - h) / v;
    this.w = Math.acos((l + f + p - 1) / 2);
    return this;
  }
  min(e) {
    this.x = Math.min(this.x, e.x);
    this.y = Math.min(this.y, e.y);
    this.z = Math.min(this.z, e.z);
    this.w = Math.min(this.w, e.w);
    return this;
  }
  max(e) {
    this.x = Math.max(this.x, e.x);
    this.y = Math.max(this.y, e.y);
    this.z = Math.max(this.z, e.z);
    this.w = Math.max(this.w, e.w);
    return this;
  }
  clamp(e, t) {
    this.x = Math.max(e.x, Math.min(t.x, this.x));
    this.y = Math.max(e.y, Math.min(t.y, this.y));
    this.z = Math.max(e.z, Math.min(t.z, this.z));
    this.w = Math.max(e.w, Math.min(t.w, this.w));
    return this;
  }
  clampScalar(e, t) {
    this.x = Math.max(e, Math.min(t, this.x));
    this.y = Math.max(e, Math.min(t, this.y));
    this.z = Math.max(e, Math.min(t, this.z));
    this.w = Math.max(e, Math.min(t, this.w));
    return this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }
  roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
    this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    this.x += (e.x - this.x) * t;
    this.y += (e.y - this.y) * t;
    this.z += (e.z - this.z) * t;
    this.w += (e.w - this.w) * t;
    return this;
  }
  lerpVectors(e, t, n) {
    this.x = e.x + (t.x - e.x) * n;
    this.y = e.y + (t.y - e.y) * n;
    this.z = e.z + (t.z - e.z) * n;
    this.w = e.w + (t.w - e.w) * n;
    return this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    this.x = e[t];
    this.y = e[t + 1];
    this.z = e[t + 2];
    this.w = e[t + 3];
    return this;
  }
  toArray(e = [], t = 0) {
    e[t] = this.x;
    e[t + 1] = this.y;
    e[t + 2] = this.z;
    e[t + 3] = this.w;
    return e;
  }
  fromBufferAttribute(e, t) {
    this.x = e.getX(t);
    this.y = e.getY(t);
    this.z = e.getZ(t);
    this.w = e.getW(t);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    this.w = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
    yield this.w;
  }
};
var zt = class extends nn {
  constructor(e = 1, t = 1, n = {}) {
    super();
    this.isWebGLRenderTarget = true;
    this.width = e;
    this.height = t;
    this.depth = 1;
    this.scissor = new $e(0, 0, e, t);
    this.scissorTest = false;
    this.viewport = new $e(0, 0, e, t);
    const i = { width: e, height: t, depth: 1 };
    if (n.encoding !== void 0) {
      Os("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.");
      n.colorSpace = n.encoding === Vn ? De : Hn;
    }
    this.texture = new pt(i, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace);
    this.texture.isRenderTargetTexture = true;
    this.texture.flipY = false;
    this.texture.generateMipmaps = n.generateMipmaps !== void 0 ? n.generateMipmaps : false;
    this.texture.internalFormat = n.internalFormat !== void 0 ? n.internalFormat : null;
    this.texture.minFilter = n.minFilter !== void 0 ? n.minFilter : lt;
    this.depthBuffer = n.depthBuffer !== void 0 ? n.depthBuffer : true;
    this.stencilBuffer = n.stencilBuffer !== void 0 ? n.stencilBuffer : false;
    this.depthTexture = n.depthTexture !== void 0 ? n.depthTexture : null;
    this.samples = n.samples !== void 0 ? n.samples : 0;
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      this.width = e;
      this.height = t;
      this.depth = n;
      this.texture.image.width = e;
      this.texture.image.height = t;
      this.texture.image.depth = n;
      this.dispose();
    }
    this.viewport.set(0, 0, e, t);
    this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.width = e.width;
    this.height = e.height;
    this.depth = e.depth;
    this.scissor.copy(e.scissor);
    this.scissorTest = e.scissorTest;
    this.viewport.copy(e.viewport);
    this.texture = e.texture.clone();
    this.texture.isRenderTargetTexture = true;
    const t = Object.assign({}, e.texture.image);
    this.texture.source = new En(t);
    this.depthBuffer = e.depthBuffer;
    this.stencilBuffer = e.stencilBuffer;
    if (e.depthTexture !== null)
      this.depthTexture = e.depthTexture.clone();
    this.samples = e.samples;
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
var as = class extends pt {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null);
    this.isDataArrayTexture = true;
    this.image = { data: e, width: t, height: n, depth: i };
    this.magFilter = ct;
    this.minFilter = ct;
    this.wrapR = Et;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
  }
};
var Xc = class extends zt {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t);
    this.isWebGLArrayRenderTarget = true;
    this.depth = n;
    this.texture = new as(null, e, t, n);
    this.texture.isRenderTargetTexture = true;
  }
};
var Ks = class extends pt {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null);
    this.isData3DTexture = true;
    this.image = { data: e, width: t, height: n, depth: i };
    this.magFilter = ct;
    this.minFilter = ct;
    this.wrapR = Et;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
  }
};
var qc = class extends zt {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t);
    this.isWebGL3DRenderTarget = true;
    this.depth = n;
    this.texture = new Ks(null, e, t, n);
    this.texture.isRenderTargetTexture = true;
  }
};
var Yc = class extends zt {
  constructor(e = 1, t = 1, n = 1, i = {}) {
    super(e, t, i);
    this.isWebGLMultipleRenderTargets = true;
    const s = this.texture;
    this.texture = [];
    for (let a = 0; a < n; a++) {
      this.texture[a] = s.clone();
      this.texture[a].isRenderTargetTexture = true;
    }
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      this.width = e;
      this.height = t;
      this.depth = n;
      for (let i = 0, s = this.texture.length; i < s; i++) {
        this.texture[i].image.width = e;
        this.texture[i].image.height = t;
        this.texture[i].image.depth = n;
      }
      this.dispose();
    }
    this.viewport.set(0, 0, e, t);
    this.scissor.set(0, 0, e, t);
    return this;
  }
  copy(e) {
    this.dispose();
    this.width = e.width;
    this.height = e.height;
    this.depth = e.depth;
    this.scissor.copy(e.scissor);
    this.scissorTest = e.scissorTest;
    this.viewport.copy(e.viewport);
    this.depthBuffer = e.depthBuffer;
    this.stencilBuffer = e.stencilBuffer;
    if (e.depthTexture !== null)
      this.depthTexture = e.depthTexture.clone();
    this.texture.length = 0;
    for (let t = 0, n = e.texture.length; t < n; t++) {
      this.texture[t] = e.texture[t].clone();
      this.texture[t].isRenderTargetTexture = true;
    }
    return this;
  }
};
var Tt = class {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    this.isQuaternion = true;
    this._x = e;
    this._y = t;
    this._z = n;
    this._w = i;
  }
  static slerpFlat(e, t, n, i, s, a, o) {
    let c = n[i + 0], l = n[i + 1], h = n[i + 2], u = n[i + 3];
    const d = s[a + 0], f = s[a + 1], m = s[a + 2], _ = s[a + 3];
    if (o === 0) {
      e[t + 0] = c;
      e[t + 1] = l;
      e[t + 2] = h;
      e[t + 3] = u;
      return;
    }
    if (o === 1) {
      e[t + 0] = d;
      e[t + 1] = f;
      e[t + 2] = m;
      e[t + 3] = _;
      return;
    }
    if (u !== _ || c !== d || l !== f || h !== m) {
      let g = 1 - o;
      const p = c * d + l * f + h * m + u * _, v = p >= 0 ? 1 : -1, x = 1 - p * p;
      if (x > Number.EPSILON) {
        const S = Math.sqrt(x), E = Math.atan2(S, p * v);
        g = Math.sin(g * E) / S;
        o = Math.sin(o * E) / S;
      }
      const M = o * v;
      c = c * g + d * M;
      l = l * g + f * M;
      h = h * g + m * M;
      u = u * g + _ * M;
      if (g === 1 - o) {
        const S = 1 / Math.sqrt(c * c + l * l + h * h + u * u);
        c *= S;
        l *= S;
        h *= S;
        u *= S;
      }
    }
    e[t] = c;
    e[t + 1] = l;
    e[t + 2] = h;
    e[t + 3] = u;
  }
  static multiplyQuaternionsFlat(e, t, n, i, s, a) {
    const o = n[i];
    const c = n[i + 1];
    const l = n[i + 2];
    const h = n[i + 3];
    const u = s[a];
    const d = s[a + 1];
    const f = s[a + 2];
    const m = s[a + 3];
    e[t] = o * m + h * u + c * f - l * d;
    e[t + 1] = c * m + h * d + l * u - o * f;
    e[t + 2] = l * m + h * f + o * d - c * u;
    e[t + 3] = h * m - o * u - c * d - l * f;
    return e;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e;
    this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e;
    this._onChangeCallback();
  }
  set(e, t, n, i) {
    this._x = e;
    this._y = t;
    this._z = n;
    this._w = i;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    this._x = e.x;
    this._y = e.y;
    this._z = e.z;
    this._w = e.w;
    this._onChangeCallback();
    return this;
  }
  setFromEuler(e, t) {
    const n = e._x, i = e._y, s = e._z, a = e._order;
    const o = Math.cos;
    const c = Math.sin;
    const l = o(n / 2);
    const h = o(i / 2);
    const u = o(s / 2);
    const d = c(n / 2);
    const f = c(i / 2);
    const m = c(s / 2);
    switch (a) {
      case "XYZ":
        this._x = d * h * u + l * f * m;
        this._y = l * f * u - d * h * m;
        this._z = l * h * m + d * f * u;
        this._w = l * h * u - d * f * m;
        break;
      case "YXZ":
        this._x = d * h * u + l * f * m;
        this._y = l * f * u - d * h * m;
        this._z = l * h * m - d * f * u;
        this._w = l * h * u + d * f * m;
        break;
      case "ZXY":
        this._x = d * h * u - l * f * m;
        this._y = l * f * u + d * h * m;
        this._z = l * h * m + d * f * u;
        this._w = l * h * u - d * f * m;
        break;
      case "ZYX":
        this._x = d * h * u - l * f * m;
        this._y = l * f * u + d * h * m;
        this._z = l * h * m - d * f * u;
        this._w = l * h * u + d * f * m;
        break;
      case "YZX":
        this._x = d * h * u + l * f * m;
        this._y = l * f * u + d * h * m;
        this._z = l * h * m - d * f * u;
        this._w = l * h * u - d * f * m;
        break;
      case "XZY":
        this._x = d * h * u - l * f * m;
        this._y = l * f * u - d * h * m;
        this._z = l * h * m + d * f * u;
        this._w = l * h * u + d * f * m;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + a);
    }
    if (t !== false)
      this._onChangeCallback();
    return this;
  }
  setFromAxisAngle(e, t) {
    const n = t / 2, i = Math.sin(n);
    this._x = e.x * i;
    this._y = e.y * i;
    this._z = e.z * i;
    this._w = Math.cos(n);
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(e) {
    const t = e.elements, n = t[0], i = t[4], s = t[8], a = t[1], o = t[5], c = t[9], l = t[2], h = t[6], u = t[10], d = n + o + u;
    if (d > 0) {
      const f = 0.5 / Math.sqrt(d + 1);
      this._w = 0.25 / f;
      this._x = (h - c) * f;
      this._y = (s - l) * f;
      this._z = (a - i) * f;
    } else if (n > o && n > u) {
      const f = 2 * Math.sqrt(1 + n - o - u);
      this._w = (h - c) / f;
      this._x = 0.25 * f;
      this._y = (i + a) / f;
      this._z = (s + l) / f;
    } else if (o > u) {
      const f = 2 * Math.sqrt(1 + o - n - u);
      this._w = (s - l) / f;
      this._x = (i + a) / f;
      this._y = 0.25 * f;
      this._z = (c + h) / f;
    } else {
      const f = 2 * Math.sqrt(1 + u - n - o);
      this._w = (a - i) / f;
      this._x = (s + l) / f;
      this._y = (c + h) / f;
      this._z = 0.25 * f;
    }
    this._onChangeCallback();
    return this;
  }
  setFromUnitVectors(e, t) {
    let n = e.dot(t) + 1;
    if (n < Number.EPSILON) {
      n = 0;
      if (Math.abs(e.x) > Math.abs(e.z)) {
        this._x = -e.y;
        this._y = e.x;
        this._z = 0;
        this._w = n;
      } else {
        this._x = 0;
        this._y = -e.z;
        this._z = e.y;
        this._w = n;
      }
    } else {
      this._x = e.y * t.z - e.z * t.y;
      this._y = e.z * t.x - e.x * t.z;
      this._z = e.x * t.y - e.y * t.x;
      this._w = n;
    }
    return this.normalize();
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(st(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const n = this.angleTo(e);
    if (n === 0)
      return this;
    const i = Math.min(1, t / n);
    this.slerp(e, i);
    return this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onChangeCallback();
    return this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    if (e === 0) {
      this._x = 0;
      this._y = 0;
      this._z = 0;
      this._w = 1;
    } else {
      e = 1 / e;
      this._x = this._x * e;
      this._y = this._y * e;
      this._z = this._z * e;
      this._w = this._w * e;
    }
    this._onChangeCallback();
    return this;
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const n = e._x, i = e._y, s = e._z, a = e._w;
    const o = t._x, c = t._y, l = t._z, h = t._w;
    this._x = n * h + a * o + i * l - s * c;
    this._y = i * h + a * c + s * o - n * l;
    this._z = s * h + a * l + n * c - i * o;
    this._w = a * h - n * o - i * c - s * l;
    this._onChangeCallback();
    return this;
  }
  slerp(e, t) {
    if (t === 0)
      return this;
    if (t === 1)
      return this.copy(e);
    const n = this._x, i = this._y, s = this._z, a = this._w;
    let o = a * e._w + n * e._x + i * e._y + s * e._z;
    if (o < 0) {
      this._w = -e._w;
      this._x = -e._x;
      this._y = -e._y;
      this._z = -e._z;
      o = -o;
    } else {
      this.copy(e);
    }
    if (o >= 1) {
      this._w = a;
      this._x = n;
      this._y = i;
      this._z = s;
      return this;
    }
    const c = 1 - o * o;
    if (c <= Number.EPSILON) {
      const f = 1 - t;
      this._w = f * a + t * this._w;
      this._x = f * n + t * this._x;
      this._y = f * i + t * this._y;
      this._z = f * s + t * this._z;
      this.normalize();
      this._onChangeCallback();
      return this;
    }
    const l = Math.sqrt(c);
    const h = Math.atan2(l, o);
    const u = Math.sin((1 - t) * h) / l, d = Math.sin(t * h) / l;
    this._w = a * u + this._w * d;
    this._x = n * u + this._x * d;
    this._y = i * u + this._y * d;
    this._z = s * u + this._z * d;
    this._onChangeCallback();
    return this;
  }
  slerpQuaternions(e, t, n) {
    return this.copy(e).slerp(t, n);
  }
  random() {
    const e = Math.random();
    const t = Math.sqrt(1 - e);
    const n = Math.sqrt(e);
    const i = 2 * Math.PI * Math.random();
    const s = 2 * Math.PI * Math.random();
    return this.set(
      t * Math.cos(i),
      n * Math.sin(s),
      n * Math.cos(s),
      t * Math.sin(i)
    );
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    this._x = e[t];
    this._y = e[t + 1];
    this._z = e[t + 2];
    this._w = e[t + 3];
    this._onChangeCallback();
    return this;
  }
  toArray(e = [], t = 0) {
    e[t] = this._x;
    e[t + 1] = this._y;
    e[t + 2] = this._z;
    e[t + 3] = this._w;
    return e;
  }
  fromBufferAttribute(e, t) {
    this._x = e.getX(t);
    this._y = e.getY(t);
    this._z = e.getZ(t);
    this._w = e.getW(t);
    return this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    this._onChangeCallback = e;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._w;
  }
};
var w = class r {
  constructor(e = 0, t = 0, n = 0) {
    r.prototype.isVector3 = true;
    this.x = e;
    this.y = t;
    this.z = n;
  }
  set(e, t, n) {
    if (n === void 0)
      n = this.z;
    this.x = e;
    this.y = t;
    this.z = n;
    return this;
  }
  setScalar(e) {
    this.x = e;
    this.y = e;
    this.z = e;
    return this;
  }
  setX(e) {
    this.x = e;
    return this;
  }
  setY(e) {
    this.y = e;
    return this;
  }
  setZ(e) {
    this.z = e;
    return this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    this.x = e.x;
    this.y = e.y;
    this.z = e.z;
    return this;
  }
  add(e) {
    this.x += e.x;
    this.y += e.y;
    this.z += e.z;
    return this;
  }
  addScalar(e) {
    this.x += e;
    this.y += e;
    this.z += e;
    return this;
  }
  addVectors(e, t) {
    this.x = e.x + t.x;
    this.y = e.y + t.y;
    this.z = e.z + t.z;
    return this;
  }
  addScaledVector(e, t) {
    this.x += e.x * t;
    this.y += e.y * t;
    this.z += e.z * t;
    return this;
  }
  sub(e) {
    this.x -= e.x;
    this.y -= e.y;
    this.z -= e.z;
    return this;
  }
  subScalar(e) {
    this.x -= e;
    this.y -= e;
    this.z -= e;
    return this;
  }
  subVectors(e, t) {
    this.x = e.x - t.x;
    this.y = e.y - t.y;
    this.z = e.z - t.z;
    return this;
  }
  multiply(e) {
    this.x *= e.x;
    this.y *= e.y;
    this.z *= e.z;
    return this;
  }
  multiplyScalar(e) {
    this.x *= e;
    this.y *= e;
    this.z *= e;
    return this;
  }
  multiplyVectors(e, t) {
    this.x = e.x * t.x;
    this.y = e.y * t.y;
    this.z = e.z * t.z;
    return this;
  }
  applyEuler(e) {
    return this.applyQuaternion(Yh.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(Yh.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, i = this.z;
    const s = e.elements;
    this.x = s[0] * t + s[3] * n + s[6] * i;
    this.y = s[1] * t + s[4] * n + s[7] * i;
    this.z = s[2] * t + s[5] * n + s[8] * i;
    return this;
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, i = this.z;
    const s = e.elements;
    const a = 1 / (s[3] * t + s[7] * n + s[11] * i + s[15]);
    this.x = (s[0] * t + s[4] * n + s[8] * i + s[12]) * a;
    this.y = (s[1] * t + s[5] * n + s[9] * i + s[13]) * a;
    this.z = (s[2] * t + s[6] * n + s[10] * i + s[14]) * a;
    return this;
  }
  applyQuaternion(e) {
    const t = this.x, n = this.y, i = this.z;
    const s = e.x, a = e.y, o = e.z, c = e.w;
    const l = c * t + a * i - o * n;
    const h = c * n + o * t - s * i;
    const u = c * i + s * n - a * t;
    const d = -s * t - a * n - o * i;
    this.x = l * c + d * -s + h * -o - u * -a;
    this.y = h * c + d * -a + u * -s - l * -o;
    this.z = u * c + d * -o + l * -a - h * -s;
    return this;
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x, n = this.y, i = this.z;
    const s = e.elements;
    this.x = s[0] * t + s[4] * n + s[8] * i;
    this.y = s[1] * t + s[5] * n + s[9] * i;
    this.z = s[2] * t + s[6] * n + s[10] * i;
    return this.normalize();
  }
  divide(e) {
    this.x /= e.x;
    this.y /= e.y;
    this.z /= e.z;
    return this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    this.x = Math.min(this.x, e.x);
    this.y = Math.min(this.y, e.y);
    this.z = Math.min(this.z, e.z);
    return this;
  }
  max(e) {
    this.x = Math.max(this.x, e.x);
    this.y = Math.max(this.y, e.y);
    this.z = Math.max(this.z, e.z);
    return this;
  }
  clamp(e, t) {
    this.x = Math.max(e.x, Math.min(t.x, this.x));
    this.y = Math.max(e.y, Math.min(t.y, this.y));
    this.z = Math.max(e.z, Math.min(t.z, this.z));
    return this;
  }
  clampScalar(e, t) {
    this.x = Math.max(e, Math.min(t, this.x));
    this.y = Math.max(e, Math.min(t, this.y));
    this.z = Math.max(e, Math.min(t, this.z));
    return this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }
  roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    this.x += (e.x - this.x) * t;
    this.y += (e.y - this.y) * t;
    this.z += (e.z - this.z) * t;
    return this;
  }
  lerpVectors(e, t, n) {
    this.x = e.x + (t.x - e.x) * n;
    this.y = e.y + (t.y - e.y) * n;
    this.z = e.z + (t.z - e.z) * n;
    return this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const n = e.x, i = e.y, s = e.z;
    const a = t.x, o = t.y, c = t.z;
    this.x = i * c - s * o;
    this.y = s * a - n * c;
    this.z = n * o - i * a;
    return this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0)
      return this.set(0, 0, 0);
    const n = e.dot(this) / t;
    return this.copy(e).multiplyScalar(n);
  }
  projectOnPlane(e) {
    Vo.copy(this).projectOnVector(e);
    return this.sub(Vo);
  }
  reflect(e) {
    return this.sub(Vo.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(st(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y, i = this.z - e.z;
    return t * t + n * n + i * i;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, n) {
    const i = Math.sin(t) * e;
    this.x = i * Math.sin(n);
    this.y = Math.cos(t) * e;
    this.z = i * Math.cos(n);
    return this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, n) {
    this.x = e * Math.sin(t);
    this.y = n;
    this.z = e * Math.cos(t);
    return this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    this.x = t[12];
    this.y = t[13];
    this.z = t[14];
    return this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length();
    const n = this.setFromMatrixColumn(e, 1).length();
    const i = this.setFromMatrixColumn(e, 2).length();
    this.x = t;
    this.y = n;
    this.z = i;
    return this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    this.x = e._x;
    this.y = e._y;
    this.z = e._z;
    return this;
  }
  setFromColor(e) {
    this.x = e.r;
    this.y = e.g;
    this.z = e.b;
    return this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    this.x = e[t];
    this.y = e[t + 1];
    this.z = e[t + 2];
    return this;
  }
  toArray(e = [], t = 0) {
    e[t] = this.x;
    e[t + 1] = this.y;
    e[t + 2] = this.z;
    return e;
  }
  fromBufferAttribute(e, t) {
    this.x = e.getX(t);
    this.y = e.getY(t);
    this.z = e.getZ(t);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    return this;
  }
  randomDirection() {
    const e = (Math.random() - 0.5) * 2;
    const t = Math.random() * Math.PI * 2;
    const n = Math.sqrt(1 - e ** 2);
    this.x = n * Math.cos(t);
    this.y = n * Math.sin(t);
    this.z = e;
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
  }
};
var Vo = new w();
var Yh = new Tt();
var qt = class {
  constructor(e = new w(Infinity, Infinity, Infinity), t = new w(-Infinity, -Infinity, -Infinity)) {
    this.isBox3 = true;
    this.min = e;
    this.max = t;
  }
  set(e, t) {
    this.min.copy(e);
    this.max.copy(t);
    return this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t += 3) {
      this.expandByPoint(gn.fromArray(e, t));
    }
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, n = e.count; t < n; t++) {
      this.expandByPoint(gn.fromBufferAttribute(e, t));
    }
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++) {
      this.expandByPoint(e[t]);
    }
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = gn.copy(t).multiplyScalar(0.5);
    this.min.copy(e).sub(n);
    this.max.copy(e).add(n);
    return this;
  }
  setFromObject(e, t = false) {
    this.makeEmpty();
    return this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.min.copy(e.min);
    this.max.copy(e.max);
    return this;
  }
  makeEmpty() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    this.min.min(e);
    this.max.max(e);
    return this;
  }
  expandByVector(e) {
    this.min.sub(e);
    this.max.add(e);
    return this;
  }
  expandByScalar(e) {
    this.min.addScalar(-e);
    this.max.addScalar(e);
    return this;
  }
  expandByObject(e, t = false) {
    e.updateWorldMatrix(false, false);
    if (e.boundingBox !== void 0) {
      if (e.boundingBox === null) {
        e.computeBoundingBox();
      }
      Ii.copy(e.boundingBox);
      Ii.applyMatrix4(e.matrixWorld);
      this.union(Ii);
    } else {
      const i = e.geometry;
      if (i !== void 0) {
        if (t && i.attributes !== void 0 && i.attributes.position !== void 0) {
          const s = i.attributes.position;
          for (let a = 0, o = s.count; a < o; a++) {
            gn.fromBufferAttribute(s, a).applyMatrix4(e.matrixWorld);
            this.expandByPoint(gn);
          }
        } else {
          if (i.boundingBox === null) {
            i.computeBoundingBox();
          }
          Ii.copy(i.boundingBox);
          Ii.applyMatrix4(e.matrixWorld);
          this.union(Ii);
        }
      }
    }
    const n = e.children;
    for (let i = 0, s = n.length; i < s; i++) {
      this.expandByObject(n[i], t);
    }
    return this;
  }
  containsPoint(e) {
    return e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z ? false : true;
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z ? false : true;
  }
  intersectsSphere(e) {
    this.clampPoint(e.center, gn);
    return gn.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, n;
    if (e.normal.x > 0) {
      t = e.normal.x * this.min.x;
      n = e.normal.x * this.max.x;
    } else {
      t = e.normal.x * this.max.x;
      n = e.normal.x * this.min.x;
    }
    if (e.normal.y > 0) {
      t += e.normal.y * this.min.y;
      n += e.normal.y * this.max.y;
    } else {
      t += e.normal.y * this.max.y;
      n += e.normal.y * this.min.y;
    }
    if (e.normal.z > 0) {
      t += e.normal.z * this.min.z;
      n += e.normal.z * this.max.z;
    } else {
      t += e.normal.z * this.max.z;
      n += e.normal.z * this.min.z;
    }
    return t <= -e.constant && n >= -e.constant;
  }
  intersectsTriangle(e) {
    if (this.isEmpty()) {
      return false;
    }
    this.getCenter(bs);
    Fr.subVectors(this.max, bs);
    Ui.subVectors(e.a, bs);
    Di.subVectors(e.b, bs);
    Ni.subVectors(e.c, bs);
    Un.subVectors(Di, Ui);
    Dn.subVectors(Ni, Di);
    ti.subVectors(Ui, Ni);
    let t = [
      0,
      -Un.z,
      Un.y,
      0,
      -Dn.z,
      Dn.y,
      0,
      -ti.z,
      ti.y,
      Un.z,
      0,
      -Un.x,
      Dn.z,
      0,
      -Dn.x,
      ti.z,
      0,
      -ti.x,
      -Un.y,
      Un.x,
      0,
      -Dn.y,
      Dn.x,
      0,
      -ti.y,
      ti.x,
      0
    ];
    if (!Ho(t, Ui, Di, Ni, Fr)) {
      return false;
    }
    t = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    if (!Ho(t, Ui, Di, Ni, Fr)) {
      return false;
    }
    Or.crossVectors(Un, Dn);
    t = [Or.x, Or.y, Or.z];
    return Ho(t, Ui, Di, Ni, Fr);
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, gn).distanceTo(e);
  }
  getBoundingSphere(e) {
    if (this.isEmpty()) {
      e.makeEmpty();
    } else {
      this.getCenter(e.center);
      e.radius = this.getSize(gn).length() * 0.5;
    }
    return e;
  }
  intersect(e) {
    this.min.max(e.min);
    this.max.min(e.max);
    if (this.isEmpty())
      this.makeEmpty();
    return this;
  }
  union(e) {
    this.min.min(e.min);
    this.max.max(e.max);
    return this;
  }
  applyMatrix4(e) {
    if (this.isEmpty())
      return this;
    mn[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e);
    mn[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e);
    mn[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e);
    mn[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e);
    mn[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e);
    mn[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e);
    mn[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e);
    mn[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e);
    this.setFromPoints(mn);
    return this;
  }
  translate(e) {
    this.min.add(e);
    this.max.add(e);
    return this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
};
var mn = [
  new w(),
  new w(),
  new w(),
  new w(),
  new w(),
  new w(),
  new w(),
  new w()
];
var gn = new w();
var Ii = new qt();
var Ui = new w();
var Di = new w();
var Ni = new w();
var Un = new w();
var Dn = new w();
var ti = new w();
var bs = new w();
var Fr = new w();
var Or = new w();
var ni = new w();
function Ho(r, e, t, n, i) {
  for (let s = 0, a = r.length - 3; s <= a; s += 3) {
    ni.fromArray(r, s);
    const o = i.x * Math.abs(ni.x) + i.y * Math.abs(ni.y) + i.z * Math.abs(ni.z);
    const c = e.dot(ni);
    const l = t.dot(ni);
    const h = n.dot(ni);
    if (Math.max(-Math.max(c, l, h), Math.min(c, l, h)) > o) {
      return false;
    }
  }
  return true;
}
var Vp = new qt();
var Es = new w();
var Go = new w();
var Yt = class {
  constructor(e = new w(), t = -1) {
    this.center = e;
    this.radius = t;
  }
  set(e, t) {
    this.center.copy(e);
    this.radius = t;
    return this;
  }
  setFromPoints(e, t) {
    const n = this.center;
    if (t !== void 0) {
      n.copy(t);
    } else {
      Vp.setFromPoints(e).getCenter(n);
    }
    let i = 0;
    for (let s = 0, a = e.length; s < a; s++) {
      i = Math.max(i, n.distanceToSquared(e[s]));
    }
    this.radius = Math.sqrt(i);
    return this;
  }
  copy(e) {
    this.center.copy(e.center);
    this.radius = e.radius;
    return this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    this.center.set(0, 0, 0);
    this.radius = -1;
    return this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const n = this.center.distanceToSquared(e);
    t.copy(e);
    if (n > this.radius * this.radius) {
      t.sub(this.center).normalize();
      t.multiplyScalar(this.radius).add(this.center);
    }
    return t;
  }
  getBoundingBox(e) {
    if (this.isEmpty()) {
      e.makeEmpty();
      return e;
    }
    e.set(this.center, this.center);
    e.expandByScalar(this.radius);
    return e;
  }
  applyMatrix4(e) {
    this.center.applyMatrix4(e);
    this.radius = this.radius * e.getMaxScaleOnAxis();
    return this;
  }
  translate(e) {
    this.center.add(e);
    return this;
  }
  expandByPoint(e) {
    if (this.isEmpty()) {
      this.center.copy(e);
      this.radius = 0;
      return this;
    }
    Es.subVectors(e, this.center);
    const t = Es.lengthSq();
    if (t > this.radius * this.radius) {
      const n = Math.sqrt(t);
      const i = (n - this.radius) * 0.5;
      this.center.addScaledVector(Es, i / n);
      this.radius += i;
    }
    return this;
  }
  union(e) {
    if (e.isEmpty()) {
      return this;
    }
    if (this.isEmpty()) {
      this.copy(e);
      return this;
    }
    if (this.center.equals(e.center) === true) {
      this.radius = Math.max(this.radius, e.radius);
    } else {
      Go.subVectors(e.center, this.center).setLength(e.radius);
      this.expandByPoint(Es.copy(e.center).add(Go));
      this.expandByPoint(Es.copy(e.center).sub(Go));
    }
    return this;
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var _n = new w();
var Wo = new w();
var Br = new w();
var Nn = new w();
var Xo = new w();
var zr = new w();
var qo = new w();
var vi = class {
  constructor(e = new w(), t = new w(0, 0, -1)) {
    this.origin = e;
    this.direction = t;
  }
  set(e, t) {
    this.origin.copy(e);
    this.direction.copy(t);
    return this;
  }
  copy(e) {
    this.origin.copy(e.origin);
    this.direction.copy(e.direction);
    return this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    this.direction.copy(e).sub(this.origin).normalize();
    return this;
  }
  recast(e) {
    this.origin.copy(this.at(e, _n));
    return this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const n = t.dot(this.direction);
    if (n < 0) {
      return t.copy(this.origin);
    }
    return t.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = _n.subVectors(e, this.origin).dot(this.direction);
    if (t < 0) {
      return this.origin.distanceToSquared(e);
    }
    _n.copy(this.origin).addScaledVector(this.direction, t);
    return _n.distanceToSquared(e);
  }
  distanceSqToSegment(e, t, n, i) {
    Wo.copy(e).add(t).multiplyScalar(0.5);
    Br.copy(t).sub(e).normalize();
    Nn.copy(this.origin).sub(Wo);
    const s = e.distanceTo(t) * 0.5;
    const a = -this.direction.dot(Br);
    const o = Nn.dot(this.direction);
    const c = -Nn.dot(Br);
    const l = Nn.lengthSq();
    const h = Math.abs(1 - a * a);
    let u, d, f, m;
    if (h > 0) {
      u = a * c - o;
      d = a * o - c;
      m = s * h;
      if (u >= 0) {
        if (d >= -m) {
          if (d <= m) {
            const _ = 1 / h;
            u *= _;
            d *= _;
            f = u * (u + a * d + 2 * o) + d * (a * u + d + 2 * c) + l;
          } else {
            d = s;
            u = Math.max(0, -(a * d + o));
            f = -u * u + d * (d + 2 * c) + l;
          }
        } else {
          d = -s;
          u = Math.max(0, -(a * d + o));
          f = -u * u + d * (d + 2 * c) + l;
        }
      } else {
        if (d <= -m) {
          u = Math.max(0, -(-a * s + o));
          d = u > 0 ? -s : Math.min(Math.max(-s, -c), s);
          f = -u * u + d * (d + 2 * c) + l;
        } else if (d <= m) {
          u = 0;
          d = Math.min(Math.max(-s, -c), s);
          f = d * (d + 2 * c) + l;
        } else {
          u = Math.max(0, -(a * s + o));
          d = u > 0 ? s : Math.min(Math.max(-s, -c), s);
          f = -u * u + d * (d + 2 * c) + l;
        }
      }
    } else {
      d = a > 0 ? -s : s;
      u = Math.max(0, -(a * d + o));
      f = -u * u + d * (d + 2 * c) + l;
    }
    if (n) {
      n.copy(this.origin).addScaledVector(this.direction, u);
    }
    if (i) {
      i.copy(Wo).addScaledVector(Br, d);
    }
    return f;
  }
  intersectSphere(e, t) {
    _n.subVectors(e.center, this.origin);
    const n = _n.dot(this.direction);
    const i = _n.dot(_n) - n * n;
    const s = e.radius * e.radius;
    if (i > s)
      return null;
    const a = Math.sqrt(s - i);
    const o = n - a;
    const c = n + a;
    if (c < 0)
      return null;
    if (o < 0)
      return this.at(c, t);
    return this.at(o, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0) {
      if (e.distanceToPoint(this.origin) === 0) {
        return 0;
      }
      return null;
    }
    const n = -(this.origin.dot(e.normal) + e.constant) / t;
    return n >= 0 ? n : null;
  }
  intersectPlane(e, t) {
    const n = this.distanceToPlane(e);
    if (n === null) {
      return null;
    }
    return this.at(n, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    if (t === 0) {
      return true;
    }
    const n = e.normal.dot(this.direction);
    if (n * t < 0) {
      return true;
    }
    return false;
  }
  intersectBox(e, t) {
    let n, i, s, a, o, c;
    const l = 1 / this.direction.x, h = 1 / this.direction.y, u = 1 / this.direction.z;
    const d = this.origin;
    if (l >= 0) {
      n = (e.min.x - d.x) * l;
      i = (e.max.x - d.x) * l;
    } else {
      n = (e.max.x - d.x) * l;
      i = (e.min.x - d.x) * l;
    }
    if (h >= 0) {
      s = (e.min.y - d.y) * h;
      a = (e.max.y - d.y) * h;
    } else {
      s = (e.max.y - d.y) * h;
      a = (e.min.y - d.y) * h;
    }
    if (n > a || s > i)
      return null;
    if (s > n || isNaN(n))
      n = s;
    if (a < i || isNaN(i))
      i = a;
    if (u >= 0) {
      o = (e.min.z - d.z) * u;
      c = (e.max.z - d.z) * u;
    } else {
      o = (e.max.z - d.z) * u;
      c = (e.min.z - d.z) * u;
    }
    if (n > c || o > i)
      return null;
    if (o > n || n !== n)
      n = o;
    if (c < i || i !== i)
      i = c;
    if (i < 0)
      return null;
    return this.at(n >= 0 ? n : i, t);
  }
  intersectsBox(e) {
    return this.intersectBox(e, _n) !== null;
  }
  intersectTriangle(e, t, n, i, s) {
    Xo.subVectors(t, e);
    zr.subVectors(n, e);
    qo.crossVectors(Xo, zr);
    let a = this.direction.dot(qo);
    let o;
    if (a > 0) {
      if (i)
        return null;
      o = 1;
    } else if (a < 0) {
      o = -1;
      a = -a;
    } else {
      return null;
    }
    Nn.subVectors(this.origin, e);
    const c = o * this.direction.dot(zr.crossVectors(Nn, zr));
    if (c < 0) {
      return null;
    }
    const l = o * this.direction.dot(Xo.cross(Nn));
    if (l < 0) {
      return null;
    }
    if (c + l > a) {
      return null;
    }
    const h = -o * Nn.dot(qo);
    if (h < 0) {
      return null;
    }
    return this.at(h / a, s);
  }
  applyMatrix4(e) {
    this.origin.applyMatrix4(e);
    this.direction.transformDirection(e);
    return this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var Ne = class r {
  constructor() {
    r.prototype.isMatrix4 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
  }
  set(e, t, n, i, s, a, o, c, l, h, u, d, f, m, _, g) {
    const p = this.elements;
    p[0] = e;
    p[4] = t;
    p[8] = n;
    p[12] = i;
    p[1] = s;
    p[5] = a;
    p[9] = o;
    p[13] = c;
    p[2] = l;
    p[6] = h;
    p[10] = u;
    p[14] = d;
    p[3] = f;
    p[7] = m;
    p[11] = _;
    p[15] = g;
    return this;
  }
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  clone() {
    return new r().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements;
    const n = e.elements;
    t[0] = n[0];
    t[1] = n[1];
    t[2] = n[2];
    t[3] = n[3];
    t[4] = n[4];
    t[5] = n[5];
    t[6] = n[6];
    t[7] = n[7];
    t[8] = n[8];
    t[9] = n[9];
    t[10] = n[10];
    t[11] = n[11];
    t[12] = n[12];
    t[13] = n[13];
    t[14] = n[14];
    t[15] = n[15];
    return this;
  }
  copyPosition(e) {
    const t = this.elements, n = e.elements;
    t[12] = n[12];
    t[13] = n[13];
    t[14] = n[14];
    return this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  extractBasis(e, t, n) {
    e.setFromMatrixColumn(this, 0);
    t.setFromMatrixColumn(this, 1);
    n.setFromMatrixColumn(this, 2);
    return this;
  }
  makeBasis(e, t, n) {
    this.set(
      e.x,
      t.x,
      n.x,
      0,
      e.y,
      t.y,
      n.y,
      0,
      e.z,
      t.z,
      n.z,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  extractRotation(e) {
    const t = this.elements;
    const n = e.elements;
    const i = 1 / Fi.setFromMatrixColumn(e, 0).length();
    const s = 1 / Fi.setFromMatrixColumn(e, 1).length();
    const a = 1 / Fi.setFromMatrixColumn(e, 2).length();
    t[0] = n[0] * i;
    t[1] = n[1] * i;
    t[2] = n[2] * i;
    t[3] = 0;
    t[4] = n[4] * s;
    t[5] = n[5] * s;
    t[6] = n[6] * s;
    t[7] = 0;
    t[8] = n[8] * a;
    t[9] = n[9] * a;
    t[10] = n[10] * a;
    t[11] = 0;
    t[12] = 0;
    t[13] = 0;
    t[14] = 0;
    t[15] = 1;
    return this;
  }
  makeRotationFromEuler(e) {
    const t = this.elements;
    const n = e.x, i = e.y, s = e.z;
    const a = Math.cos(n), o = Math.sin(n);
    const c = Math.cos(i), l = Math.sin(i);
    const h = Math.cos(s), u = Math.sin(s);
    if (e.order === "XYZ") {
      const d = a * h, f = a * u, m = o * h, _ = o * u;
      t[0] = c * h;
      t[4] = -c * u;
      t[8] = l;
      t[1] = f + m * l;
      t[5] = d - _ * l;
      t[9] = -o * c;
      t[2] = _ - d * l;
      t[6] = m + f * l;
      t[10] = a * c;
    } else if (e.order === "YXZ") {
      const d = c * h, f = c * u, m = l * h, _ = l * u;
      t[0] = d + _ * o;
      t[4] = m * o - f;
      t[8] = a * l;
      t[1] = a * u;
      t[5] = a * h;
      t[9] = -o;
      t[2] = f * o - m;
      t[6] = _ + d * o;
      t[10] = a * c;
    } else if (e.order === "ZXY") {
      const d = c * h, f = c * u, m = l * h, _ = l * u;
      t[0] = d - _ * o;
      t[4] = -a * u;
      t[8] = m + f * o;
      t[1] = f + m * o;
      t[5] = a * h;
      t[9] = _ - d * o;
      t[2] = -a * l;
      t[6] = o;
      t[10] = a * c;
    } else if (e.order === "ZYX") {
      const d = a * h, f = a * u, m = o * h, _ = o * u;
      t[0] = c * h;
      t[4] = m * l - f;
      t[8] = d * l + _;
      t[1] = c * u;
      t[5] = _ * l + d;
      t[9] = f * l - m;
      t[2] = -l;
      t[6] = o * c;
      t[10] = a * c;
    } else if (e.order === "YZX") {
      const d = a * c, f = a * l, m = o * c, _ = o * l;
      t[0] = c * h;
      t[4] = _ - d * u;
      t[8] = m * u + f;
      t[1] = u;
      t[5] = a * h;
      t[9] = -o * h;
      t[2] = -l * h;
      t[6] = f * u + m;
      t[10] = d - _ * u;
    } else if (e.order === "XZY") {
      const d = a * c, f = a * l, m = o * c, _ = o * l;
      t[0] = c * h;
      t[4] = -u;
      t[8] = l * h;
      t[1] = d * u + _;
      t[5] = a * h;
      t[9] = f * u - m;
      t[2] = m * u - f;
      t[6] = o * h;
      t[10] = _ * u + d;
    }
    t[3] = 0;
    t[7] = 0;
    t[11] = 0;
    t[12] = 0;
    t[13] = 0;
    t[14] = 0;
    t[15] = 1;
    return this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(Hp, e, Gp);
  }
  lookAt(e, t, n) {
    const i = this.elements;
    Dt.subVectors(e, t);
    if (Dt.lengthSq() === 0) {
      Dt.z = 1;
    }
    Dt.normalize();
    Fn.crossVectors(n, Dt);
    if (Fn.lengthSq() === 0) {
      if (Math.abs(n.z) === 1) {
        Dt.x += 1e-4;
      } else {
        Dt.z += 1e-4;
      }
      Dt.normalize();
      Fn.crossVectors(n, Dt);
    }
    Fn.normalize();
    kr.crossVectors(Dt, Fn);
    i[0] = Fn.x;
    i[4] = kr.x;
    i[8] = Dt.x;
    i[1] = Fn.y;
    i[5] = kr.y;
    i[9] = Dt.y;
    i[2] = Fn.z;
    i[6] = kr.z;
    i[10] = Dt.z;
    return this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements;
    const i = t.elements;
    const s = this.elements;
    const a = n[0], o = n[4], c = n[8], l = n[12];
    const h = n[1], u = n[5], d = n[9], f = n[13];
    const m = n[2], _ = n[6], g = n[10], p = n[14];
    const v = n[3], x = n[7], M = n[11], S = n[15];
    const E = i[0], C = i[4], P = i[8], y = i[12];
    const A = i[1], O = i[5], G = i[9], U = i[13];
    const F = i[2], z = i[6], K = i[10], Z = i[14];
    const Y = i[3], j = i[7], te = i[11], pe = i[15];
    s[0] = a * E + o * A + c * F + l * Y;
    s[4] = a * C + o * O + c * z + l * j;
    s[8] = a * P + o * G + c * K + l * te;
    s[12] = a * y + o * U + c * Z + l * pe;
    s[1] = h * E + u * A + d * F + f * Y;
    s[5] = h * C + u * O + d * z + f * j;
    s[9] = h * P + u * G + d * K + f * te;
    s[13] = h * y + u * U + d * Z + f * pe;
    s[2] = m * E + _ * A + g * F + p * Y;
    s[6] = m * C + _ * O + g * z + p * j;
    s[10] = m * P + _ * G + g * K + p * te;
    s[14] = m * y + _ * U + g * Z + p * pe;
    s[3] = v * E + x * A + M * F + S * Y;
    s[7] = v * C + x * O + M * z + S * j;
    s[11] = v * P + x * G + M * K + S * te;
    s[15] = v * y + x * U + M * Z + S * pe;
    return this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    t[0] *= e;
    t[4] *= e;
    t[8] *= e;
    t[12] *= e;
    t[1] *= e;
    t[5] *= e;
    t[9] *= e;
    t[13] *= e;
    t[2] *= e;
    t[6] *= e;
    t[10] *= e;
    t[14] *= e;
    t[3] *= e;
    t[7] *= e;
    t[11] *= e;
    t[15] *= e;
    return this;
  }
  determinant() {
    const e = this.elements;
    const t = e[0], n = e[4], i = e[8], s = e[12];
    const a = e[1], o = e[5], c = e[9], l = e[13];
    const h = e[2], u = e[6], d = e[10], f = e[14];
    const m = e[3], _ = e[7], g = e[11], p = e[15];
    return m * (+s * c * u - i * l * u - s * o * d + n * l * d + i * o * f - n * c * f) + _ * (+t * c * f - t * l * d + s * a * d - i * a * f + i * l * h - s * c * h) + g * (+t * l * u - t * o * f - s * a * u + n * a * f + s * o * h - n * l * h) + p * (-i * o * h - t * c * u + t * o * d + i * a * u - n * a * d + n * c * h);
  }
  transpose() {
    const e = this.elements;
    let t;
    t = e[1];
    e[1] = e[4];
    e[4] = t;
    t = e[2];
    e[2] = e[8];
    e[8] = t;
    t = e[6];
    e[6] = e[9];
    e[9] = t;
    t = e[3];
    e[3] = e[12];
    e[12] = t;
    t = e[7];
    e[7] = e[13];
    e[13] = t;
    t = e[11];
    e[11] = e[14];
    e[14] = t;
    return this;
  }
  setPosition(e, t, n) {
    const i = this.elements;
    if (e.isVector3) {
      i[12] = e.x;
      i[13] = e.y;
      i[14] = e.z;
    } else {
      i[12] = e;
      i[13] = t;
      i[14] = n;
    }
    return this;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], s = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8], u = e[9], d = e[10], f = e[11], m = e[12], _ = e[13], g = e[14], p = e[15], v = u * g * l - _ * d * l + _ * c * f - o * g * f - u * c * p + o * d * p, x = m * d * l - h * g * l - m * c * f + a * g * f + h * c * p - a * d * p, M = h * _ * l - m * u * l + m * o * f - a * _ * f - h * o * p + a * u * p, S = m * u * c - h * _ * c - m * o * d + a * _ * d + h * o * g - a * u * g;
    const E = t * v + n * x + i * M + s * S;
    if (E === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const C = 1 / E;
    e[0] = v * C;
    e[1] = (_ * d * s - u * g * s - _ * i * f + n * g * f + u * i * p - n * d * p) * C;
    e[2] = (o * g * s - _ * c * s + _ * i * l - n * g * l - o * i * p + n * c * p) * C;
    e[3] = (u * c * s - o * d * s - u * i * l + n * d * l + o * i * f - n * c * f) * C;
    e[4] = x * C;
    e[5] = (h * g * s - m * d * s + m * i * f - t * g * f - h * i * p + t * d * p) * C;
    e[6] = (m * c * s - a * g * s - m * i * l + t * g * l + a * i * p - t * c * p) * C;
    e[7] = (a * d * s - h * c * s + h * i * l - t * d * l - a * i * f + t * c * f) * C;
    e[8] = M * C;
    e[9] = (m * u * s - h * _ * s - m * n * f + t * _ * f + h * n * p - t * u * p) * C;
    e[10] = (a * _ * s - m * o * s + m * n * l - t * _ * l - a * n * p + t * o * p) * C;
    e[11] = (h * o * s - a * u * s - h * n * l + t * u * l + a * n * f - t * o * f) * C;
    e[12] = S * C;
    e[13] = (h * _ * i - m * u * i + m * n * d - t * _ * d - h * n * g + t * u * g) * C;
    e[14] = (m * o * i - a * _ * i - m * n * c + t * _ * c + a * n * g - t * o * g) * C;
    e[15] = (a * u * i - h * o * i + h * n * c - t * u * c - a * n * d + t * o * d) * C;
    return this;
  }
  scale(e) {
    const t = this.elements;
    const n = e.x, i = e.y, s = e.z;
    t[0] *= n;
    t[4] *= i;
    t[8] *= s;
    t[1] *= n;
    t[5] *= i;
    t[9] *= s;
    t[2] *= n;
    t[6] *= i;
    t[10] *= s;
    t[3] *= n;
    t[7] *= i;
    t[11] *= s;
    return this;
  }
  getMaxScaleOnAxis() {
    const e = this.elements;
    const t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2];
    const n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6];
    const i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, n, i));
  }
  makeTranslation(e, t, n) {
    this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      n,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationX(e) {
    const t = Math.cos(e), n = Math.sin(e);
    this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationY(e) {
    const t = Math.cos(e), n = Math.sin(e);
    this.set(
      t,
      0,
      n,
      0,
      0,
      1,
      0,
      0,
      -n,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e), n = Math.sin(e);
    this.set(
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationAxis(e, t) {
    const n = Math.cos(t);
    const i = Math.sin(t);
    const s = 1 - n;
    const a = e.x, o = e.y, c = e.z;
    const l = s * a, h = s * o;
    this.set(
      l * a + n,
      l * o - i * c,
      l * c + i * o,
      0,
      l * o + i * c,
      h * o + n,
      h * c - i * a,
      0,
      l * c - i * o,
      h * c + i * a,
      s * c * c + n,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeScale(e, t, n) {
    this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeShear(e, t, n, i, s, a) {
    this.set(
      1,
      n,
      s,
      0,
      e,
      1,
      a,
      0,
      t,
      i,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  compose(e, t, n) {
    const i = this.elements;
    const s = t._x, a = t._y, o = t._z, c = t._w;
    const l = s + s, h = a + a, u = o + o;
    const d = s * l, f = s * h, m = s * u;
    const _ = a * h, g = a * u, p = o * u;
    const v = c * l, x = c * h, M = c * u;
    const S = n.x, E = n.y, C = n.z;
    i[0] = (1 - (_ + p)) * S;
    i[1] = (f + M) * S;
    i[2] = (m - x) * S;
    i[3] = 0;
    i[4] = (f - M) * E;
    i[5] = (1 - (d + p)) * E;
    i[6] = (g + v) * E;
    i[7] = 0;
    i[8] = (m + x) * C;
    i[9] = (g - v) * C;
    i[10] = (1 - (d + _)) * C;
    i[11] = 0;
    i[12] = e.x;
    i[13] = e.y;
    i[14] = e.z;
    i[15] = 1;
    return this;
  }
  decompose(e, t, n) {
    const i = this.elements;
    let s = Fi.set(i[0], i[1], i[2]).length();
    const a = Fi.set(i[4], i[5], i[6]).length();
    const o = Fi.set(i[8], i[9], i[10]).length();
    const c = this.determinant();
    if (c < 0)
      s = -s;
    e.x = i[12];
    e.y = i[13];
    e.z = i[14];
    Kt.copy(this);
    const l = 1 / s;
    const h = 1 / a;
    const u = 1 / o;
    Kt.elements[0] *= l;
    Kt.elements[1] *= l;
    Kt.elements[2] *= l;
    Kt.elements[4] *= h;
    Kt.elements[5] *= h;
    Kt.elements[6] *= h;
    Kt.elements[8] *= u;
    Kt.elements[9] *= u;
    Kt.elements[10] *= u;
    t.setFromRotationMatrix(Kt);
    n.x = s;
    n.y = a;
    n.z = o;
    return this;
  }
  makePerspective(e, t, n, i, s, a) {
    const o = this.elements;
    const c = 2 * s / (t - e);
    const l = 2 * s / (n - i);
    const h = (t + e) / (t - e);
    const u = (n + i) / (n - i);
    const d = -(a + s) / (a - s);
    const f = -2 * a * s / (a - s);
    o[0] = c;
    o[4] = 0;
    o[8] = h;
    o[12] = 0;
    o[1] = 0;
    o[5] = l;
    o[9] = u;
    o[13] = 0;
    o[2] = 0;
    o[6] = 0;
    o[10] = d;
    o[14] = f;
    o[3] = 0;
    o[7] = 0;
    o[11] = -1;
    o[15] = 0;
    return this;
  }
  makeOrthographic(e, t, n, i, s, a) {
    const o = this.elements;
    const c = 1 / (t - e);
    const l = 1 / (n - i);
    const h = 1 / (a - s);
    const u = (t + e) * c;
    const d = (n + i) * l;
    const f = (a + s) * h;
    o[0] = 2 * c;
    o[4] = 0;
    o[8] = 0;
    o[12] = -u;
    o[1] = 0;
    o[5] = 2 * l;
    o[9] = 0;
    o[13] = -d;
    o[2] = 0;
    o[6] = 0;
    o[10] = -2 * h;
    o[14] = -f;
    o[3] = 0;
    o[7] = 0;
    o[11] = 0;
    o[15] = 1;
    return this;
  }
  equals(e) {
    const t = this.elements;
    const n = e.elements;
    for (let i = 0; i < 16; i++) {
      if (t[i] !== n[i])
        return false;
    }
    return true;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 16; n++) {
      this.elements[n] = e[n + t];
    }
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    e[t] = n[0];
    e[t + 1] = n[1];
    e[t + 2] = n[2];
    e[t + 3] = n[3];
    e[t + 4] = n[4];
    e[t + 5] = n[5];
    e[t + 6] = n[6];
    e[t + 7] = n[7];
    e[t + 8] = n[8];
    e[t + 9] = n[9];
    e[t + 10] = n[10];
    e[t + 11] = n[11];
    e[t + 12] = n[12];
    e[t + 13] = n[13];
    e[t + 14] = n[14];
    e[t + 15] = n[15];
    return e;
  }
};
var Fi = new w();
var Kt = new Ne();
var Hp = new w(0, 0, 0);
var Gp = new w(1, 1, 1);
var Fn = new w();
var kr = new w();
var Dt = new w();
var Zh = new Ne();
var Jh = new Tt();
var js = class r {
  constructor(e = 0, t = 0, n = 0, i = r.DEFAULT_ORDER) {
    this.isEuler = true;
    this._x = e;
    this._y = t;
    this._z = n;
    this._order = i;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e;
    this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e;
    this._onChangeCallback();
  }
  set(e, t, n, i = this._order) {
    this._x = e;
    this._y = t;
    this._z = n;
    this._order = i;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    this._x = e._x;
    this._y = e._y;
    this._z = e._z;
    this._order = e._order;
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(e, t = this._order, n = true) {
    const i = e.elements;
    const s = i[0], a = i[4], o = i[8];
    const c = i[1], l = i[5], h = i[9];
    const u = i[2], d = i[6], f = i[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(st(o, -1, 1));
        if (Math.abs(o) < 0.9999999) {
          this._x = Math.atan2(-h, f);
          this._z = Math.atan2(-a, s);
        } else {
          this._x = Math.atan2(d, l);
          this._z = 0;
        }
        break;
      case "YXZ":
        this._x = Math.asin(-st(h, -1, 1));
        if (Math.abs(h) < 0.9999999) {
          this._y = Math.atan2(o, f);
          this._z = Math.atan2(c, l);
        } else {
          this._y = Math.atan2(-u, s);
          this._z = 0;
        }
        break;
      case "ZXY":
        this._x = Math.asin(st(d, -1, 1));
        if (Math.abs(d) < 0.9999999) {
          this._y = Math.atan2(-u, f);
          this._z = Math.atan2(-a, l);
        } else {
          this._y = 0;
          this._z = Math.atan2(c, s);
        }
        break;
      case "ZYX":
        this._y = Math.asin(-st(u, -1, 1));
        if (Math.abs(u) < 0.9999999) {
          this._x = Math.atan2(d, f);
          this._z = Math.atan2(c, s);
        } else {
          this._x = 0;
          this._z = Math.atan2(-a, l);
        }
        break;
      case "YZX":
        this._z = Math.asin(st(c, -1, 1));
        if (Math.abs(c) < 0.9999999) {
          this._x = Math.atan2(-h, l);
          this._y = Math.atan2(-u, s);
        } else {
          this._x = 0;
          this._y = Math.atan2(o, f);
        }
        break;
      case "XZY":
        this._z = Math.asin(-st(a, -1, 1));
        if (Math.abs(a) < 0.9999999) {
          this._x = Math.atan2(d, l);
          this._y = Math.atan2(o, s);
        } else {
          this._x = Math.atan2(-h, f);
          this._y = 0;
        }
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    this._order = t;
    if (n === true)
      this._onChangeCallback();
    return this;
  }
  setFromQuaternion(e, t, n) {
    Zh.makeRotationFromQuaternion(e);
    return this.setFromRotationMatrix(Zh, t, n);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    Jh.setFromEuler(this);
    return this.setFromQuaternion(Jh, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    this._x = e[0];
    this._y = e[1];
    this._z = e[2];
    if (e[3] !== void 0)
      this._order = e[3];
    this._onChangeCallback();
    return this;
  }
  toArray(e = [], t = 0) {
    e[t] = this._x;
    e[t + 1] = this._y;
    e[t + 2] = this._z;
    e[t + 3] = this._order;
    return e;
  }
  _onChange(e) {
    this._onChangeCallback = e;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._order;
  }
};
js.DEFAULT_ORDER = "XYZ";
var os = class {
  constructor() {
    this.mask = 1 | 0;
  }
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  enableAll() {
    this.mask = 4294967295 | 0;
  }
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
};
var Wp = 0;
var $h = new w();
var Oi = new Tt();
var xn = new Ne();
var Vr = new w();
var Ts = new w();
var Xp = new w();
var qp = new Tt();
var Kh = new w(1, 0, 0);
var jh = new w(0, 1, 0);
var Qh = new w(0, 0, 1);
var Yp = { type: "added" };
var eu = { type: "removed" };
var Ze = class r extends nn {
  constructor() {
    super();
    this.isObject3D = true;
    Object.defineProperty(this, "id", { value: Wp++ });
    this.uuid = Bt();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = r.DEFAULT_UP.clone();
    const e = new w();
    const t = new js();
    const n = new Tt();
    const i = new w(1, 1, 1);
    function s() {
      n.setFromEuler(t, false);
    }
    function a() {
      t.setFromQuaternion(n, void 0, false);
    }
    t._onChange(s);
    n._onChange(a);
    Object.defineProperties(this, {
      position: {
        configurable: true,
        enumerable: true,
        value: e
      },
      rotation: {
        configurable: true,
        enumerable: true,
        value: t
      },
      quaternion: {
        configurable: true,
        enumerable: true,
        value: n
      },
      scale: {
        configurable: true,
        enumerable: true,
        value: i
      },
      modelViewMatrix: {
        value: new Ne()
      },
      normalMatrix: {
        value: new Ge()
      }
    });
    this.matrix = new Ne();
    this.matrixWorld = new Ne();
    this.matrixAutoUpdate = r.DEFAULT_MATRIX_AUTO_UPDATE;
    this.matrixWorldNeedsUpdate = false;
    this.matrixWorldAutoUpdate = r.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
    this.layers = new os();
    this.visible = true;
    this.castShadow = false;
    this.receiveShadow = false;
    this.frustumCulled = true;
    this.renderOrder = 0;
    this.animations = [];
    this.userData = {};
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(e) {
    if (this.matrixAutoUpdate)
      this.updateMatrix();
    this.matrix.premultiply(e);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    this.quaternion.premultiply(e);
    return this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, true);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    Oi.setFromAxisAngle(e, t);
    this.quaternion.multiply(Oi);
    return this;
  }
  rotateOnWorldAxis(e, t) {
    Oi.setFromAxisAngle(e, t);
    this.quaternion.premultiply(Oi);
    return this;
  }
  rotateX(e) {
    return this.rotateOnAxis(Kh, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(jh, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(Qh, e);
  }
  translateOnAxis(e, t) {
    $h.copy(e).applyQuaternion(this.quaternion);
    this.position.add($h.multiplyScalar(t));
    return this;
  }
  translateX(e) {
    return this.translateOnAxis(Kh, e);
  }
  translateY(e) {
    return this.translateOnAxis(jh, e);
  }
  translateZ(e) {
    return this.translateOnAxis(Qh, e);
  }
  localToWorld(e) {
    this.updateWorldMatrix(true, false);
    return e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    this.updateWorldMatrix(true, false);
    return e.applyMatrix4(xn.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, n) {
    if (e.isVector3) {
      Vr.copy(e);
    } else {
      Vr.set(e, t, n);
    }
    const i = this.parent;
    this.updateWorldMatrix(true, false);
    Ts.setFromMatrixPosition(this.matrixWorld);
    if (this.isCamera || this.isLight) {
      xn.lookAt(Ts, Vr, this.up);
    } else {
      xn.lookAt(Vr, Ts, this.up);
    }
    this.quaternion.setFromRotationMatrix(xn);
    if (i) {
      xn.extractRotation(i.matrixWorld);
      Oi.setFromRotationMatrix(xn);
      this.quaternion.premultiply(Oi.invert());
    }
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++) {
        this.add(arguments[t]);
      }
      return this;
    }
    if (e === this) {
      console.error("THREE.Object3D.add: object can't be added as a child of itself.", e);
      return this;
    }
    if (e && e.isObject3D) {
      if (e.parent !== null) {
        e.parent.remove(e);
      }
      e.parent = this;
      this.children.push(e);
      e.dispatchEvent(Yp);
    } else {
      console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e);
    }
    return this;
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++) {
        this.remove(arguments[n]);
      }
      return this;
    }
    const t = this.children.indexOf(e);
    if (t !== -1) {
      e.parent = null;
      this.children.splice(t, 1);
      e.dispatchEvent(eu);
    }
    return this;
  }
  removeFromParent() {
    const e = this.parent;
    if (e !== null) {
      e.remove(this);
    }
    return this;
  }
  clear() {
    for (let e = 0; e < this.children.length; e++) {
      const t = this.children[e];
      t.parent = null;
      t.dispatchEvent(eu);
    }
    this.children.length = 0;
    return this;
  }
  attach(e) {
    this.updateWorldMatrix(true, false);
    xn.copy(this.matrixWorld).invert();
    if (e.parent !== null) {
      e.parent.updateWorldMatrix(true, false);
      xn.multiply(e.parent.matrixWorld);
    }
    e.applyMatrix4(xn);
    this.add(e);
    e.updateWorldMatrix(false, true);
    return this;
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t)
      return this;
    for (let n = 0, i = this.children.length; n < i; n++) {
      const s = this.children[n];
      const a = s.getObjectByProperty(e, t);
      if (a !== void 0) {
        return a;
      }
    }
    return void 0;
  }
  getObjectsByProperty(e, t) {
    let n = [];
    if (this[e] === t)
      n.push(this);
    for (let i = 0, s = this.children.length; i < s; i++) {
      const a = this.children[i].getObjectsByProperty(e, t);
      if (a.length > 0) {
        n = n.concat(a);
      }
    }
    return n;
  }
  getWorldPosition(e) {
    this.updateWorldMatrix(true, false);
    return e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(Ts, e, Xp);
    return e;
  }
  getWorldScale(e) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(Ts, qp, e);
    return e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(true, false);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {
  }
  traverse(e) {
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++) {
      t[n].traverse(e);
    }
  }
  traverseVisible(e) {
    if (this.visible === false)
      return;
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++) {
      t[n].traverseVisible(e);
    }
  }
  traverseAncestors(e) {
    const t = this.parent;
    if (t !== null) {
      e(t);
      t.traverseAncestors(e);
    }
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = true;
  }
  updateMatrixWorld(e) {
    if (this.matrixAutoUpdate)
      this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || e) {
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
      this.matrixWorldNeedsUpdate = false;
      e = true;
    }
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++) {
      const s = t[n];
      if (s.matrixWorldAutoUpdate === true || e === true) {
        s.updateMatrixWorld(e);
      }
    }
  }
  updateWorldMatrix(e, t) {
    const n = this.parent;
    if (e === true && n !== null && n.matrixWorldAutoUpdate === true) {
      n.updateWorldMatrix(true, false);
    }
    if (this.matrixAutoUpdate)
      this.updateMatrix();
    if (this.parent === null) {
      this.matrixWorld.copy(this.matrix);
    } else {
      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
    }
    if (t === true) {
      const i = this.children;
      for (let s = 0, a = i.length; s < a; s++) {
        const o = i[s];
        if (o.matrixWorldAutoUpdate === true) {
          o.updateWorldMatrix(false, true);
        }
      }
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e === "string";
    const n = {};
    if (t) {
      e = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {},
        skeletons: {},
        animations: {},
        nodes: {}
      };
      n.metadata = {
        version: 4.5,
        type: "Object",
        generator: "Object3D.toJSON"
      };
    }
    const i = {};
    i.uuid = this.uuid;
    i.type = this.type;
    if (this.name !== "")
      i.name = this.name;
    if (this.castShadow === true)
      i.castShadow = true;
    if (this.receiveShadow === true)
      i.receiveShadow = true;
    if (this.visible === false)
      i.visible = false;
    if (this.frustumCulled === false)
      i.frustumCulled = false;
    if (this.renderOrder !== 0)
      i.renderOrder = this.renderOrder;
    if (Object.keys(this.userData).length > 0)
      i.userData = this.userData;
    i.layers = this.layers.mask;
    i.matrix = this.matrix.toArray();
    i.up = this.up.toArray();
    if (this.matrixAutoUpdate === false)
      i.matrixAutoUpdate = false;
    if (this.isInstancedMesh) {
      i.type = "InstancedMesh";
      i.count = this.count;
      i.instanceMatrix = this.instanceMatrix.toJSON();
      if (this.instanceColor !== null)
        i.instanceColor = this.instanceColor.toJSON();
    }
    function s(o, c) {
      if (o[c.uuid] === void 0) {
        o[c.uuid] = c.toJSON(e);
      }
      return c.uuid;
    }
    if (this.isScene) {
      if (this.background) {
        if (this.background.isColor) {
          i.background = this.background.toJSON();
        } else if (this.background.isTexture) {
          i.background = this.background.toJSON(e).uuid;
        }
      }
      if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
        i.environment = this.environment.toJSON(e).uuid;
      }
    } else if (this.isMesh || this.isLine || this.isPoints) {
      i.geometry = s(e.geometries, this.geometry);
      const o = this.geometry.parameters;
      if (o !== void 0 && o.shapes !== void 0) {
        const c = o.shapes;
        if (Array.isArray(c)) {
          for (let l = 0, h = c.length; l < h; l++) {
            const u = c[l];
            s(e.shapes, u);
          }
        } else {
          s(e.shapes, c);
        }
      }
    }
    if (this.isSkinnedMesh) {
      i.bindMode = this.bindMode;
      i.bindMatrix = this.bindMatrix.toArray();
      if (this.skeleton !== void 0) {
        s(e.skeletons, this.skeleton);
        i.skeleton = this.skeleton.uuid;
      }
    }
    if (this.material !== void 0) {
      if (Array.isArray(this.material)) {
        const o = [];
        for (let c = 0, l = this.material.length; c < l; c++) {
          o.push(s(e.materials, this.material[c]));
        }
        i.material = o;
      } else {
        i.material = s(e.materials, this.material);
      }
    }
    if (this.children.length > 0) {
      i.children = [];
      for (let o = 0; o < this.children.length; o++) {
        i.children.push(this.children[o].toJSON(e).object);
      }
    }
    if (this.animations.length > 0) {
      i.animations = [];
      for (let o = 0; o < this.animations.length; o++) {
        const c = this.animations[o];
        i.animations.push(s(e.animations, c));
      }
    }
    if (t) {
      const o = a(e.geometries);
      const c = a(e.materials);
      const l = a(e.textures);
      const h = a(e.images);
      const u = a(e.shapes);
      const d = a(e.skeletons);
      const f = a(e.animations);
      const m = a(e.nodes);
      if (o.length > 0)
        n.geometries = o;
      if (c.length > 0)
        n.materials = c;
      if (l.length > 0)
        n.textures = l;
      if (h.length > 0)
        n.images = h;
      if (u.length > 0)
        n.shapes = u;
      if (d.length > 0)
        n.skeletons = d;
      if (f.length > 0)
        n.animations = f;
      if (m.length > 0)
        n.nodes = m;
    }
    n.object = i;
    return n;
    function a(o) {
      const c = [];
      for (const l in o) {
        const h = o[l];
        delete h.metadata;
        c.push(h);
      }
      return c;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = true) {
    this.name = e.name;
    this.up.copy(e.up);
    this.position.copy(e.position);
    this.rotation.order = e.rotation.order;
    this.quaternion.copy(e.quaternion);
    this.scale.copy(e.scale);
    this.matrix.copy(e.matrix);
    this.matrixWorld.copy(e.matrixWorld);
    this.matrixAutoUpdate = e.matrixAutoUpdate;
    this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate;
    this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate;
    this.layers.mask = e.layers.mask;
    this.visible = e.visible;
    this.castShadow = e.castShadow;
    this.receiveShadow = e.receiveShadow;
    this.frustumCulled = e.frustumCulled;
    this.renderOrder = e.renderOrder;
    this.animations = e.animations;
    this.userData = JSON.parse(JSON.stringify(e.userData));
    if (t === true) {
      for (let n = 0; n < e.children.length; n++) {
        const i = e.children[n];
        this.add(i.clone());
      }
    }
    return this;
  }
};
Ze.DEFAULT_UP = new w(0, 1, 0);
Ze.DEFAULT_MATRIX_AUTO_UPDATE = true;
Ze.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
var jt = new w();
var vn = new w();
var Yo = new w();
var yn = new w();
var Bi = new w();
var zi = new w();
var tu = new w();
var Zo = new w();
var Jo = new w();
var $o = new w();
var Hr = false;
var Tn = class r {
  constructor(e = new w(), t = new w(), n = new w()) {
    this.a = e;
    this.b = t;
    this.c = n;
  }
  static getNormal(e, t, n, i) {
    i.subVectors(n, t);
    jt.subVectors(e, t);
    i.cross(jt);
    const s = i.lengthSq();
    if (s > 0) {
      return i.multiplyScalar(1 / Math.sqrt(s));
    }
    return i.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(e, t, n, i, s) {
    jt.subVectors(i, t);
    vn.subVectors(n, t);
    Yo.subVectors(e, t);
    const a = jt.dot(jt);
    const o = jt.dot(vn);
    const c = jt.dot(Yo);
    const l = vn.dot(vn);
    const h = vn.dot(Yo);
    const u = a * l - o * o;
    if (u === 0) {
      return s.set(-2, -1, -1);
    }
    const d = 1 / u;
    const f = (l * c - o * h) * d;
    const m = (a * h - o * c) * d;
    return s.set(1 - f - m, m, f);
  }
  static containsPoint(e, t, n, i) {
    this.getBarycoord(e, t, n, i, yn);
    return yn.x >= 0 && yn.y >= 0 && yn.x + yn.y <= 1;
  }
  static getUV(e, t, n, i, s, a, o, c) {
    if (Hr === false) {
      console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
      Hr = true;
    }
    return this.getInterpolation(e, t, n, i, s, a, o, c);
  }
  static getInterpolation(e, t, n, i, s, a, o, c) {
    this.getBarycoord(e, t, n, i, yn);
    c.setScalar(0);
    c.addScaledVector(s, yn.x);
    c.addScaledVector(a, yn.y);
    c.addScaledVector(o, yn.z);
    return c;
  }
  static isFrontFacing(e, t, n, i) {
    jt.subVectors(n, t);
    vn.subVectors(e, t);
    return jt.cross(vn).dot(i) < 0 ? true : false;
  }
  set(e, t, n) {
    this.a.copy(e);
    this.b.copy(t);
    this.c.copy(n);
    return this;
  }
  setFromPointsAndIndices(e, t, n, i) {
    this.a.copy(e[t]);
    this.b.copy(e[n]);
    this.c.copy(e[i]);
    return this;
  }
  setFromAttributeAndIndices(e, t, n, i) {
    this.a.fromBufferAttribute(e, t);
    this.b.fromBufferAttribute(e, n);
    this.c.fromBufferAttribute(e, i);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.a.copy(e.a);
    this.b.copy(e.b);
    this.c.copy(e.c);
    return this;
  }
  getArea() {
    jt.subVectors(this.c, this.b);
    vn.subVectors(this.a, this.b);
    return jt.cross(vn).length() * 0.5;
  }
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return r.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return r.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getUV(e, t, n, i, s) {
    if (Hr === false) {
      console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
      Hr = true;
    }
    return r.getInterpolation(e, this.a, this.b, this.c, t, n, i, s);
  }
  getInterpolation(e, t, n, i, s) {
    return r.getInterpolation(e, this.a, this.b, this.c, t, n, i, s);
  }
  containsPoint(e) {
    return r.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return r.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const n = this.a, i = this.b, s = this.c;
    let a, o;
    Bi.subVectors(i, n);
    zi.subVectors(s, n);
    Zo.subVectors(e, n);
    const c = Bi.dot(Zo);
    const l = zi.dot(Zo);
    if (c <= 0 && l <= 0) {
      return t.copy(n);
    }
    Jo.subVectors(e, i);
    const h = Bi.dot(Jo);
    const u = zi.dot(Jo);
    if (h >= 0 && u <= h) {
      return t.copy(i);
    }
    const d = c * u - h * l;
    if (d <= 0 && c >= 0 && h <= 0) {
      a = c / (c - h);
      return t.copy(n).addScaledVector(Bi, a);
    }
    $o.subVectors(e, s);
    const f = Bi.dot($o);
    const m = zi.dot($o);
    if (m >= 0 && f <= m) {
      return t.copy(s);
    }
    const _ = f * l - c * m;
    if (_ <= 0 && l >= 0 && m <= 0) {
      o = l / (l - m);
      return t.copy(n).addScaledVector(zi, o);
    }
    const g = h * m - f * u;
    if (g <= 0 && u - h >= 0 && f - m >= 0) {
      tu.subVectors(s, i);
      o = (u - h) / (u - h + (f - m));
      return t.copy(i).addScaledVector(tu, o);
    }
    const p = 1 / (g + _ + d);
    a = _ * p;
    o = d * p;
    return t.copy(n).addScaledVector(Bi, a).addScaledVector(zi, o);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
};
var Zp = 0;
var vt = class extends nn {
  constructor() {
    super();
    this.isMaterial = true;
    Object.defineProperty(this, "id", { value: Zp++ });
    this.uuid = Bt();
    this.name = "";
    this.type = "Material";
    this.blending = mi;
    this.side = Rn;
    this.vertexColors = false;
    this.opacity = 1;
    this.transparent = false;
    this.blendSrc = Ah;
    this.blendDst = Rh;
    this.blendEquation = hi;
    this.blendSrcAlpha = null;
    this.blendDstAlpha = null;
    this.blendEquationAlpha = null;
    this.depthFunc = Pa;
    this.depthTest = true;
    this.depthWrite = true;
    this.stencilWriteMask = 255;
    this.stencilFunc = ff;
    this.stencilRef = 0;
    this.stencilFuncMask = 255;
    this.stencilFail = Ca;
    this.stencilZFail = Ca;
    this.stencilZPass = Ca;
    this.stencilWrite = false;
    this.clippingPlanes = null;
    this.clipIntersection = false;
    this.clipShadows = false;
    this.shadowSide = null;
    this.colorWrite = true;
    this.precision = null;
    this.polygonOffset = false;
    this.polygonOffsetFactor = 0;
    this.polygonOffsetUnits = 0;
    this.dithering = false;
    this.alphaToCoverage = false;
    this.premultipliedAlpha = false;
    this.forceSinglePass = false;
    this.visible = true;
    this.toneMapped = true;
    this.userData = {};
    this.version = 0;
    this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    if (this._alphaTest > 0 !== e > 0) {
      this.version++;
    }
    this._alphaTest = e;
  }
  onBuild() {
  }
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e === void 0)
      return;
    for (const t in e) {
      const n = e[t];
      if (n === void 0) {
        console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
        continue;
      }
      const i = this[t];
      if (i === void 0) {
        console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
        continue;
      }
      if (i && i.isColor) {
        i.set(n);
      } else if (i && i.isVector3 && (n && n.isVector3)) {
        i.copy(n);
      } else {
        this[t] = n;
      }
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e === "string";
    if (t) {
      e = {
        textures: {},
        images: {}
      };
    }
    const n = {
      metadata: {
        version: 4.5,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    n.uuid = this.uuid;
    n.type = this.type;
    if (this.name !== "")
      n.name = this.name;
    if (this.color && this.color.isColor)
      n.color = this.color.getHex();
    if (this.roughness !== void 0)
      n.roughness = this.roughness;
    if (this.metalness !== void 0)
      n.metalness = this.metalness;
    if (this.sheen !== void 0)
      n.sheen = this.sheen;
    if (this.sheenColor && this.sheenColor.isColor)
      n.sheenColor = this.sheenColor.getHex();
    if (this.sheenRoughness !== void 0)
      n.sheenRoughness = this.sheenRoughness;
    if (this.emissive && this.emissive.isColor)
      n.emissive = this.emissive.getHex();
    if (this.emissiveIntensity && this.emissiveIntensity !== 1)
      n.emissiveIntensity = this.emissiveIntensity;
    if (this.specular && this.specular.isColor)
      n.specular = this.specular.getHex();
    if (this.specularIntensity !== void 0)
      n.specularIntensity = this.specularIntensity;
    if (this.specularColor && this.specularColor.isColor)
      n.specularColor = this.specularColor.getHex();
    if (this.shininess !== void 0)
      n.shininess = this.shininess;
    if (this.clearcoat !== void 0)
      n.clearcoat = this.clearcoat;
    if (this.clearcoatRoughness !== void 0)
      n.clearcoatRoughness = this.clearcoatRoughness;
    if (this.clearcoatMap && this.clearcoatMap.isTexture) {
      n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid;
    }
    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
      n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid;
    }
    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
      n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid;
      n.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
    }
    if (this.iridescence !== void 0)
      n.iridescence = this.iridescence;
    if (this.iridescenceIOR !== void 0)
      n.iridescenceIOR = this.iridescenceIOR;
    if (this.iridescenceThicknessRange !== void 0)
      n.iridescenceThicknessRange = this.iridescenceThicknessRange;
    if (this.iridescenceMap && this.iridescenceMap.isTexture) {
      n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid;
    }
    if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
      n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid;
    }
    if (this.map && this.map.isTexture)
      n.map = this.map.toJSON(e).uuid;
    if (this.matcap && this.matcap.isTexture)
      n.matcap = this.matcap.toJSON(e).uuid;
    if (this.alphaMap && this.alphaMap.isTexture)
      n.alphaMap = this.alphaMap.toJSON(e).uuid;
    if (this.lightMap && this.lightMap.isTexture) {
      n.lightMap = this.lightMap.toJSON(e).uuid;
      n.lightMapIntensity = this.lightMapIntensity;
    }
    if (this.aoMap && this.aoMap.isTexture) {
      n.aoMap = this.aoMap.toJSON(e).uuid;
      n.aoMapIntensity = this.aoMapIntensity;
    }
    if (this.bumpMap && this.bumpMap.isTexture) {
      n.bumpMap = this.bumpMap.toJSON(e).uuid;
      n.bumpScale = this.bumpScale;
    }
    if (this.normalMap && this.normalMap.isTexture) {
      n.normalMap = this.normalMap.toJSON(e).uuid;
      n.normalMapType = this.normalMapType;
      n.normalScale = this.normalScale.toArray();
    }
    if (this.displacementMap && this.displacementMap.isTexture) {
      n.displacementMap = this.displacementMap.toJSON(e).uuid;
      n.displacementScale = this.displacementScale;
      n.displacementBias = this.displacementBias;
    }
    if (this.roughnessMap && this.roughnessMap.isTexture)
      n.roughnessMap = this.roughnessMap.toJSON(e).uuid;
    if (this.metalnessMap && this.metalnessMap.isTexture)
      n.metalnessMap = this.metalnessMap.toJSON(e).uuid;
    if (this.emissiveMap && this.emissiveMap.isTexture)
      n.emissiveMap = this.emissiveMap.toJSON(e).uuid;
    if (this.specularMap && this.specularMap.isTexture)
      n.specularMap = this.specularMap.toJSON(e).uuid;
    if (this.specularIntensityMap && this.specularIntensityMap.isTexture)
      n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid;
    if (this.specularColorMap && this.specularColorMap.isTexture)
      n.specularColorMap = this.specularColorMap.toJSON(e).uuid;
    if (this.envMap && this.envMap.isTexture) {
      n.envMap = this.envMap.toJSON(e).uuid;
      if (this.combine !== void 0)
        n.combine = this.combine;
    }
    if (this.envMapIntensity !== void 0)
      n.envMapIntensity = this.envMapIntensity;
    if (this.reflectivity !== void 0)
      n.reflectivity = this.reflectivity;
    if (this.refractionRatio !== void 0)
      n.refractionRatio = this.refractionRatio;
    if (this.gradientMap && this.gradientMap.isTexture) {
      n.gradientMap = this.gradientMap.toJSON(e).uuid;
    }
    if (this.transmission !== void 0)
      n.transmission = this.transmission;
    if (this.transmissionMap && this.transmissionMap.isTexture)
      n.transmissionMap = this.transmissionMap.toJSON(e).uuid;
    if (this.thickness !== void 0)
      n.thickness = this.thickness;
    if (this.thicknessMap && this.thicknessMap.isTexture)
      n.thicknessMap = this.thicknessMap.toJSON(e).uuid;
    if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity)
      n.attenuationDistance = this.attenuationDistance;
    if (this.attenuationColor !== void 0)
      n.attenuationColor = this.attenuationColor.getHex();
    if (this.size !== void 0)
      n.size = this.size;
    if (this.shadowSide !== null)
      n.shadowSide = this.shadowSide;
    if (this.sizeAttenuation !== void 0)
      n.sizeAttenuation = this.sizeAttenuation;
    if (this.blending !== mi)
      n.blending = this.blending;
    if (this.side !== Rn)
      n.side = this.side;
    if (this.vertexColors)
      n.vertexColors = true;
    if (this.opacity < 1)
      n.opacity = this.opacity;
    if (this.transparent === true)
      n.transparent = this.transparent;
    n.depthFunc = this.depthFunc;
    n.depthTest = this.depthTest;
    n.depthWrite = this.depthWrite;
    n.colorWrite = this.colorWrite;
    n.stencilWrite = this.stencilWrite;
    n.stencilWriteMask = this.stencilWriteMask;
    n.stencilFunc = this.stencilFunc;
    n.stencilRef = this.stencilRef;
    n.stencilFuncMask = this.stencilFuncMask;
    n.stencilFail = this.stencilFail;
    n.stencilZFail = this.stencilZFail;
    n.stencilZPass = this.stencilZPass;
    if (this.rotation !== void 0 && this.rotation !== 0)
      n.rotation = this.rotation;
    if (this.polygonOffset === true)
      n.polygonOffset = true;
    if (this.polygonOffsetFactor !== 0)
      n.polygonOffsetFactor = this.polygonOffsetFactor;
    if (this.polygonOffsetUnits !== 0)
      n.polygonOffsetUnits = this.polygonOffsetUnits;
    if (this.linewidth !== void 0 && this.linewidth !== 1)
      n.linewidth = this.linewidth;
    if (this.dashSize !== void 0)
      n.dashSize = this.dashSize;
    if (this.gapSize !== void 0)
      n.gapSize = this.gapSize;
    if (this.scale !== void 0)
      n.scale = this.scale;
    if (this.dithering === true)
      n.dithering = true;
    if (this.alphaTest > 0)
      n.alphaTest = this.alphaTest;
    if (this.alphaToCoverage === true)
      n.alphaToCoverage = this.alphaToCoverage;
    if (this.premultipliedAlpha === true)
      n.premultipliedAlpha = this.premultipliedAlpha;
    if (this.forceSinglePass === true)
      n.forceSinglePass = this.forceSinglePass;
    if (this.wireframe === true)
      n.wireframe = this.wireframe;
    if (this.wireframeLinewidth > 1)
      n.wireframeLinewidth = this.wireframeLinewidth;
    if (this.wireframeLinecap !== "round")
      n.wireframeLinecap = this.wireframeLinecap;
    if (this.wireframeLinejoin !== "round")
      n.wireframeLinejoin = this.wireframeLinejoin;
    if (this.flatShading === true)
      n.flatShading = this.flatShading;
    if (this.visible === false)
      n.visible = false;
    if (this.toneMapped === false)
      n.toneMapped = false;
    if (this.fog === false)
      n.fog = false;
    if (Object.keys(this.userData).length > 0)
      n.userData = this.userData;
    function i(s) {
      const a = [];
      for (const o in s) {
        const c = s[o];
        delete c.metadata;
        a.push(c);
      }
      return a;
    }
    if (t) {
      const s = i(e.textures);
      const a = i(e.images);
      if (s.length > 0)
        n.textures = s;
      if (a.length > 0)
        n.images = a;
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name;
    this.blending = e.blending;
    this.side = e.side;
    this.vertexColors = e.vertexColors;
    this.opacity = e.opacity;
    this.transparent = e.transparent;
    this.blendSrc = e.blendSrc;
    this.blendDst = e.blendDst;
    this.blendEquation = e.blendEquation;
    this.blendSrcAlpha = e.blendSrcAlpha;
    this.blendDstAlpha = e.blendDstAlpha;
    this.blendEquationAlpha = e.blendEquationAlpha;
    this.depthFunc = e.depthFunc;
    this.depthTest = e.depthTest;
    this.depthWrite = e.depthWrite;
    this.stencilWriteMask = e.stencilWriteMask;
    this.stencilFunc = e.stencilFunc;
    this.stencilRef = e.stencilRef;
    this.stencilFuncMask = e.stencilFuncMask;
    this.stencilFail = e.stencilFail;
    this.stencilZFail = e.stencilZFail;
    this.stencilZPass = e.stencilZPass;
    this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let n = null;
    if (t !== null) {
      const i = t.length;
      n = new Array(i);
      for (let s = 0; s !== i; ++s) {
        n[s] = t[s].clone();
      }
    }
    this.clippingPlanes = n;
    this.clipIntersection = e.clipIntersection;
    this.clipShadows = e.clipShadows;
    this.shadowSide = e.shadowSide;
    this.colorWrite = e.colorWrite;
    this.precision = e.precision;
    this.polygonOffset = e.polygonOffset;
    this.polygonOffsetFactor = e.polygonOffsetFactor;
    this.polygonOffsetUnits = e.polygonOffsetUnits;
    this.dithering = e.dithering;
    this.alphaTest = e.alphaTest;
    this.alphaToCoverage = e.alphaToCoverage;
    this.premultipliedAlpha = e.premultipliedAlpha;
    this.forceSinglePass = e.forceSinglePass;
    this.visible = e.visible;
    this.toneMapped = e.toneMapped;
    this.userData = JSON.parse(JSON.stringify(e.userData));
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    if (e === true)
      this.version++;
  }
};
var _f = {
  "aliceblue": 15792383,
  "antiquewhite": 16444375,
  "aqua": 65535,
  "aquamarine": 8388564,
  "azure": 15794175,
  "beige": 16119260,
  "bisque": 16770244,
  "black": 0,
  "blanchedalmond": 16772045,
  "blue": 255,
  "blueviolet": 9055202,
  "brown": 10824234,
  "burlywood": 14596231,
  "cadetblue": 6266528,
  "chartreuse": 8388352,
  "chocolate": 13789470,
  "coral": 16744272,
  "cornflowerblue": 6591981,
  "cornsilk": 16775388,
  "crimson": 14423100,
  "cyan": 65535,
  "darkblue": 139,
  "darkcyan": 35723,
  "darkgoldenrod": 12092939,
  "darkgray": 11119017,
  "darkgreen": 25600,
  "darkgrey": 11119017,
  "darkkhaki": 12433259,
  "darkmagenta": 9109643,
  "darkolivegreen": 5597999,
  "darkorange": 16747520,
  "darkorchid": 10040012,
  "darkred": 9109504,
  "darksalmon": 15308410,
  "darkseagreen": 9419919,
  "darkslateblue": 4734347,
  "darkslategray": 3100495,
  "darkslategrey": 3100495,
  "darkturquoise": 52945,
  "darkviolet": 9699539,
  "deeppink": 16716947,
  "deepskyblue": 49151,
  "dimgray": 6908265,
  "dimgrey": 6908265,
  "dodgerblue": 2003199,
  "firebrick": 11674146,
  "floralwhite": 16775920,
  "forestgreen": 2263842,
  "fuchsia": 16711935,
  "gainsboro": 14474460,
  "ghostwhite": 16316671,
  "gold": 16766720,
  "goldenrod": 14329120,
  "gray": 8421504,
  "green": 32768,
  "greenyellow": 11403055,
  "grey": 8421504,
  "honeydew": 15794160,
  "hotpink": 16738740,
  "indianred": 13458524,
  "indigo": 4915330,
  "ivory": 16777200,
  "khaki": 15787660,
  "lavender": 15132410,
  "lavenderblush": 16773365,
  "lawngreen": 8190976,
  "lemonchiffon": 16775885,
  "lightblue": 11393254,
  "lightcoral": 15761536,
  "lightcyan": 14745599,
  "lightgoldenrodyellow": 16448210,
  "lightgray": 13882323,
  "lightgreen": 9498256,
  "lightgrey": 13882323,
  "lightpink": 16758465,
  "lightsalmon": 16752762,
  "lightseagreen": 2142890,
  "lightskyblue": 8900346,
  "lightslategray": 7833753,
  "lightslategrey": 7833753,
  "lightsteelblue": 11584734,
  "lightyellow": 16777184,
  "lime": 65280,
  "limegreen": 3329330,
  "linen": 16445670,
  "magenta": 16711935,
  "maroon": 8388608,
  "mediumaquamarine": 6737322,
  "mediumblue": 205,
  "mediumorchid": 12211667,
  "mediumpurple": 9662683,
  "mediumseagreen": 3978097,
  "mediumslateblue": 8087790,
  "mediumspringgreen": 64154,
  "mediumturquoise": 4772300,
  "mediumvioletred": 13047173,
  "midnightblue": 1644912,
  "mintcream": 16121850,
  "mistyrose": 16770273,
  "moccasin": 16770229,
  "navajowhite": 16768685,
  "navy": 128,
  "oldlace": 16643558,
  "olive": 8421376,
  "olivedrab": 7048739,
  "orange": 16753920,
  "orangered": 16729344,
  "orchid": 14315734,
  "palegoldenrod": 15657130,
  "palegreen": 10025880,
  "paleturquoise": 11529966,
  "palevioletred": 14381203,
  "papayawhip": 16773077,
  "peachpuff": 16767673,
  "peru": 13468991,
  "pink": 16761035,
  "plum": 14524637,
  "powderblue": 11591910,
  "purple": 8388736,
  "rebeccapurple": 6697881,
  "red": 16711680,
  "rosybrown": 12357519,
  "royalblue": 4286945,
  "saddlebrown": 9127187,
  "salmon": 16416882,
  "sandybrown": 16032864,
  "seagreen": 3050327,
  "seashell": 16774638,
  "sienna": 10506797,
  "silver": 12632256,
  "skyblue": 8900331,
  "slateblue": 6970061,
  "slategray": 7372944,
  "slategrey": 7372944,
  "snow": 16775930,
  "springgreen": 65407,
  "steelblue": 4620980,
  "tan": 13808780,
  "teal": 32896,
  "thistle": 14204888,
  "tomato": 16737095,
  "turquoise": 4251856,
  "violet": 15631086,
  "wheat": 16113331,
  "white": 16777215,
  "whitesmoke": 16119285,
  "yellow": 16776960,
  "yellowgreen": 10145074
};
var Qt = { h: 0, s: 0, l: 0 };
var Gr = { h: 0, s: 0, l: 0 };
function Ko(r, e, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return r + (e - r) * 6 * t;
  if (t < 1 / 2)
    return e;
  if (t < 2 / 3)
    return r + (e - r) * 6 * (2 / 3 - t);
  return r;
}
var de = class {
  constructor(e, t, n) {
    this.isColor = true;
    this.r = 1;
    this.g = 1;
    this.b = 1;
    if (t === void 0 && n === void 0) {
      return this.set(e);
    }
    return this.setRGB(e, t, n);
  }
  set(e) {
    if (e && e.isColor) {
      this.copy(e);
    } else if (typeof e === "number") {
      this.setHex(e);
    } else if (typeof e === "string") {
      this.setStyle(e);
    }
    return this;
  }
  setScalar(e) {
    this.r = e;
    this.g = e;
    this.b = e;
    return this;
  }
  setHex(e, t = De) {
    e = Math.floor(e);
    this.r = (e >> 16 & 255) / 255;
    this.g = (e >> 8 & 255) / 255;
    this.b = (e & 255) / 255;
    Wt.toWorkingColorSpace(this, t);
    return this;
  }
  setRGB(e, t, n, i = Wt.workingColorSpace) {
    this.r = e;
    this.g = t;
    this.b = n;
    Wt.toWorkingColorSpace(this, i);
    return this;
  }
  setHSL(e, t, n, i = Wt.workingColorSpace) {
    e = Dh(e, 1);
    t = st(t, 0, 1);
    n = st(n, 0, 1);
    if (t === 0) {
      this.r = this.g = this.b = n;
    } else {
      const s = n <= 0.5 ? n * (1 + t) : n + t - n * t;
      const a = 2 * n - s;
      this.r = Ko(a, s, e + 1 / 3);
      this.g = Ko(a, s, e);
      this.b = Ko(a, s, e - 1 / 3);
    }
    Wt.toWorkingColorSpace(this, i);
    return this;
  }
  setStyle(e, t = De) {
    function n(s) {
      if (s === void 0)
        return;
      if (parseFloat(s) < 1) {
        console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
      }
    }
    let i;
    if (i = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let s;
      const a = i[1];
      const o = i[2];
      switch (a) {
        case "rgb":
        case "rgba":
          if (s = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) {
            n(s[4]);
            return this.setRGB(
              Math.min(255, parseInt(s[1], 10)) / 255,
              Math.min(255, parseInt(s[2], 10)) / 255,
              Math.min(255, parseInt(s[3], 10)) / 255,
              t
            );
          }
          if (s = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) {
            n(s[4]);
            return this.setRGB(
              Math.min(100, parseInt(s[1], 10)) / 100,
              Math.min(100, parseInt(s[2], 10)) / 100,
              Math.min(100, parseInt(s[3], 10)) / 100,
              t
            );
          }
          break;
        case "hsl":
        case "hsla":
          if (s = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) {
            n(s[4]);
            return this.setHSL(
              parseFloat(s[1]) / 360,
              parseFloat(s[2]) / 100,
              parseFloat(s[3]) / 100,
              t
            );
          }
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (i = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const s = i[1];
      const a = s.length;
      if (a === 3) {
        return this.setRGB(
          parseInt(s.charAt(0), 16) / 15,
          parseInt(s.charAt(1), 16) / 15,
          parseInt(s.charAt(2), 16) / 15,
          t
        );
      } else if (a === 6) {
        return this.setHex(parseInt(s, 16), t);
      } else {
        console.warn("THREE.Color: Invalid hex color " + e);
      }
    } else if (e && e.length > 0) {
      return this.setColorName(e, t);
    }
    return this;
  }
  setColorName(e, t = De) {
    const n = _f[e.toLowerCase()];
    if (n !== void 0) {
      this.setHex(n, t);
    } else {
      console.warn("THREE.Color: Unknown color " + e);
    }
    return this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    this.r = e.r;
    this.g = e.g;
    this.b = e.b;
    return this;
  }
  copySRGBToLinear(e) {
    this.r = ns(e.r);
    this.g = ns(e.g);
    this.b = ns(e.b);
    return this;
  }
  copyLinearToSRGB(e) {
    this.r = zo(e.r);
    this.g = zo(e.g);
    this.b = zo(e.b);
    return this;
  }
  convertSRGBToLinear() {
    this.copySRGBToLinear(this);
    return this;
  }
  convertLinearToSRGB() {
    this.copyLinearToSRGB(this);
    return this;
  }
  getHex(e = De) {
    Wt.fromWorkingColorSpace(bt.copy(this), e);
    return Math.round(st(bt.r * 255, 0, 255)) * 65536 + Math.round(st(bt.g * 255, 0, 255)) * 256 + Math.round(st(bt.b * 255, 0, 255));
  }
  getHexString(e = De) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = Wt.workingColorSpace) {
    Wt.fromWorkingColorSpace(bt.copy(this), t);
    const n = bt.r, i = bt.g, s = bt.b;
    const a = Math.max(n, i, s);
    const o = Math.min(n, i, s);
    let c, l;
    const h = (o + a) / 2;
    if (o === a) {
      c = 0;
      l = 0;
    } else {
      const u = a - o;
      l = h <= 0.5 ? u / (a + o) : u / (2 - a - o);
      switch (a) {
        case n:
          c = (i - s) / u + (i < s ? 6 : 0);
          break;
        case i:
          c = (s - n) / u + 2;
          break;
        case s:
          c = (n - i) / u + 4;
          break;
      }
      c /= 6;
    }
    e.h = c;
    e.s = l;
    e.l = h;
    return e;
  }
  getRGB(e, t = Wt.workingColorSpace) {
    Wt.fromWorkingColorSpace(bt.copy(this), t);
    e.r = bt.r;
    e.g = bt.g;
    e.b = bt.b;
    return e;
  }
  getStyle(e = De) {
    Wt.fromWorkingColorSpace(bt.copy(this), e);
    const t = bt.r, n = bt.g, i = bt.b;
    if (e !== De) {
      return `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`;
    }
    return `rgb(${Math.round(t * 255)},${Math.round(n * 255)},${Math.round(i * 255)})`;
  }
  offsetHSL(e, t, n) {
    this.getHSL(Qt);
    Qt.h += e;
    Qt.s += t;
    Qt.l += n;
    this.setHSL(Qt.h, Qt.s, Qt.l);
    return this;
  }
  add(e) {
    this.r += e.r;
    this.g += e.g;
    this.b += e.b;
    return this;
  }
  addColors(e, t) {
    this.r = e.r + t.r;
    this.g = e.g + t.g;
    this.b = e.b + t.b;
    return this;
  }
  addScalar(e) {
    this.r += e;
    this.g += e;
    this.b += e;
    return this;
  }
  sub(e) {
    this.r = Math.max(0, this.r - e.r);
    this.g = Math.max(0, this.g - e.g);
    this.b = Math.max(0, this.b - e.b);
    return this;
  }
  multiply(e) {
    this.r *= e.r;
    this.g *= e.g;
    this.b *= e.b;
    return this;
  }
  multiplyScalar(e) {
    this.r *= e;
    this.g *= e;
    this.b *= e;
    return this;
  }
  lerp(e, t) {
    this.r += (e.r - this.r) * t;
    this.g += (e.g - this.g) * t;
    this.b += (e.b - this.b) * t;
    return this;
  }
  lerpColors(e, t, n) {
    this.r = e.r + (t.r - e.r) * n;
    this.g = e.g + (t.g - e.g) * n;
    this.b = e.b + (t.b - e.b) * n;
    return this;
  }
  lerpHSL(e, t) {
    this.getHSL(Qt);
    e.getHSL(Gr);
    const n = Fs(Qt.h, Gr.h, t);
    const i = Fs(Qt.s, Gr.s, t);
    const s = Fs(Qt.l, Gr.l, t);
    this.setHSL(n, i, s);
    return this;
  }
  setFromVector3(e) {
    this.r = e.x;
    this.g = e.y;
    this.b = e.z;
    return this;
  }
  applyMatrix3(e) {
    const t = this.r, n = this.g, i = this.b;
    const s = e.elements;
    this.r = s[0] * t + s[3] * n + s[6] * i;
    this.g = s[1] * t + s[4] * n + s[7] * i;
    this.b = s[2] * t + s[5] * n + s[8] * i;
    return this;
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    this.r = e[t];
    this.g = e[t + 1];
    this.b = e[t + 2];
    return this;
  }
  toArray(e = [], t = 0) {
    e[t] = this.r;
    e[t + 1] = this.g;
    e[t + 2] = this.b;
    return e;
  }
  fromBufferAttribute(e, t) {
    this.r = e.getX(t);
    this.g = e.getY(t);
    this.b = e.getZ(t);
    return this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r;
    yield this.g;
    yield this.b;
  }
};
var bt = new de();
de.NAMES = _f;
var dn = class extends vt {
  constructor(e) {
    super();
    this.isMeshBasicMaterial = true;
    this.type = "MeshBasicMaterial";
    this.color = new de(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.combine = Dr;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.color.copy(e.color);
    this.map = e.map;
    this.lightMap = e.lightMap;
    this.lightMapIntensity = e.lightMapIntensity;
    this.aoMap = e.aoMap;
    this.aoMapIntensity = e.aoMapIntensity;
    this.specularMap = e.specularMap;
    this.alphaMap = e.alphaMap;
    this.envMap = e.envMap;
    this.combine = e.combine;
    this.reflectivity = e.reflectivity;
    this.refractionRatio = e.refractionRatio;
    this.wireframe = e.wireframe;
    this.wireframeLinewidth = e.wireframeLinewidth;
    this.wireframeLinecap = e.wireframeLinecap;
    this.wireframeLinejoin = e.wireframeLinejoin;
    this.fog = e.fog;
    return this;
  }
};
var Sn = Jp();
function Jp() {
  const r = new ArrayBuffer(4);
  const e = new Float32Array(r);
  const t = new Uint32Array(r);
  const n = new Uint32Array(512);
  const i = new Uint32Array(512);
  for (let c = 0; c < 256; ++c) {
    const l = c - 127;
    if (l < -27) {
      n[c] = 0;
      n[c | 256] = 32768;
      i[c] = 24;
      i[c | 256] = 24;
    } else if (l < -14) {
      n[c] = 1024 >> -l - 14;
      n[c | 256] = 1024 >> -l - 14 | 32768;
      i[c] = -l - 1;
      i[c | 256] = -l - 1;
    } else if (l <= 15) {
      n[c] = l + 15 << 10;
      n[c | 256] = l + 15 << 10 | 32768;
      i[c] = 13;
      i[c | 256] = 13;
    } else if (l < 128) {
      n[c] = 31744;
      n[c | 256] = 64512;
      i[c] = 24;
      i[c | 256] = 24;
    } else {
      n[c] = 31744;
      n[c | 256] = 64512;
      i[c] = 13;
      i[c | 256] = 13;
    }
  }
  const s = new Uint32Array(2048);
  const a = new Uint32Array(64);
  const o = new Uint32Array(64);
  for (let c = 1; c < 1024; ++c) {
    let l = c << 13;
    let h = 0;
    while ((l & 8388608) === 0) {
      l <<= 1;
      h -= 8388608;
    }
    l &= ~8388608;
    h += 947912704;
    s[c] = l | h;
  }
  for (let c = 1024; c < 2048; ++c) {
    s[c] = 939524096 + (c - 1024 << 13);
  }
  for (let c = 1; c < 31; ++c) {
    a[c] = c << 23;
  }
  a[31] = 1199570944;
  a[32] = 2147483648;
  for (let c = 33; c < 63; ++c) {
    a[c] = 2147483648 + (c - 32 << 23);
  }
  a[63] = 3347054592;
  for (let c = 1; c < 64; ++c) {
    if (c !== 32) {
      o[c] = 1024;
    }
  }
  return {
    floatView: e,
    uint32View: t,
    baseTable: n,
    shiftTable: i,
    mantissaTable: s,
    exponentTable: a,
    offsetTable: o
  };
}
function It(r) {
  if (Math.abs(r) > 65504)
    console.warn("THREE.DataUtils.toHalfFloat(): Value out of range.");
  r = st(r, -65504, 65504);
  Sn.floatView[0] = r;
  const e = Sn.uint32View[0];
  const t = e >> 23 & 511;
  return Sn.baseTable[t] + ((e & 8388607) >> Sn.shiftTable[t]);
}
function Us(r) {
  const e = r >> 10;
  Sn.uint32View[0] = Sn.mantissaTable[Sn.offsetTable[e] + (r & 1023)] + Sn.exponentTable[e];
  return Sn.floatView[0];
}
var $p = {
  toHalfFloat: It,
  fromHalfFloat: Us
};
var ut = new w();
var Wr = new $();
var Ke = class {
  constructor(e, t, n = false) {
    if (Array.isArray(e)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.isBufferAttribute = true;
    this.name = "";
    this.array = e;
    this.itemSize = t;
    this.count = e !== void 0 ? e.length / t : 0;
    this.normalized = n;
    this.usage = Zs;
    this.updateRange = { offset: 0, count: -1 };
    this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    if (e === true)
      this.version++;
  }
  setUsage(e) {
    this.usage = e;
    return this;
  }
  copy(e) {
    this.name = e.name;
    this.array = new e.array.constructor(e.array);
    this.itemSize = e.itemSize;
    this.count = e.count;
    this.normalized = e.normalized;
    this.usage = e.usage;
    return this;
  }
  copyAt(e, t, n) {
    e *= this.itemSize;
    n *= t.itemSize;
    for (let i = 0, s = this.itemSize; i < s; i++) {
      this.array[e + i] = t.array[n + i];
    }
    return this;
  }
  copyArray(e) {
    this.array.set(e);
    return this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2) {
      for (let t = 0, n = this.count; t < n; t++) {
        Wr.fromBufferAttribute(this, t);
        Wr.applyMatrix3(e);
        this.setXY(t, Wr.x, Wr.y);
      }
    } else if (this.itemSize === 3) {
      for (let t = 0, n = this.count; t < n; t++) {
        ut.fromBufferAttribute(this, t);
        ut.applyMatrix3(e);
        this.setXYZ(t, ut.x, ut.y, ut.z);
      }
    }
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.count; t < n; t++) {
      ut.fromBufferAttribute(this, t);
      ut.applyMatrix4(e);
      this.setXYZ(t, ut.x, ut.y, ut.z);
    }
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++) {
      ut.fromBufferAttribute(this, t);
      ut.applyNormalMatrix(e);
      this.setXYZ(t, ut.x, ut.y, ut.z);
    }
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++) {
      ut.fromBufferAttribute(this, t);
      ut.transformDirection(e);
      this.setXYZ(t, ut.x, ut.y, ut.z);
    }
    return this;
  }
  set(e, t = 0) {
    this.array.set(e, t);
    return this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  setX(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.array[e * this.itemSize] = t;
    return this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  setY(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.array[e * this.itemSize + 1] = t;
    return this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  setZ(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.array[e * this.itemSize + 2] = t;
    return this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  setW(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.array[e * this.itemSize + 3] = t;
    return this;
  }
  setXY(e, t, n) {
    e *= this.itemSize;
    if (this.normalized) {
      t = Oe(t, this.array);
      n = Oe(n, this.array);
    }
    this.array[e + 0] = t;
    this.array[e + 1] = n;
    return this;
  }
  setXYZ(e, t, n, i) {
    e *= this.itemSize;
    if (this.normalized) {
      t = Oe(t, this.array);
      n = Oe(n, this.array);
      i = Oe(i, this.array);
    }
    this.array[e + 0] = t;
    this.array[e + 1] = n;
    this.array[e + 2] = i;
    return this;
  }
  setXYZW(e, t, n, i, s) {
    e *= this.itemSize;
    if (this.normalized) {
      t = Oe(t, this.array);
      n = Oe(n, this.array);
      i = Oe(i, this.array);
      s = Oe(s, this.array);
    }
    this.array[e + 0] = t;
    this.array[e + 1] = n;
    this.array[e + 2] = i;
    this.array[e + 3] = s;
    return this;
  }
  onUpload(e) {
    this.onUploadCallback = e;
    return this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    if (this.name !== "")
      e.name = this.name;
    if (this.usage !== Zs)
      e.usage = this.usage;
    if (this.updateRange.offset !== 0 || this.updateRange.count !== -1)
      e.updateRange = this.updateRange;
    return e;
  }
  copyColorsArray() {
    console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.");
  }
  copyVector2sArray() {
    console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.");
  }
  copyVector3sArray() {
    console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.");
  }
  copyVector4sArray() {
    console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.");
  }
};
var Zc = class extends Ke {
  constructor(e, t, n) {
    super(new Int8Array(e), t, n);
  }
};
var Jc = class extends Ke {
  constructor(e, t, n) {
    super(new Uint8Array(e), t, n);
  }
};
var $c = class extends Ke {
  constructor(e, t, n) {
    super(new Uint8ClampedArray(e), t, n);
  }
};
var Kc = class extends Ke {
  constructor(e, t, n) {
    super(new Int16Array(e), t, n);
  }
};
var Qs = class extends Ke {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
  }
};
var jc = class extends Ke {
  constructor(e, t, n) {
    super(new Int32Array(e), t, n);
  }
};
var er = class extends Ke {
  constructor(e, t, n) {
    super(new Uint32Array(e), t, n);
  }
};
var Qc = class extends Ke {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
    this.isFloat16BufferAttribute = true;
  }
  getX(e) {
    let t = Us(this.array[e * this.itemSize]);
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  setX(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.array[e * this.itemSize] = It(t);
    return this;
  }
  getY(e) {
    let t = Us(this.array[e * this.itemSize + 1]);
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  setY(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.array[e * this.itemSize + 1] = It(t);
    return this;
  }
  getZ(e) {
    let t = Us(this.array[e * this.itemSize + 2]);
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  setZ(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.array[e * this.itemSize + 2] = It(t);
    return this;
  }
  getW(e) {
    let t = Us(this.array[e * this.itemSize + 3]);
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  setW(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.array[e * this.itemSize + 3] = It(t);
    return this;
  }
  setXY(e, t, n) {
    e *= this.itemSize;
    if (this.normalized) {
      t = Oe(t, this.array);
      n = Oe(n, this.array);
    }
    this.array[e + 0] = It(t);
    this.array[e + 1] = It(n);
    return this;
  }
  setXYZ(e, t, n, i) {
    e *= this.itemSize;
    if (this.normalized) {
      t = Oe(t, this.array);
      n = Oe(n, this.array);
      i = Oe(i, this.array);
    }
    this.array[e + 0] = It(t);
    this.array[e + 1] = It(n);
    this.array[e + 2] = It(i);
    return this;
  }
  setXYZW(e, t, n, i, s) {
    e *= this.itemSize;
    if (this.normalized) {
      t = Oe(t, this.array);
      n = Oe(n, this.array);
      i = Oe(i, this.array);
      s = Oe(s, this.array);
    }
    this.array[e + 0] = It(t);
    this.array[e + 1] = It(n);
    this.array[e + 2] = It(i);
    this.array[e + 3] = It(s);
    return this;
  }
};
var xe = class extends Ke {
  constructor(e, t, n) {
    super(new Float32Array(e), t, n);
  }
};
var el = class extends Ke {
  constructor(e, t, n) {
    super(new Float64Array(e), t, n);
  }
};
var Kp = 0;
var Gt = new Ne();
var jo = new Ze();
var ki = new w();
var Nt = new qt();
var ws = new qt();
var xt = new w();
var ze = class r extends nn {
  constructor() {
    super();
    this.isBufferGeometry = true;
    Object.defineProperty(this, "id", { value: Kp++ });
    this.uuid = Bt();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.morphTargetsRelative = false;
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.drawRange = { start: 0, count: Infinity };
    this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    if (Array.isArray(e)) {
      this.index = new (gf(e) ? er : Qs)(e, 1);
    } else {
      this.index = e;
    }
    return this;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    this.attributes[e] = t;
    return this;
  }
  deleteAttribute(e) {
    delete this.attributes[e];
    return this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, n = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: n
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    this.drawRange.start = e;
    this.drawRange.count = t;
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    if (t !== void 0) {
      t.applyMatrix4(e);
      t.needsUpdate = true;
    }
    const n = this.attributes.normal;
    if (n !== void 0) {
      const s = new Ge().getNormalMatrix(e);
      n.applyNormalMatrix(s);
      n.needsUpdate = true;
    }
    const i = this.attributes.tangent;
    if (i !== void 0) {
      i.transformDirection(e);
      i.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  applyQuaternion(e) {
    Gt.makeRotationFromQuaternion(e);
    this.applyMatrix4(Gt);
    return this;
  }
  rotateX(e) {
    Gt.makeRotationX(e);
    this.applyMatrix4(Gt);
    return this;
  }
  rotateY(e) {
    Gt.makeRotationY(e);
    this.applyMatrix4(Gt);
    return this;
  }
  rotateZ(e) {
    Gt.makeRotationZ(e);
    this.applyMatrix4(Gt);
    return this;
  }
  translate(e, t, n) {
    Gt.makeTranslation(e, t, n);
    this.applyMatrix4(Gt);
    return this;
  }
  scale(e, t, n) {
    Gt.makeScale(e, t, n);
    this.applyMatrix4(Gt);
    return this;
  }
  lookAt(e) {
    jo.lookAt(e);
    jo.updateMatrix();
    this.applyMatrix4(jo.matrix);
    return this;
  }
  center() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(ki).negate();
    this.translate(ki.x, ki.y, ki.z);
    return this;
  }
  setFromPoints(e) {
    const t = [];
    for (let n = 0, i = e.length; n < i; n++) {
      const s = e[n];
      t.push(s.x, s.y, s.z || 0);
    }
    this.setAttribute("position", new xe(t, 3));
    return this;
  }
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new qt();
    }
    const e = this.attributes.position;
    const t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
      this.boundingBox.set(
        new w(-Infinity, -Infinity, -Infinity),
        new w(Infinity, Infinity, Infinity)
      );
      return;
    }
    if (e !== void 0) {
      this.boundingBox.setFromBufferAttribute(e);
      if (t) {
        for (let n = 0, i = t.length; n < i; n++) {
          const s = t[n];
          Nt.setFromBufferAttribute(s);
          if (this.morphTargetsRelative) {
            xt.addVectors(this.boundingBox.min, Nt.min);
            this.boundingBox.expandByPoint(xt);
            xt.addVectors(this.boundingBox.max, Nt.max);
            this.boundingBox.expandByPoint(xt);
          } else {
            this.boundingBox.expandByPoint(Nt.min);
            this.boundingBox.expandByPoint(Nt.max);
          }
        }
      }
    } else {
      this.boundingBox.makeEmpty();
    }
    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Yt();
    }
    const e = this.attributes.position;
    const t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
      this.boundingSphere.set(new w(), Infinity);
      return;
    }
    if (e) {
      const n = this.boundingSphere.center;
      Nt.setFromBufferAttribute(e);
      if (t) {
        for (let s = 0, a = t.length; s < a; s++) {
          const o = t[s];
          ws.setFromBufferAttribute(o);
          if (this.morphTargetsRelative) {
            xt.addVectors(Nt.min, ws.min);
            Nt.expandByPoint(xt);
            xt.addVectors(Nt.max, ws.max);
            Nt.expandByPoint(xt);
          } else {
            Nt.expandByPoint(ws.min);
            Nt.expandByPoint(ws.max);
          }
        }
      }
      Nt.getCenter(n);
      let i = 0;
      for (let s = 0, a = e.count; s < a; s++) {
        xt.fromBufferAttribute(e, s);
        i = Math.max(i, n.distanceToSquared(xt));
      }
      if (t) {
        for (let s = 0, a = t.length; s < a; s++) {
          const o = t[s];
          const c = this.morphTargetsRelative;
          for (let l = 0, h = o.count; l < h; l++) {
            xt.fromBufferAttribute(o, l);
            if (c) {
              ki.fromBufferAttribute(e, l);
              xt.add(ki);
            }
            i = Math.max(i, n.distanceToSquared(xt));
          }
        }
      }
      this.boundingSphere.radius = Math.sqrt(i);
      if (isNaN(this.boundingSphere.radius)) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    }
  }
  computeTangents() {
    const e = this.index;
    const t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const n = e.array;
    const i = t.position.array;
    const s = t.normal.array;
    const a = t.uv.array;
    const o = i.length / 3;
    if (this.hasAttribute("tangent") === false) {
      this.setAttribute("tangent", new Ke(new Float32Array(4 * o), 4));
    }
    const c = this.getAttribute("tangent").array;
    const l = [], h = [];
    for (let A = 0; A < o; A++) {
      l[A] = new w();
      h[A] = new w();
    }
    const u = new w(), d = new w(), f = new w(), m = new $(), _ = new $(), g = new $(), p = new w(), v = new w();
    function x(A, O, G) {
      u.fromArray(i, A * 3);
      d.fromArray(i, O * 3);
      f.fromArray(i, G * 3);
      m.fromArray(a, A * 2);
      _.fromArray(a, O * 2);
      g.fromArray(a, G * 2);
      d.sub(u);
      f.sub(u);
      _.sub(m);
      g.sub(m);
      const U = 1 / (_.x * g.y - g.x * _.y);
      if (!isFinite(U))
        return;
      p.copy(d).multiplyScalar(g.y).addScaledVector(f, -_.y).multiplyScalar(U);
      v.copy(f).multiplyScalar(_.x).addScaledVector(d, -g.x).multiplyScalar(U);
      l[A].add(p);
      l[O].add(p);
      l[G].add(p);
      h[A].add(v);
      h[O].add(v);
      h[G].add(v);
    }
    let M = this.groups;
    if (M.length === 0) {
      M = [{
        start: 0,
        count: n.length
      }];
    }
    for (let A = 0, O = M.length; A < O; ++A) {
      const G = M[A];
      const U = G.start;
      const F = G.count;
      for (let z = U, K = U + F; z < K; z += 3) {
        x(
          n[z + 0],
          n[z + 1],
          n[z + 2]
        );
      }
    }
    const S = new w(), E = new w();
    const C = new w(), P = new w();
    function y(A) {
      C.fromArray(s, A * 3);
      P.copy(C);
      const O = l[A];
      S.copy(O);
      S.sub(C.multiplyScalar(C.dot(O))).normalize();
      E.crossVectors(P, O);
      const G = E.dot(h[A]);
      const U = G < 0 ? -1 : 1;
      c[A * 4] = S.x;
      c[A * 4 + 1] = S.y;
      c[A * 4 + 2] = S.z;
      c[A * 4 + 3] = U;
    }
    for (let A = 0, O = M.length; A < O; ++A) {
      const G = M[A];
      const U = G.start;
      const F = G.count;
      for (let z = U, K = U + F; z < K; z += 3) {
        y(n[z + 0]);
        y(n[z + 1]);
        y(n[z + 2]);
      }
    }
  }
  computeVertexNormals() {
    const e = this.index;
    const t = this.getAttribute("position");
    if (t !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0) {
        n = new Ke(new Float32Array(t.count * 3), 3);
        this.setAttribute("normal", n);
      } else {
        for (let d = 0, f = n.count; d < f; d++) {
          n.setXYZ(d, 0, 0, 0);
        }
      }
      const i = new w(), s = new w(), a = new w();
      const o = new w(), c = new w(), l = new w();
      const h = new w(), u = new w();
      if (e) {
        for (let d = 0, f = e.count; d < f; d += 3) {
          const m = e.getX(d + 0);
          const _ = e.getX(d + 1);
          const g = e.getX(d + 2);
          i.fromBufferAttribute(t, m);
          s.fromBufferAttribute(t, _);
          a.fromBufferAttribute(t, g);
          h.subVectors(a, s);
          u.subVectors(i, s);
          h.cross(u);
          o.fromBufferAttribute(n, m);
          c.fromBufferAttribute(n, _);
          l.fromBufferAttribute(n, g);
          o.add(h);
          c.add(h);
          l.add(h);
          n.setXYZ(m, o.x, o.y, o.z);
          n.setXYZ(_, c.x, c.y, c.z);
          n.setXYZ(g, l.x, l.y, l.z);
        }
      } else {
        for (let d = 0, f = t.count; d < f; d += 3) {
          i.fromBufferAttribute(t, d + 0);
          s.fromBufferAttribute(t, d + 1);
          a.fromBufferAttribute(t, d + 2);
          h.subVectors(a, s);
          u.subVectors(i, s);
          h.cross(u);
          n.setXYZ(d + 0, h.x, h.y, h.z);
          n.setXYZ(d + 1, h.x, h.y, h.z);
          n.setXYZ(d + 2, h.x, h.y, h.z);
        }
      }
      this.normalizeNormals();
      n.needsUpdate = true;
    }
  }
  merge() {
    console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead.");
    return this;
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, n = e.count; t < n; t++) {
      xt.fromBufferAttribute(e, t);
      xt.normalize();
      e.setXYZ(t, xt.x, xt.y, xt.z);
    }
  }
  toNonIndexed() {
    function e(o, c) {
      const l = o.array;
      const h = o.itemSize;
      const u = o.normalized;
      const d = new l.constructor(c.length * h);
      let f = 0, m = 0;
      for (let _ = 0, g = c.length; _ < g; _++) {
        if (o.isInterleavedBufferAttribute) {
          f = c[_] * o.data.stride + o.offset;
        } else {
          f = c[_] * h;
        }
        for (let p = 0; p < h; p++) {
          d[m++] = l[f++];
        }
      }
      return new Ke(d, h, u);
    }
    if (this.index === null) {
      console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
      return this;
    }
    const t = new r();
    const n = this.index.array;
    const i = this.attributes;
    for (const o in i) {
      const c = i[o];
      const l = e(c, n);
      t.setAttribute(o, l);
    }
    const s = this.morphAttributes;
    for (const o in s) {
      const c = [];
      const l = s[o];
      for (let h = 0, u = l.length; h < u; h++) {
        const d = l[h];
        const f = e(d, n);
        c.push(f);
      }
      t.morphAttributes[o] = c;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const a = this.groups;
    for (let o = 0, c = a.length; o < c; o++) {
      const l = a[o];
      t.addGroup(l.start, l.count, l.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.5,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    e.uuid = this.uuid;
    e.type = this.type;
    if (this.name !== "")
      e.name = this.name;
    if (Object.keys(this.userData).length > 0)
      e.userData = this.userData;
    if (this.parameters !== void 0) {
      const c = this.parameters;
      for (const l in c) {
        if (c[l] !== void 0)
          e[l] = c[l];
      }
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    if (t !== null) {
      e.data.index = {
        type: t.array.constructor.name,
        array: Array.prototype.slice.call(t.array)
      };
    }
    const n = this.attributes;
    for (const c in n) {
      const l = n[c];
      e.data.attributes[c] = l.toJSON(e.data);
    }
    const i = {};
    let s = false;
    for (const c in this.morphAttributes) {
      const l = this.morphAttributes[c];
      const h = [];
      for (let u = 0, d = l.length; u < d; u++) {
        const f = l[u];
        h.push(f.toJSON(e.data));
      }
      if (h.length > 0) {
        i[c] = h;
        s = true;
      }
    }
    if (s) {
      e.data.morphAttributes = i;
      e.data.morphTargetsRelative = this.morphTargetsRelative;
    }
    const a = this.groups;
    if (a.length > 0) {
      e.data.groups = JSON.parse(JSON.stringify(a));
    }
    const o = this.boundingSphere;
    if (o !== null) {
      e.data.boundingSphere = {
        center: o.center.toArray(),
        radius: o.radius
      };
    }
    return e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const n = e.index;
    if (n !== null) {
      this.setIndex(n.clone(t));
    }
    const i = e.attributes;
    for (const l in i) {
      const h = i[l];
      this.setAttribute(l, h.clone(t));
    }
    const s = e.morphAttributes;
    for (const l in s) {
      const h = [];
      const u = s[l];
      for (let d = 0, f = u.length; d < f; d++) {
        h.push(u[d].clone(t));
      }
      this.morphAttributes[l] = h;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const a = e.groups;
    for (let l = 0, h = a.length; l < h; l++) {
      const u = a[l];
      this.addGroup(u.start, u.count, u.materialIndex);
    }
    const o = e.boundingBox;
    if (o !== null) {
      this.boundingBox = o.clone();
    }
    const c = e.boundingSphere;
    if (c !== null) {
      this.boundingSphere = c.clone();
    }
    this.drawRange.start = e.drawRange.start;
    this.drawRange.count = e.drawRange.count;
    this.userData = e.userData;
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
var nu = new Ne();
var an = new vi();
var Xr = new Yt();
var iu = new w();
var Vi = new w();
var Hi = new w();
var Gi = new w();
var Qo = new w();
var qr = new w();
var Yr = new $();
var Zr = new $();
var Jr = new $();
var su = new w();
var ru = new w();
var au = new w();
var $r = new w();
var Kr = new w();
var ft = class extends Ze {
  constructor(e = new ze(), t = new dn()) {
    super();
    this.isMesh = true;
    this.type = "Mesh";
    this.geometry = e;
    this.material = t;
    this.updateMorphTargets();
  }
  copy(e, t) {
    super.copy(e, t);
    if (e.morphTargetInfluences !== void 0) {
      this.morphTargetInfluences = e.morphTargetInfluences.slice();
    }
    if (e.morphTargetDictionary !== void 0) {
      this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary);
    }
    this.material = e.material;
    this.geometry = e.geometry;
    return this;
  }
  updateMorphTargets() {
    const e = this.geometry;
    const t = e.morphAttributes;
    const n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let s = 0, a = i.length; s < a; s++) {
          const o = i[s].name || String(s);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[o] = s;
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const n = this.geometry;
    const i = n.attributes.position;
    const s = n.morphAttributes.position;
    const a = n.morphTargetsRelative;
    t.fromBufferAttribute(i, e);
    const o = this.morphTargetInfluences;
    if (s && o) {
      qr.set(0, 0, 0);
      for (let c = 0, l = s.length; c < l; c++) {
        const h = o[c];
        const u = s[c];
        if (h === 0)
          continue;
        Qo.fromBufferAttribute(u, e);
        if (a) {
          qr.addScaledVector(Qo, h);
        } else {
          qr.addScaledVector(Qo.sub(t), h);
        }
      }
      t.add(qr);
    }
    return t;
  }
  raycast(e, t) {
    const n = this.geometry;
    const i = this.material;
    const s = this.matrixWorld;
    if (i === void 0)
      return;
    if (n.boundingSphere === null)
      n.computeBoundingSphere();
    Xr.copy(n.boundingSphere);
    Xr.applyMatrix4(s);
    an.copy(e.ray).recast(e.near);
    if (Xr.containsPoint(an.origin) === false) {
      if (an.intersectSphere(Xr, iu) === null)
        return;
      if (an.origin.distanceToSquared(iu) > (e.far - e.near) ** 2)
        return;
    }
    nu.copy(s).invert();
    an.copy(e.ray).applyMatrix4(nu);
    if (n.boundingBox !== null) {
      if (an.intersectsBox(n.boundingBox) === false)
        return;
    }
    this._computeIntersections(e, t);
  }
  _computeIntersections(e, t) {
    let n;
    const i = this.geometry;
    const s = this.material;
    const a = i.index;
    const o = i.attributes.position;
    const c = i.attributes.uv;
    const l = i.attributes.uv1;
    const h = i.attributes.normal;
    const u = i.groups;
    const d = i.drawRange;
    if (a !== null) {
      if (Array.isArray(s)) {
        for (let f = 0, m = u.length; f < m; f++) {
          const _ = u[f];
          const g = s[_.materialIndex];
          const p = Math.max(_.start, d.start);
          const v = Math.min(a.count, Math.min(_.start + _.count, d.start + d.count));
          for (let x = p, M = v; x < M; x += 3) {
            const S = a.getX(x);
            const E = a.getX(x + 1);
            const C = a.getX(x + 2);
            n = jr(this, g, e, an, c, l, h, S, E, C);
            if (n) {
              n.faceIndex = Math.floor(x / 3);
              n.face.materialIndex = _.materialIndex;
              t.push(n);
            }
          }
        }
      } else {
        const f = Math.max(0, d.start);
        const m = Math.min(a.count, d.start + d.count);
        for (let _ = f, g = m; _ < g; _ += 3) {
          const p = a.getX(_);
          const v = a.getX(_ + 1);
          const x = a.getX(_ + 2);
          n = jr(this, s, e, an, c, l, h, p, v, x);
          if (n) {
            n.faceIndex = Math.floor(_ / 3);
            t.push(n);
          }
        }
      }
    } else if (o !== void 0) {
      if (Array.isArray(s)) {
        for (let f = 0, m = u.length; f < m; f++) {
          const _ = u[f];
          const g = s[_.materialIndex];
          const p = Math.max(_.start, d.start);
          const v = Math.min(o.count, Math.min(_.start + _.count, d.start + d.count));
          for (let x = p, M = v; x < M; x += 3) {
            const S = x;
            const E = x + 1;
            const C = x + 2;
            n = jr(this, g, e, an, c, l, h, S, E, C);
            if (n) {
              n.faceIndex = Math.floor(x / 3);
              n.face.materialIndex = _.materialIndex;
              t.push(n);
            }
          }
        }
      } else {
        const f = Math.max(0, d.start);
        const m = Math.min(o.count, d.start + d.count);
        for (let _ = f, g = m; _ < g; _ += 3) {
          const p = _;
          const v = _ + 1;
          const x = _ + 2;
          n = jr(this, s, e, an, c, l, h, p, v, x);
          if (n) {
            n.faceIndex = Math.floor(_ / 3);
            t.push(n);
          }
        }
      }
    }
  }
};
function jp(r, e, t, n, i, s, a, o) {
  let c;
  if (e.side === Pt) {
    c = n.intersectTriangle(a, s, i, true, o);
  } else {
    c = n.intersectTriangle(i, s, a, e.side === Rn, o);
  }
  if (c === null)
    return null;
  Kr.copy(o);
  Kr.applyMatrix4(r.matrixWorld);
  const l = t.ray.origin.distanceTo(Kr);
  if (l < t.near || l > t.far)
    return null;
  return {
    distance: l,
    point: Kr.clone(),
    object: r
  };
}
function jr(r, e, t, n, i, s, a, o, c, l) {
  r.getVertexPosition(o, Vi);
  r.getVertexPosition(c, Hi);
  r.getVertexPosition(l, Gi);
  const h = jp(r, e, t, n, Vi, Hi, Gi, $r);
  if (h) {
    if (i) {
      Yr.fromBufferAttribute(i, o);
      Zr.fromBufferAttribute(i, c);
      Jr.fromBufferAttribute(i, l);
      h.uv = Tn.getInterpolation($r, Vi, Hi, Gi, Yr, Zr, Jr, new $());
    }
    if (s) {
      Yr.fromBufferAttribute(s, o);
      Zr.fromBufferAttribute(s, c);
      Jr.fromBufferAttribute(s, l);
      h.uv1 = Tn.getInterpolation($r, Vi, Hi, Gi, Yr, Zr, Jr, new $());
      h.uv2 = h.uv1;
    }
    if (a) {
      su.fromBufferAttribute(a, o);
      ru.fromBufferAttribute(a, c);
      au.fromBufferAttribute(a, l);
      h.normal = Tn.getInterpolation($r, Vi, Hi, Gi, su, ru, au, new w());
      if (h.normal.dot(n.direction) > 0) {
        h.normal.multiplyScalar(-1);
      }
    }
    const u = {
      a: o,
      b: c,
      c: l,
      normal: new w(),
      materialIndex: 0
    };
    Tn.getNormal(Vi, Hi, Gi, u.normal);
    h.face = u;
  }
  return h;
}
var Zn = class r extends ze {
  constructor(e = 1, t = 1, n = 1, i = 1, s = 1, a = 1) {
    super();
    this.type = "BoxGeometry";
    this.parameters = {
      width: e,
      height: t,
      depth: n,
      widthSegments: i,
      heightSegments: s,
      depthSegments: a
    };
    const o = this;
    i = Math.floor(i);
    s = Math.floor(s);
    a = Math.floor(a);
    const c = [];
    const l = [];
    const h = [];
    const u = [];
    let d = 0;
    let f = 0;
    m("z", "y", "x", -1, -1, n, t, e, a, s, 0);
    m("z", "y", "x", 1, -1, n, t, -e, a, s, 1);
    m("x", "z", "y", 1, 1, e, n, t, i, a, 2);
    m("x", "z", "y", 1, -1, e, n, -t, i, a, 3);
    m("x", "y", "z", 1, -1, e, t, n, i, s, 4);
    m("x", "y", "z", -1, -1, e, t, -n, i, s, 5);
    this.setIndex(c);
    this.setAttribute("position", new xe(l, 3));
    this.setAttribute("normal", new xe(h, 3));
    this.setAttribute("uv", new xe(u, 2));
    function m(_, g, p, v, x, M, S, E, C, P, y) {
      const A = M / C;
      const O = S / P;
      const G = M / 2;
      const U = S / 2;
      const F = E / 2;
      const z = C + 1;
      const K = P + 1;
      let Z = 0;
      let Y = 0;
      const j = new w();
      for (let te = 0; te < K; te++) {
        const pe = te * O - U;
        for (let he = 0; he < z; he++) {
          const k = he * A - G;
          j[_] = k * v;
          j[g] = pe * x;
          j[p] = F;
          l.push(j.x, j.y, j.z);
          j[_] = 0;
          j[g] = 0;
          j[p] = E > 0 ? 1 : -1;
          h.push(j.x, j.y, j.z);
          u.push(he / C);
          u.push(1 - te / P);
          Z += 1;
        }
      }
      for (let te = 0; te < P; te++) {
        for (let pe = 0; pe < C; pe++) {
          const he = d + pe + z * te;
          const k = d + pe + z * (te + 1);
          const J = d + (pe + 1) + z * (te + 1);
          const oe = d + (pe + 1) + z * te;
          c.push(he, k, oe);
          c.push(k, J, oe);
          Y += 6;
        }
      }
      o.addGroup(f, Y, y);
      f += Y;
      d += Z;
    }
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
};
function cs(r) {
  const e = {};
  for (const t in r) {
    e[t] = {};
    for (const n in r[t]) {
      const i = r[t][n];
      if (i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion)) {
        if (i.isRenderTargetTexture) {
          console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
          e[t][n] = null;
        } else {
          e[t][n] = i.clone();
        }
      } else if (Array.isArray(i)) {
        e[t][n] = i.slice();
      } else {
        e[t][n] = i;
      }
    }
  }
  return e;
}
function Ct(r) {
  const e = {};
  for (let t = 0; t < r.length; t++) {
    const n = cs(r[t]);
    for (const i in n) {
      e[i] = n[i];
    }
  }
  return e;
}
function Qp(r) {
  const e = [];
  for (let t = 0; t < r.length; t++) {
    e.push(r[t].clone());
  }
  return e;
}
function xf(r) {
  if (r.getRenderTarget() === null) {
    return r.outputColorSpace;
  }
  return tn;
}
var vf = { clone: cs, merge: Ct };
var em = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var tm = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
var Zt = class extends vt {
  constructor(e) {
    super();
    this.isShaderMaterial = true;
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.uniformsGroups = [];
    this.vertexShader = em;
    this.fragmentShader = tm;
    this.linewidth = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.lights = false;
    this.clipping = false;
    this.forceSinglePass = true;
    this.extensions = {
      derivatives: false,
      // set to use derivatives
      fragDepth: false,
      // set to use fragment depth values
      drawBuffers: false,
      // set to use draw buffers
      shaderTextureLOD: false
      // set to use shader texture LOD
    };
    this.defaultAttributeValues = {
      "color": [1, 1, 1],
      "uv": [0, 0],
      "uv1": [0, 0]
    };
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = false;
    this.glslVersion = null;
    if (e !== void 0) {
      this.setValues(e);
    }
  }
  copy(e) {
    super.copy(e);
    this.fragmentShader = e.fragmentShader;
    this.vertexShader = e.vertexShader;
    this.uniforms = cs(e.uniforms);
    this.uniformsGroups = Qp(e.uniformsGroups);
    this.defines = Object.assign({}, e.defines);
    this.wireframe = e.wireframe;
    this.wireframeLinewidth = e.wireframeLinewidth;
    this.fog = e.fog;
    this.lights = e.lights;
    this.clipping = e.clipping;
    this.extensions = Object.assign({}, e.extensions);
    this.glslVersion = e.glslVersion;
    return this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion;
    t.uniforms = {};
    for (const i in this.uniforms) {
      const s = this.uniforms[i];
      const a = s.value;
      if (a && a.isTexture) {
        t.uniforms[i] = {
          type: "t",
          value: a.toJSON(e).uuid
        };
      } else if (a && a.isColor) {
        t.uniforms[i] = {
          type: "c",
          value: a.getHex()
        };
      } else if (a && a.isVector2) {
        t.uniforms[i] = {
          type: "v2",
          value: a.toArray()
        };
      } else if (a && a.isVector3) {
        t.uniforms[i] = {
          type: "v3",
          value: a.toArray()
        };
      } else if (a && a.isVector4) {
        t.uniforms[i] = {
          type: "v4",
          value: a.toArray()
        };
      } else if (a && a.isMatrix3) {
        t.uniforms[i] = {
          type: "m3",
          value: a.toArray()
        };
      } else if (a && a.isMatrix4) {
        t.uniforms[i] = {
          type: "m4",
          value: a.toArray()
        };
      } else {
        t.uniforms[i] = {
          value: a
        };
      }
    }
    if (Object.keys(this.defines).length > 0)
      t.defines = this.defines;
    t.vertexShader = this.vertexShader;
    t.fragmentShader = this.fragmentShader;
    t.lights = this.lights;
    t.clipping = this.clipping;
    const n = {};
    for (const i in this.extensions) {
      if (this.extensions[i] === true)
        n[i] = true;
    }
    if (Object.keys(n).length > 0)
      t.extensions = n;
    return t;
  }
};
var ls = class extends Ze {
  constructor() {
    super();
    this.isCamera = true;
    this.type = "Camera";
    this.matrixWorldInverse = new Ne();
    this.projectionMatrix = new Ne();
    this.projectionMatrixInverse = new Ne();
  }
  copy(e, t) {
    super.copy(e, t);
    this.matrixWorldInverse.copy(e.matrixWorldInverse);
    this.projectionMatrix.copy(e.projectionMatrix);
    this.projectionMatrixInverse.copy(e.projectionMatrixInverse);
    return this;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(true, false);
    const t = this.matrixWorld.elements;
    return e.set(-t[8], -t[9], -t[10]).normalize();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var dt = class extends ls {
  constructor(e = 50, t = 1, n = 0.1, i = 2e3) {
    super();
    this.isPerspectiveCamera = true;
    this.type = "PerspectiveCamera";
    this.fov = e;
    this.zoom = 1;
    this.near = n;
    this.far = i;
    this.focus = 10;
    this.aspect = t;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  copy(e, t) {
    super.copy(e, t);
    this.fov = e.fov;
    this.zoom = e.zoom;
    this.near = e.near;
    this.far = e.far;
    this.focus = e.focus;
    this.aspect = e.aspect;
    this.view = e.view === null ? null : Object.assign({}, e.view);
    this.filmGauge = e.filmGauge;
    this.filmOffset = e.filmOffset;
    return this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = rs * 2 * Math.atan(t);
    this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const e = Math.tan(_i * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  getEffectiveFOV() {
    return rs * 2 * Math.atan(
      Math.tan(_i * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(e, t, n, i, s, a) {
    this.aspect = e / t;
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = e;
    this.view.fullHeight = t;
    this.view.offsetX = n;
    this.view.offsetY = i;
    this.view.width = s;
    this.view.height = a;
    this.updateProjectionMatrix();
  }
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan(_i * 0.5 * this.fov) / this.zoom;
    let n = 2 * t;
    let i = this.aspect * n;
    let s = -0.5 * i;
    const a = this.view;
    if (this.view !== null && this.view.enabled) {
      const c = a.fullWidth, l = a.fullHeight;
      s += a.offsetX * i / c;
      t -= a.offsetY * n / l;
      i *= a.width / c;
      n *= a.height / l;
    }
    const o = this.filmOffset;
    if (o !== 0)
      s += e * o / this.getFilmWidth();
    this.projectionMatrix.makePerspective(s, s + i, t, t - n, e, this.far);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.object.fov = this.fov;
    t.object.zoom = this.zoom;
    t.object.near = this.near;
    t.object.far = this.far;
    t.object.focus = this.focus;
    t.object.aspect = this.aspect;
    if (this.view !== null)
      t.object.view = Object.assign({}, this.view);
    t.object.filmGauge = this.filmGauge;
    t.object.filmOffset = this.filmOffset;
    return t;
  }
};
var Wi = -90;
var Xi = 1;
var Ua = class extends Ze {
  constructor(e, t, n) {
    super();
    this.type = "CubeCamera";
    this.renderTarget = n;
    const i = new dt(Wi, Xi, e, t);
    i.layers = this.layers;
    i.up.set(0, 1, 0);
    i.lookAt(1, 0, 0);
    this.add(i);
    const s = new dt(Wi, Xi, e, t);
    s.layers = this.layers;
    s.up.set(0, 1, 0);
    s.lookAt(-1, 0, 0);
    this.add(s);
    const a = new dt(Wi, Xi, e, t);
    a.layers = this.layers;
    a.up.set(0, 0, -1);
    a.lookAt(0, 1, 0);
    this.add(a);
    const o = new dt(Wi, Xi, e, t);
    o.layers = this.layers;
    o.up.set(0, 0, 1);
    o.lookAt(0, -1, 0);
    this.add(o);
    const c = new dt(Wi, Xi, e, t);
    c.layers = this.layers;
    c.up.set(0, 1, 0);
    c.lookAt(0, 0, 1);
    this.add(c);
    const l = new dt(Wi, Xi, e, t);
    l.layers = this.layers;
    l.up.set(0, 1, 0);
    l.lookAt(0, 0, -1);
    this.add(l);
  }
  update(e, t) {
    if (this.parent === null)
      this.updateMatrixWorld();
    const n = this.renderTarget;
    const [i, s, a, o, c, l] = this.children;
    const h = e.getRenderTarget();
    const u = e.toneMapping;
    const d = e.xr.enabled;
    e.toneMapping = hn;
    e.xr.enabled = false;
    const f = n.texture.generateMipmaps;
    n.texture.generateMipmaps = false;
    e.setRenderTarget(n, 0);
    e.render(t, i);
    e.setRenderTarget(n, 1);
    e.render(t, s);
    e.setRenderTarget(n, 2);
    e.render(t, a);
    e.setRenderTarget(n, 3);
    e.render(t, o);
    e.setRenderTarget(n, 4);
    e.render(t, c);
    n.texture.generateMipmaps = f;
    e.setRenderTarget(n, 5);
    e.render(t, l);
    e.setRenderTarget(h);
    e.toneMapping = u;
    e.xr.enabled = d;
    n.texture.needsPMREMUpdate = true;
  }
};
var yi = class extends pt {
  constructor(e, t, n, i, s, a, o, c, l, h) {
    e = e !== void 0 ? e : [];
    t = t !== void 0 ? t : Wn;
    super(e, t, n, i, s, a, o, c, l, h);
    this.isCubeTexture = true;
    this.flipY = false;
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
};
var Da = class extends zt {
  constructor(e = 1, t = {}) {
    super(e, e, t);
    this.isWebGLCubeRenderTarget = true;
    const n = { width: e, height: e, depth: 1 };
    const i = [n, n, n, n, n, n];
    if (t.encoding !== void 0) {
      Os("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.");
      t.colorSpace = t.encoding === Vn ? De : Hn;
    }
    this.texture = new yi(i, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.colorSpace);
    this.texture.isRenderTargetTexture = true;
    this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : false;
    this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : lt;
  }
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type;
    this.texture.colorSpace = t.colorSpace;
    this.texture.generateMipmaps = t.generateMipmaps;
    this.texture.minFilter = t.minFilter;
    this.texture.magFilter = t.magFilter;
    const n = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    };
    const i = new Zn(5, 5, 5);
    const s = new Zt({
      name: "CubemapFromEquirect",
      uniforms: cs(n.uniforms),
      vertexShader: n.vertexShader,
      fragmentShader: n.fragmentShader,
      side: Pt,
      blending: wn
    });
    s.uniforms.tEquirect.value = t;
    const a = new ft(i, s);
    const o = t.minFilter;
    if (t.minFilter === qn)
      t.minFilter = lt;
    const c = new Ua(1, 10, this);
    c.update(e, a);
    t.minFilter = o;
    a.geometry.dispose();
    a.material.dispose();
    return this;
  }
  clear(e, t, n, i) {
    const s = e.getRenderTarget();
    for (let a = 0; a < 6; a++) {
      e.setRenderTarget(this, a);
      e.clear(t, n, i);
    }
    e.setRenderTarget(s);
  }
};
var ec = new w();
var nm = new w();
var im = new Ge();
var cn = class {
  constructor(e = new w(1, 0, 0), t = 0) {
    this.isPlane = true;
    this.normal = e;
    this.constant = t;
  }
  set(e, t) {
    this.normal.copy(e);
    this.constant = t;
    return this;
  }
  setComponents(e, t, n, i) {
    this.normal.set(e, t, n);
    this.constant = i;
    return this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    this.normal.copy(e);
    this.constant = -t.dot(this.normal);
    return this;
  }
  setFromCoplanarPoints(e, t, n) {
    const i = ec.subVectors(n, t).cross(nm.subVectors(e, t)).normalize();
    this.setFromNormalAndCoplanarPoint(i, e);
    return this;
  }
  copy(e) {
    this.normal.copy(e.normal);
    this.constant = e.constant;
    return this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    this.normal.multiplyScalar(e);
    this.constant *= e;
    return this;
  }
  negate() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const n = e.delta(ec);
    const i = this.normal.dot(n);
    if (i === 0) {
      if (this.distanceToPoint(e.start) === 0) {
        return t.copy(e.start);
      }
      return null;
    }
    const s = -(e.start.dot(this.normal) + this.constant) / i;
    if (s < 0 || s > 1) {
      return null;
    }
    return t.copy(e.start).addScaledVector(n, s);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start);
    const n = this.distanceToPoint(e.end);
    return t < 0 && n > 0 || n < 0 && t > 0;
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const n = t || im.getNormalMatrix(e);
    const i = this.coplanarPoint(ec).applyMatrix4(e);
    const s = this.normal.applyMatrix3(n).normalize();
    this.constant = -i.dot(s);
    return this;
  }
  translate(e) {
    this.constant -= e.dot(this.normal);
    return this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var ii = new Yt();
var Qr = new w();
var hs = class {
  constructor(e = new cn(), t = new cn(), n = new cn(), i = new cn(), s = new cn(), a = new cn()) {
    this.planes = [e, t, n, i, s, a];
  }
  set(e, t, n, i, s, a) {
    const o = this.planes;
    o[0].copy(e);
    o[1].copy(t);
    o[2].copy(n);
    o[3].copy(i);
    o[4].copy(s);
    o[5].copy(a);
    return this;
  }
  copy(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      t[n].copy(e.planes[n]);
    }
    return this;
  }
  setFromProjectionMatrix(e) {
    const t = this.planes;
    const n = e.elements;
    const i = n[0], s = n[1], a = n[2], o = n[3];
    const c = n[4], l = n[5], h = n[6], u = n[7];
    const d = n[8], f = n[9], m = n[10], _ = n[11];
    const g = n[12], p = n[13], v = n[14], x = n[15];
    t[0].setComponents(o - i, u - c, _ - d, x - g).normalize();
    t[1].setComponents(o + i, u + c, _ + d, x + g).normalize();
    t[2].setComponents(o + s, u + l, _ + f, x + p).normalize();
    t[3].setComponents(o - s, u - l, _ - f, x - p).normalize();
    t[4].setComponents(o - a, u - h, _ - m, x - v).normalize();
    t[5].setComponents(o + a, u + h, _ + m, x + v).normalize();
    return this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0) {
      if (e.boundingSphere === null)
        e.computeBoundingSphere();
      ii.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    } else {
      const t = e.geometry;
      if (t.boundingSphere === null)
        t.computeBoundingSphere();
      ii.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(ii);
  }
  intersectsSprite(e) {
    ii.center.set(0, 0, 0);
    ii.radius = 0.7071067811865476;
    ii.applyMatrix4(e.matrixWorld);
    return this.intersectsSphere(ii);
  }
  intersectsSphere(e) {
    const t = this.planes;
    const n = e.center;
    const i = -e.radius;
    for (let s = 0; s < 6; s++) {
      const a = t[s].distanceToPoint(n);
      if (a < i) {
        return false;
      }
    }
    return true;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      const i = t[n];
      Qr.x = i.normal.x > 0 ? e.max.x : e.min.x;
      Qr.y = i.normal.y > 0 ? e.max.y : e.min.y;
      Qr.z = i.normal.z > 0 ? e.max.z : e.min.z;
      if (i.distanceToPoint(Qr) < 0) {
        return false;
      }
    }
    return true;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      if (t[n].distanceToPoint(e) < 0) {
        return false;
      }
    }
    return true;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
function yf() {
  let r = null;
  let e = false;
  let t = null;
  let n = null;
  function i(s, a) {
    t(s, a);
    n = r.requestAnimationFrame(i);
  }
  return {
    start: function() {
      if (e === true)
        return;
      if (t === null)
        return;
      n = r.requestAnimationFrame(i);
      e = true;
    },
    stop: function() {
      r.cancelAnimationFrame(n);
      e = false;
    },
    setAnimationLoop: function(s) {
      t = s;
    },
    setContext: function(s) {
      r = s;
    }
  };
}
function sm(r, e) {
  const t = e.isWebGL2;
  const n = /* @__PURE__ */ new WeakMap();
  function i(l, h) {
    const u = l.array;
    const d = l.usage;
    const f = r.createBuffer();
    r.bindBuffer(h, f);
    r.bufferData(h, u, d);
    l.onUploadCallback();
    let m;
    if (u instanceof Float32Array) {
      m = r.FLOAT;
    } else if (u instanceof Uint16Array) {
      if (l.isFloat16BufferAttribute) {
        if (t) {
          m = r.HALF_FLOAT;
        } else {
          throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
        }
      } else {
        m = r.UNSIGNED_SHORT;
      }
    } else if (u instanceof Int16Array) {
      m = r.SHORT;
    } else if (u instanceof Uint32Array) {
      m = r.UNSIGNED_INT;
    } else if (u instanceof Int32Array) {
      m = r.INT;
    } else if (u instanceof Int8Array) {
      m = r.BYTE;
    } else if (u instanceof Uint8Array) {
      m = r.UNSIGNED_BYTE;
    } else if (u instanceof Uint8ClampedArray) {
      m = r.UNSIGNED_BYTE;
    } else {
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + u);
    }
    return {
      buffer: f,
      type: m,
      bytesPerElement: u.BYTES_PER_ELEMENT,
      version: l.version
    };
  }
  function s(l, h, u) {
    const d = h.array;
    const f = h.updateRange;
    r.bindBuffer(u, l);
    if (f.count === -1) {
      r.bufferSubData(u, 0, d);
    } else {
      if (t) {
        r.bufferSubData(
          u,
          f.offset * d.BYTES_PER_ELEMENT,
          d,
          f.offset,
          f.count
        );
      } else {
        r.bufferSubData(
          u,
          f.offset * d.BYTES_PER_ELEMENT,
          d.subarray(f.offset, f.offset + f.count)
        );
      }
      f.count = -1;
    }
    h.onUploadCallback();
  }
  function a(l) {
    if (l.isInterleavedBufferAttribute)
      l = l.data;
    return n.get(l);
  }
  function o(l) {
    if (l.isInterleavedBufferAttribute)
      l = l.data;
    const h = n.get(l);
    if (h) {
      r.deleteBuffer(h.buffer);
      n.delete(l);
    }
  }
  function c(l, h) {
    if (l.isGLBufferAttribute) {
      const d = n.get(l);
      if (!d || d.version < l.version) {
        n.set(l, {
          buffer: l.buffer,
          type: l.type,
          bytesPerElement: l.elementSize,
          version: l.version
        });
      }
      return;
    }
    if (l.isInterleavedBufferAttribute)
      l = l.data;
    const u = n.get(l);
    if (u === void 0) {
      n.set(l, i(l, h));
    } else if (u.version < l.version) {
      s(u.buffer, l, h);
      u.version = l.version;
    }
  }
  return {
    get: a,
    remove: o,
    update: c
  };
}
var us = class r extends ze {
  constructor(e = 1, t = 1, n = 1, i = 1) {
    super();
    this.type = "PlaneGeometry";
    this.parameters = {
      width: e,
      height: t,
      widthSegments: n,
      heightSegments: i
    };
    const s = e / 2;
    const a = t / 2;
    const o = Math.floor(n);
    const c = Math.floor(i);
    const l = o + 1;
    const h = c + 1;
    const u = e / o;
    const d = t / c;
    const f = [];
    const m = [];
    const _ = [];
    const g = [];
    for (let p = 0; p < h; p++) {
      const v = p * d - a;
      for (let x = 0; x < l; x++) {
        const M = x * u - s;
        m.push(M, -v, 0);
        _.push(0, 0, 1);
        g.push(x / o);
        g.push(1 - p / c);
      }
    }
    for (let p = 0; p < c; p++) {
      for (let v = 0; v < o; v++) {
        const x = v + l * p;
        const M = v + l * (p + 1);
        const S = v + 1 + l * (p + 1);
        const E = v + 1 + l * p;
        f.push(x, M, E);
        f.push(M, S, E);
      }
    }
    this.setIndex(f);
    this.setAttribute("position", new xe(m, 3));
    this.setAttribute("normal", new xe(_, 3));
    this.setAttribute("uv", new xe(g, 2));
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.width, e.height, e.widthSegments, e.heightSegments);
  }
};
var rm = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
var am = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var om = "#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";
var cm = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
var lm = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
var hm = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
var um = "vec3 transformed = vec3( position );";
var dm = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
var fm = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
var pm = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			 return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float R21 = R12;\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
var mm = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = dFdx( surf_pos.xyz );\n		vec3 vSigmaY = dFdy( surf_pos.xyz );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
var gm = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
var _m = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var xm = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
var vm = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
var ym = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
var Mm = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
var Sm = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
var bm = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
var Em = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
var Tm = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_v0 0.339\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_v1 0.276\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_v4 0.046\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_v5 0.016\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_v6 0.0038\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
var wm = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
var Am = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
var Rm = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
var Cm = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var Pm = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
var Lm = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var Im = "vec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
var Um = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
var Dm = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
var Nm = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
var Fm = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
var Om = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
var Bm = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
var zm = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
var km = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var Vm = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
var Hm = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
var Gm = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
var Wm = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
var Xm = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
var qm = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
var Ym = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
var Zm = "#if defined( USE_ENVMAP )\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n#endif";
var Jm = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var $m = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
var Km = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var jm = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
var Qm = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif";
var eg = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var tg = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometry.viewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var ng = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
var ig = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
var sg = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var rg = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var ag = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
var og = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
var cg = "#ifdef USE_MAP\n	diffuseColor *= texture2D( map, vMapUv );\n#endif";
var lg = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
var hg = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var ug = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var dg = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
var fg = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
var pg = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
var mg = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
var gg = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
var _g = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
var xg = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#ifdef USE_NORMALMAP_TANGENTSPACE\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 geometryNormal = normal;";
var vg = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var yg = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var Mg = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var Sg = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
var bg = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
var Eg = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
var Tg = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
var wg = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
var Ag = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
var Rg = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var Cg = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
var Pg = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var Lg = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var Ig = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var Ug = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
var Dg = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
var Ng = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
var Fg = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
var Og = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
var Bg = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
var zg = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
var kg = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var Vg = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	uniform int boneTextureSize;\n	mat4 getBoneMatrix( const in float i ) {\n		float j = i * 4.0;\n		float x = mod( j, float( boneTextureSize ) );\n		float y = floor( j / float( boneTextureSize ) );\n		float dx = 1.0 / float( boneTextureSize );\n		float dy = 1.0 / float( boneTextureSize );\n		y = dy * ( y + 0.5 );\n		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n		mat4 bone = mat4( v1, v2, v3, v4 );\n		return bone;\n	}\n#endif";
var Hg = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var Gg = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
var Wg = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
var Xg = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
var qg = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var Yg = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var Zg = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmission = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n#endif";
var Jg = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return radiance;\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n	}\n#endif";
var $g = "#ifdef USE_UV\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var Kg = "#ifdef USE_UV\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var jg = "#ifdef USE_UV\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
var Qg = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
var e_ = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
var t_ = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var n_ = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
var i_ = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var s_ = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
var r_ = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var a_ = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
var o_ = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
var c_ = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
var l_ = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
var h_ = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
var u_ = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var d_ = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
var f_ = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var p_ = "#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
var m_ = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var g_ = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var __ = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var x_ = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
var v_ = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var y_ = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
var M_ = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
var S_ = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var b_ = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var E_ = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
var T_ = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n	#endif\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var w_ = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var A_ = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var R_ = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
var C_ = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var P_ = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var L_ = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
var I_ = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
var U_ = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
var Fe = {
  alphamap_fragment: rm,
  alphamap_pars_fragment: am,
  alphatest_fragment: om,
  alphatest_pars_fragment: cm,
  aomap_fragment: lm,
  aomap_pars_fragment: hm,
  begin_vertex: um,
  beginnormal_vertex: dm,
  bsdfs: fm,
  iridescence_fragment: pm,
  bumpmap_pars_fragment: mm,
  clipping_planes_fragment: gm,
  clipping_planes_pars_fragment: _m,
  clipping_planes_pars_vertex: xm,
  clipping_planes_vertex: vm,
  color_fragment: ym,
  color_pars_fragment: Mm,
  color_pars_vertex: Sm,
  color_vertex: bm,
  common: Em,
  cube_uv_reflection_fragment: Tm,
  defaultnormal_vertex: wm,
  displacementmap_pars_vertex: Am,
  displacementmap_vertex: Rm,
  emissivemap_fragment: Cm,
  emissivemap_pars_fragment: Pm,
  encodings_fragment: Lm,
  encodings_pars_fragment: Im,
  envmap_fragment: Um,
  envmap_common_pars_fragment: Dm,
  envmap_pars_fragment: Nm,
  envmap_pars_vertex: Fm,
  envmap_physical_pars_fragment: Zm,
  envmap_vertex: Om,
  fog_vertex: Bm,
  fog_pars_vertex: zm,
  fog_fragment: km,
  fog_pars_fragment: Vm,
  gradientmap_pars_fragment: Hm,
  lightmap_fragment: Gm,
  lightmap_pars_fragment: Wm,
  lights_lambert_fragment: Xm,
  lights_lambert_pars_fragment: qm,
  lights_pars_begin: Ym,
  lights_toon_fragment: Jm,
  lights_toon_pars_fragment: $m,
  lights_phong_fragment: Km,
  lights_phong_pars_fragment: jm,
  lights_physical_fragment: Qm,
  lights_physical_pars_fragment: eg,
  lights_fragment_begin: tg,
  lights_fragment_maps: ng,
  lights_fragment_end: ig,
  logdepthbuf_fragment: sg,
  logdepthbuf_pars_fragment: rg,
  logdepthbuf_pars_vertex: ag,
  logdepthbuf_vertex: og,
  map_fragment: cg,
  map_pars_fragment: lg,
  map_particle_fragment: hg,
  map_particle_pars_fragment: ug,
  metalnessmap_fragment: dg,
  metalnessmap_pars_fragment: fg,
  morphcolor_vertex: pg,
  morphnormal_vertex: mg,
  morphtarget_pars_vertex: gg,
  morphtarget_vertex: _g,
  normal_fragment_begin: xg,
  normal_fragment_maps: vg,
  normal_pars_fragment: yg,
  normal_pars_vertex: Mg,
  normal_vertex: Sg,
  normalmap_pars_fragment: bg,
  clearcoat_normal_fragment_begin: Eg,
  clearcoat_normal_fragment_maps: Tg,
  clearcoat_pars_fragment: wg,
  iridescence_pars_fragment: Ag,
  output_fragment: Rg,
  packing: Cg,
  premultiplied_alpha_fragment: Pg,
  project_vertex: Lg,
  dithering_fragment: Ig,
  dithering_pars_fragment: Ug,
  roughnessmap_fragment: Dg,
  roughnessmap_pars_fragment: Ng,
  shadowmap_pars_fragment: Fg,
  shadowmap_pars_vertex: Og,
  shadowmap_vertex: Bg,
  shadowmask_pars_fragment: zg,
  skinbase_vertex: kg,
  skinning_pars_vertex: Vg,
  skinning_vertex: Hg,
  skinnormal_vertex: Gg,
  specularmap_fragment: Wg,
  specularmap_pars_fragment: Xg,
  tonemapping_fragment: qg,
  tonemapping_pars_fragment: Yg,
  transmission_fragment: Zg,
  transmission_pars_fragment: Jg,
  uv_pars_fragment: $g,
  uv_pars_vertex: Kg,
  uv_vertex: jg,
  worldpos_vertex: Qg,
  background_vert: e_,
  background_frag: t_,
  backgroundCube_vert: n_,
  backgroundCube_frag: i_,
  cube_vert: s_,
  cube_frag: r_,
  depth_vert: a_,
  depth_frag: o_,
  distanceRGBA_vert: c_,
  distanceRGBA_frag: l_,
  equirect_vert: h_,
  equirect_frag: u_,
  linedashed_vert: d_,
  linedashed_frag: f_,
  meshbasic_vert: p_,
  meshbasic_frag: m_,
  meshlambert_vert: g_,
  meshlambert_frag: __,
  meshmatcap_vert: x_,
  meshmatcap_frag: v_,
  meshnormal_vert: y_,
  meshnormal_frag: M_,
  meshphong_vert: S_,
  meshphong_frag: b_,
  meshphysical_vert: E_,
  meshphysical_frag: T_,
  meshtoon_vert: w_,
  meshtoon_frag: A_,
  points_vert: R_,
  points_frag: C_,
  shadow_vert: P_,
  shadow_frag: L_,
  sprite_vert: I_,
  sprite_frag: U_
};
var ae = {
  common: {
    diffuse: { value: new de(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: new Ge() },
    alphaMap: { value: null },
    alphaMapTransform: { value: new Ge() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: new Ge() }
  },
  envmap: {
    envMap: { value: null },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: new Ge() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: new Ge() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: new Ge() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: new Ge() },
    normalScale: { value: new $(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: new Ge() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: new Ge() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: new Ge() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: new Ge() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: new de(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: new de(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaTest: { value: 0 },
    uvTransform: { value: new Ge() }
  },
  sprite: {
    diffuse: { value: new de(16777215) },
    opacity: { value: 1 },
    center: { value: new $(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: new Ge() },
    alphaMap: { value: null },
    alphaTest: { value: 0 }
  }
};
var en = {
  basic: {
    uniforms: Ct([
      ae.common,
      ae.specularmap,
      ae.envmap,
      ae.aomap,
      ae.lightmap,
      ae.fog
    ]),
    vertexShader: Fe.meshbasic_vert,
    fragmentShader: Fe.meshbasic_frag
  },
  lambert: {
    uniforms: Ct([
      ae.common,
      ae.specularmap,
      ae.envmap,
      ae.aomap,
      ae.lightmap,
      ae.emissivemap,
      ae.bumpmap,
      ae.normalmap,
      ae.displacementmap,
      ae.fog,
      ae.lights,
      {
        emissive: { value: new de(0) }
      }
    ]),
    vertexShader: Fe.meshlambert_vert,
    fragmentShader: Fe.meshlambert_frag
  },
  phong: {
    uniforms: Ct([
      ae.common,
      ae.specularmap,
      ae.envmap,
      ae.aomap,
      ae.lightmap,
      ae.emissivemap,
      ae.bumpmap,
      ae.normalmap,
      ae.displacementmap,
      ae.fog,
      ae.lights,
      {
        emissive: { value: new de(0) },
        specular: { value: new de(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: Fe.meshphong_vert,
    fragmentShader: Fe.meshphong_frag
  },
  standard: {
    uniforms: Ct([
      ae.common,
      ae.envmap,
      ae.aomap,
      ae.lightmap,
      ae.emissivemap,
      ae.bumpmap,
      ae.normalmap,
      ae.displacementmap,
      ae.roughnessmap,
      ae.metalnessmap,
      ae.fog,
      ae.lights,
      {
        emissive: { value: new de(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
        // temporary
      }
    ]),
    vertexShader: Fe.meshphysical_vert,
    fragmentShader: Fe.meshphysical_frag
  },
  toon: {
    uniforms: Ct([
      ae.common,
      ae.aomap,
      ae.lightmap,
      ae.emissivemap,
      ae.bumpmap,
      ae.normalmap,
      ae.displacementmap,
      ae.gradientmap,
      ae.fog,
      ae.lights,
      {
        emissive: { value: new de(0) }
      }
    ]),
    vertexShader: Fe.meshtoon_vert,
    fragmentShader: Fe.meshtoon_frag
  },
  matcap: {
    uniforms: Ct([
      ae.common,
      ae.bumpmap,
      ae.normalmap,
      ae.displacementmap,
      ae.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: Fe.meshmatcap_vert,
    fragmentShader: Fe.meshmatcap_frag
  },
  points: {
    uniforms: Ct([
      ae.points,
      ae.fog
    ]),
    vertexShader: Fe.points_vert,
    fragmentShader: Fe.points_frag
  },
  dashed: {
    uniforms: Ct([
      ae.common,
      ae.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: Fe.linedashed_vert,
    fragmentShader: Fe.linedashed_frag
  },
  depth: {
    uniforms: Ct([
      ae.common,
      ae.displacementmap
    ]),
    vertexShader: Fe.depth_vert,
    fragmentShader: Fe.depth_frag
  },
  normal: {
    uniforms: Ct([
      ae.common,
      ae.bumpmap,
      ae.normalmap,
      ae.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: Fe.meshnormal_vert,
    fragmentShader: Fe.meshnormal_frag
  },
  sprite: {
    uniforms: Ct([
      ae.sprite,
      ae.fog
    ]),
    vertexShader: Fe.sprite_vert,
    fragmentShader: Fe.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: new Ge() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: Fe.background_vert,
    fragmentShader: Fe.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: Fe.backgroundCube_vert,
    fragmentShader: Fe.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: Fe.cube_vert,
    fragmentShader: Fe.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: Fe.equirect_vert,
    fragmentShader: Fe.equirect_frag
  },
  distanceRGBA: {
    uniforms: Ct([
      ae.common,
      ae.displacementmap,
      {
        referencePosition: { value: new w() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: Fe.distanceRGBA_vert,
    fragmentShader: Fe.distanceRGBA_frag
  },
  shadow: {
    uniforms: Ct([
      ae.lights,
      ae.fog,
      {
        color: { value: new de(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: Fe.shadow_vert,
    fragmentShader: Fe.shadow_frag
  }
};
en.physical = {
  uniforms: Ct([
    en.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: new Ge() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: new Ge() },
      clearcoatNormalScale: { value: new $(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: new Ge() },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: new Ge() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: new Ge() },
      sheen: { value: 0 },
      sheenColor: { value: new de(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: new Ge() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: new Ge() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: new Ge() },
      transmissionSamplerSize: { value: new $() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: new Ge() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: new de(0) },
      specularColor: { value: new de(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: new Ge() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: new Ge() }
    }
  ]),
  vertexShader: Fe.meshphysical_vert,
  fragmentShader: Fe.meshphysical_frag
};
var ea = { r: 0, b: 0, g: 0 };
function D_(r, e, t, n, i, s, a) {
  const o = new de(0);
  let c = s === true ? 0 : 1;
  let l;
  let h;
  let u = null;
  let d = 0;
  let f = null;
  function m(g, p) {
    let v = false;
    let x = p.isScene === true ? p.background : null;
    if (x && x.isTexture) {
      const E = p.backgroundBlurriness > 0;
      x = (E ? t : e).get(x);
    }
    if (x === null) {
      _(o, c);
    } else if (x && x.isColor) {
      _(x, 1);
      v = true;
    }
    const M = r.xr;
    const S = M.getEnvironmentBlendMode();
    switch (S) {
      case "opaque":
        v = true;
        break;
      case "additive":
        n.buffers.color.setClear(0, 0, 0, 1, a);
        v = true;
        break;
      case "alpha-blend":
        n.buffers.color.setClear(0, 0, 0, 0, a);
        v = true;
        break;
    }
    if (r.autoClear || v) {
      r.clear(r.autoClearColor, r.autoClearDepth, r.autoClearStencil);
    }
    if (x && (x.isCubeTexture || x.mapping === ys)) {
      if (h === void 0) {
        h = new ft(
          new Zn(1, 1, 1),
          new Zt({
            name: "BackgroundCubeMaterial",
            uniforms: cs(en.backgroundCube.uniforms),
            vertexShader: en.backgroundCube.vertexShader,
            fragmentShader: en.backgroundCube.fragmentShader,
            side: Pt,
            depthTest: false,
            depthWrite: false,
            fog: false
          })
        );
        h.geometry.deleteAttribute("normal");
        h.geometry.deleteAttribute("uv");
        h.onBeforeRender = function(E, C, P) {
          this.matrixWorld.copyPosition(P.matrixWorld);
        };
        Object.defineProperty(h.material, "envMap", {
          get: function() {
            return this.uniforms.envMap.value;
          }
        });
        i.update(h);
      }
      h.material.uniforms.envMap.value = x;
      h.material.uniforms.flipEnvMap.value = x.isCubeTexture && x.isRenderTargetTexture === false ? -1 : 1;
      h.material.uniforms.backgroundBlurriness.value = p.backgroundBlurriness;
      h.material.uniforms.backgroundIntensity.value = p.backgroundIntensity;
      h.material.toneMapped = x.colorSpace === De ? false : true;
      if (u !== x || d !== x.version || f !== r.toneMapping) {
        h.material.needsUpdate = true;
        u = x;
        d = x.version;
        f = r.toneMapping;
      }
      h.layers.enableAll();
      g.unshift(h, h.geometry, h.material, 0, 0, null);
    } else if (x && x.isTexture) {
      if (l === void 0) {
        l = new ft(
          new us(2, 2),
          new Zt({
            name: "BackgroundMaterial",
            uniforms: cs(en.background.uniforms),
            vertexShader: en.background.vertexShader,
            fragmentShader: en.background.fragmentShader,
            side: Rn,
            depthTest: false,
            depthWrite: false,
            fog: false
          })
        );
        l.geometry.deleteAttribute("normal");
        Object.defineProperty(l.material, "map", {
          get: function() {
            return this.uniforms.t2D.value;
          }
        });
        i.update(l);
      }
      l.material.uniforms.t2D.value = x;
      l.material.uniforms.backgroundIntensity.value = p.backgroundIntensity;
      l.material.toneMapped = x.colorSpace === De ? false : true;
      if (x.matrixAutoUpdate === true) {
        x.updateMatrix();
      }
      l.material.uniforms.uvTransform.value.copy(x.matrix);
      if (u !== x || d !== x.version || f !== r.toneMapping) {
        l.material.needsUpdate = true;
        u = x;
        d = x.version;
        f = r.toneMapping;
      }
      l.layers.enableAll();
      g.unshift(l, l.geometry, l.material, 0, 0, null);
    }
  }
  function _(g, p) {
    g.getRGB(ea, xf(r));
    n.buffers.color.setClear(ea.r, ea.g, ea.b, p, a);
  }
  return {
    getClearColor: function() {
      return o;
    },
    setClearColor: function(g, p = 1) {
      o.set(g);
      c = p;
      _(o, c);
    },
    getClearAlpha: function() {
      return c;
    },
    setClearAlpha: function(g) {
      c = g;
      _(o, c);
    },
    render: m
  };
}
function N_(r, e, t, n) {
  const i = r.getParameter(r.MAX_VERTEX_ATTRIBS);
  const s = n.isWebGL2 ? null : e.get("OES_vertex_array_object");
  const a = n.isWebGL2 || s !== null;
  const o = {};
  const c = g(null);
  let l = c;
  let h = false;
  function u(F, z, K, Z, Y) {
    let j = false;
    if (a) {
      const te = _(Z, K, z);
      if (l !== te) {
        l = te;
        f(l.object);
      }
      j = p(F, Z, K, Y);
      if (j)
        v(F, Z, K, Y);
    } else {
      const te = z.wireframe === true;
      if (l.geometry !== Z.id || l.program !== K.id || l.wireframe !== te) {
        l.geometry = Z.id;
        l.program = K.id;
        l.wireframe = te;
        j = true;
      }
    }
    if (Y !== null) {
      t.update(Y, r.ELEMENT_ARRAY_BUFFER);
    }
    if (j || h) {
      h = false;
      P(F, z, K, Z);
      if (Y !== null) {
        r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, t.get(Y).buffer);
      }
    }
  }
  function d() {
    if (n.isWebGL2)
      return r.createVertexArray();
    return s.createVertexArrayOES();
  }
  function f(F) {
    if (n.isWebGL2)
      return r.bindVertexArray(F);
    return s.bindVertexArrayOES(F);
  }
  function m(F) {
    if (n.isWebGL2)
      return r.deleteVertexArray(F);
    return s.deleteVertexArrayOES(F);
  }
  function _(F, z, K) {
    const Z = K.wireframe === true;
    let Y = o[F.id];
    if (Y === void 0) {
      Y = {};
      o[F.id] = Y;
    }
    let j = Y[z.id];
    if (j === void 0) {
      j = {};
      Y[z.id] = j;
    }
    let te = j[Z];
    if (te === void 0) {
      te = g(d());
      j[Z] = te;
    }
    return te;
  }
  function g(F) {
    const z = [];
    const K = [];
    const Z = [];
    for (let Y = 0; Y < i; Y++) {
      z[Y] = 0;
      K[Y] = 0;
      Z[Y] = 0;
    }
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: false,
      newAttributes: z,
      enabledAttributes: K,
      attributeDivisors: Z,
      object: F,
      attributes: {},
      index: null
    };
  }
  function p(F, z, K, Z) {
    const Y = l.attributes;
    const j = z.attributes;
    let te = 0;
    const pe = K.getAttributes();
    for (const he in pe) {
      const k = pe[he];
      if (k.location >= 0) {
        const J = Y[he];
        let oe = j[he];
        if (oe === void 0) {
          if (he === "instanceMatrix" && F.instanceMatrix)
            oe = F.instanceMatrix;
          if (he === "instanceColor" && F.instanceColor)
            oe = F.instanceColor;
        }
        if (J === void 0)
          return true;
        if (J.attribute !== oe)
          return true;
        if (oe && J.data !== oe.data)
          return true;
        te++;
      }
    }
    if (l.attributesNum !== te)
      return true;
    if (l.index !== Z)
      return true;
    return false;
  }
  function v(F, z, K, Z) {
    const Y = {};
    const j = z.attributes;
    let te = 0;
    const pe = K.getAttributes();
    for (const he in pe) {
      const k = pe[he];
      if (k.location >= 0) {
        let J = j[he];
        if (J === void 0) {
          if (he === "instanceMatrix" && F.instanceMatrix)
            J = F.instanceMatrix;
          if (he === "instanceColor" && F.instanceColor)
            J = F.instanceColor;
        }
        const oe = {};
        oe.attribute = J;
        if (J && J.data) {
          oe.data = J.data;
        }
        Y[he] = oe;
        te++;
      }
    }
    l.attributes = Y;
    l.attributesNum = te;
    l.index = Z;
  }
  function x() {
    const F = l.newAttributes;
    for (let z = 0, K = F.length; z < K; z++) {
      F[z] = 0;
    }
  }
  function M(F) {
    S(F, 0);
  }
  function S(F, z) {
    const K = l.newAttributes;
    const Z = l.enabledAttributes;
    const Y = l.attributeDivisors;
    K[F] = 1;
    if (Z[F] === 0) {
      r.enableVertexAttribArray(F);
      Z[F] = 1;
    }
    if (Y[F] !== z) {
      const j = n.isWebGL2 ? r : e.get("ANGLE_instanced_arrays");
      j[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](F, z);
      Y[F] = z;
    }
  }
  function E() {
    const F = l.newAttributes;
    const z = l.enabledAttributes;
    for (let K = 0, Z = z.length; K < Z; K++) {
      if (z[K] !== F[K]) {
        r.disableVertexAttribArray(K);
        z[K] = 0;
      }
    }
  }
  function C(F, z, K, Z, Y, j) {
    if (n.isWebGL2 === true && (K === r.INT || K === r.UNSIGNED_INT)) {
      r.vertexAttribIPointer(F, z, K, Y, j);
    } else {
      r.vertexAttribPointer(F, z, K, Z, Y, j);
    }
  }
  function P(F, z, K, Z) {
    if (n.isWebGL2 === false && (F.isInstancedMesh || Z.isInstancedBufferGeometry)) {
      if (e.get("ANGLE_instanced_arrays") === null)
        return;
    }
    x();
    const Y = Z.attributes;
    const j = K.getAttributes();
    const te = z.defaultAttributeValues;
    for (const pe in j) {
      const he = j[pe];
      if (he.location >= 0) {
        let k = Y[pe];
        if (k === void 0) {
          if (pe === "instanceMatrix" && F.instanceMatrix)
            k = F.instanceMatrix;
          if (pe === "instanceColor" && F.instanceColor)
            k = F.instanceColor;
        }
        if (k !== void 0) {
          const J = k.normalized;
          const oe = k.itemSize;
          const ue = t.get(k);
          if (ue === void 0)
            continue;
          const L = ue.buffer;
          const Le = ue.type;
          const Ie = ue.bytesPerElement;
          if (k.isInterleavedBufferAttribute) {
            const re = k.data;
            const ye = re.stride;
            const Q = k.offset;
            if (re.isInstancedInterleavedBuffer) {
              for (let X = 0; X < he.locationSize; X++) {
                S(he.location + X, re.meshPerAttribute);
              }
              if (F.isInstancedMesh !== true && Z._maxInstanceCount === void 0) {
                Z._maxInstanceCount = re.meshPerAttribute * re.count;
              }
            } else {
              for (let X = 0; X < he.locationSize; X++) {
                M(he.location + X);
              }
            }
            r.bindBuffer(r.ARRAY_BUFFER, L);
            for (let X = 0; X < he.locationSize; X++) {
              C(
                he.location + X,
                oe / he.locationSize,
                Le,
                J,
                ye * Ie,
                (Q + oe / he.locationSize * X) * Ie
              );
            }
          } else {
            if (k.isInstancedBufferAttribute) {
              for (let re = 0; re < he.locationSize; re++) {
                S(he.location + re, k.meshPerAttribute);
              }
              if (F.isInstancedMesh !== true && Z._maxInstanceCount === void 0) {
                Z._maxInstanceCount = k.meshPerAttribute * k.count;
              }
            } else {
              for (let re = 0; re < he.locationSize; re++) {
                M(he.location + re);
              }
            }
            r.bindBuffer(r.ARRAY_BUFFER, L);
            for (let re = 0; re < he.locationSize; re++) {
              C(
                he.location + re,
                oe / he.locationSize,
                Le,
                J,
                oe * Ie,
                oe / he.locationSize * re * Ie
              );
            }
          }
        } else if (te !== void 0) {
          const J = te[pe];
          if (J !== void 0) {
            switch (J.length) {
              case 2:
                r.vertexAttrib2fv(he.location, J);
                break;
              case 3:
                r.vertexAttrib3fv(he.location, J);
                break;
              case 4:
                r.vertexAttrib4fv(he.location, J);
                break;
              default:
                r.vertexAttrib1fv(he.location, J);
            }
          }
        }
      }
    }
    E();
  }
  function y() {
    G();
    for (const F in o) {
      const z = o[F];
      for (const K in z) {
        const Z = z[K];
        for (const Y in Z) {
          m(Z[Y].object);
          delete Z[Y];
        }
        delete z[K];
      }
      delete o[F];
    }
  }
  function A(F) {
    if (o[F.id] === void 0)
      return;
    const z = o[F.id];
    for (const K in z) {
      const Z = z[K];
      for (const Y in Z) {
        m(Z[Y].object);
        delete Z[Y];
      }
      delete z[K];
    }
    delete o[F.id];
  }
  function O(F) {
    for (const z in o) {
      const K = o[z];
      if (K[F.id] === void 0)
        continue;
      const Z = K[F.id];
      for (const Y in Z) {
        m(Z[Y].object);
        delete Z[Y];
      }
      delete K[F.id];
    }
  }
  function G() {
    U();
    h = true;
    if (l === c)
      return;
    l = c;
    f(l.object);
  }
  function U() {
    c.geometry = null;
    c.program = null;
    c.wireframe = false;
  }
  return {
    setup: u,
    reset: G,
    resetDefaultState: U,
    dispose: y,
    releaseStatesOfGeometry: A,
    releaseStatesOfProgram: O,
    initAttributes: x,
    enableAttribute: M,
    disableUnusedAttributes: E
  };
}
function F_(r, e, t, n) {
  const i = n.isWebGL2;
  let s;
  function a(l) {
    s = l;
  }
  function o(l, h) {
    r.drawArrays(s, l, h);
    t.update(h, s, 1);
  }
  function c(l, h, u) {
    if (u === 0)
      return;
    let d, f;
    if (i) {
      d = r;
      f = "drawArraysInstanced";
    } else {
      d = e.get("ANGLE_instanced_arrays");
      f = "drawArraysInstancedANGLE";
      if (d === null) {
        console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        return;
      }
    }
    d[f](s, l, h, u);
    t.update(h, s, u);
  }
  this.setMode = a;
  this.render = o;
  this.renderInstances = c;
}
function O_(r, e, t) {
  let n;
  function i() {
    if (n !== void 0)
      return n;
    if (e.has("EXT_texture_filter_anisotropic") === true) {
      const C = e.get("EXT_texture_filter_anisotropic");
      n = r.getParameter(C.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      n = 0;
    }
    return n;
  }
  function s(C) {
    if (C === "highp") {
      if (r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.HIGH_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.HIGH_FLOAT).precision > 0) {
        return "highp";
      }
      C = "mediump";
    }
    if (C === "mediump") {
      if (r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.MEDIUM_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.MEDIUM_FLOAT).precision > 0) {
        return "mediump";
      }
    }
    return "lowp";
  }
  const a = typeof WebGL2RenderingContext !== "undefined" && r.constructor.name === "WebGL2RenderingContext";
  let o = t.precision !== void 0 ? t.precision : "highp";
  const c = s(o);
  if (c !== o) {
    console.warn("THREE.WebGLRenderer:", o, "not supported, using", c, "instead.");
    o = c;
  }
  const l = a || e.has("WEBGL_draw_buffers");
  const h = t.logarithmicDepthBuffer === true;
  const u = r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS);
  const d = r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
  const f = r.getParameter(r.MAX_TEXTURE_SIZE);
  const m = r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE);
  const _ = r.getParameter(r.MAX_VERTEX_ATTRIBS);
  const g = r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS);
  const p = r.getParameter(r.MAX_VARYING_VECTORS);
  const v = r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS);
  const x = d > 0;
  const M = a || e.has("OES_texture_float");
  const S = x && M;
  const E = a ? r.getParameter(r.MAX_SAMPLES) : 0;
  return {
    isWebGL2: a,
    drawBuffers: l,
    getMaxAnisotropy: i,
    getMaxPrecision: s,
    precision: o,
    logarithmicDepthBuffer: h,
    maxTextures: u,
    maxVertexTextures: d,
    maxTextureSize: f,
    maxCubemapSize: m,
    maxAttributes: _,
    maxVertexUniforms: g,
    maxVaryings: p,
    maxFragmentUniforms: v,
    vertexTextures: x,
    floatFragmentTextures: M,
    floatVertexTextures: S,
    maxSamples: E
  };
}
function B_(r) {
  const e = this;
  let t = null, n = 0, i = false, s = false;
  const a = new cn(), o = new Ge(), c = { value: null, needsUpdate: false };
  this.uniform = c;
  this.numPlanes = 0;
  this.numIntersection = 0;
  this.init = function(u, d) {
    const f = u.length !== 0 || d || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    n !== 0 || i;
    i = d;
    n = u.length;
    return f;
  };
  this.beginShadows = function() {
    s = true;
    h(null);
  };
  this.endShadows = function() {
    s = false;
  };
  this.setGlobalState = function(u, d) {
    t = h(u, d, 0);
  };
  this.setState = function(u, d, f) {
    const m = u.clippingPlanes, _ = u.clipIntersection, g = u.clipShadows;
    const p = r.get(u);
    if (!i || m === null || m.length === 0 || s && !g) {
      if (s) {
        h(null);
      } else {
        l();
      }
    } else {
      const v = s ? 0 : n, x = v * 4;
      let M = p.clippingState || null;
      c.value = M;
      M = h(m, d, x, f);
      for (let S = 0; S !== x; ++S) {
        M[S] = t[S];
      }
      p.clippingState = M;
      this.numIntersection = _ ? this.numPlanes : 0;
      this.numPlanes += v;
    }
  };
  function l() {
    if (c.value !== t) {
      c.value = t;
      c.needsUpdate = n > 0;
    }
    e.numPlanes = n;
    e.numIntersection = 0;
  }
  function h(u, d, f, m) {
    const _ = u !== null ? u.length : 0;
    let g = null;
    if (_ !== 0) {
      g = c.value;
      if (m !== true || g === null) {
        const p = f + _ * 4, v = d.matrixWorldInverse;
        o.getNormalMatrix(v);
        if (g === null || g.length < p) {
          g = new Float32Array(p);
        }
        for (let x = 0, M = f; x !== _; ++x, M += 4) {
          a.copy(u[x]).applyMatrix4(v, o);
          a.normal.toArray(g, M);
          g[M + 3] = a.constant;
        }
      }
      c.value = g;
      c.needsUpdate = true;
    }
    e.numPlanes = _;
    e.numIntersection = 0;
    return g;
  }
}
function z_(r) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(a, o) {
    if (o === Vs) {
      a.mapping = Wn;
    } else if (o === Hs) {
      a.mapping = Xn;
    }
    return a;
  }
  function n(a) {
    if (a && a.isTexture && a.isRenderTargetTexture === false) {
      const o = a.mapping;
      if (o === Vs || o === Hs) {
        if (e.has(a)) {
          const c = e.get(a).texture;
          return t(c, a.mapping);
        } else {
          const c = a.image;
          if (c && c.height > 0) {
            const l = new Da(c.height / 2);
            l.fromEquirectangularTexture(r, a);
            e.set(a, l);
            a.addEventListener("dispose", i);
            return t(l.texture, a.mapping);
          } else {
            return null;
          }
        }
      }
    }
    return a;
  }
  function i(a) {
    const o = a.target;
    o.removeEventListener("dispose", i);
    const c = e.get(o);
    if (c !== void 0) {
      e.delete(o);
      c.dispose();
    }
  }
  function s() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: s
  };
}
var ds = class extends ls {
  constructor(e = -1, t = 1, n = 1, i = -1, s = 0.1, a = 2e3) {
    super();
    this.isOrthographicCamera = true;
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = e;
    this.right = t;
    this.top = n;
    this.bottom = i;
    this.near = s;
    this.far = a;
    this.updateProjectionMatrix();
  }
  copy(e, t) {
    super.copy(e, t);
    this.left = e.left;
    this.right = e.right;
    this.top = e.top;
    this.bottom = e.bottom;
    this.near = e.near;
    this.far = e.far;
    this.zoom = e.zoom;
    this.view = e.view === null ? null : Object.assign({}, e.view);
    return this;
  }
  setViewOffset(e, t, n, i, s, a) {
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = e;
    this.view.fullHeight = t;
    this.view.offsetX = n;
    this.view.offsetY = i;
    this.view.width = s;
    this.view.height = a;
    this.updateProjectionMatrix();
  }
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom);
    const t = (this.top - this.bottom) / (2 * this.zoom);
    const n = (this.right + this.left) / 2;
    const i = (this.top + this.bottom) / 2;
    let s = n - e;
    let a = n + e;
    let o = i + t;
    let c = i - t;
    if (this.view !== null && this.view.enabled) {
      const l = (this.right - this.left) / this.view.fullWidth / this.zoom;
      const h = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      s += l * this.view.offsetX;
      a = s + l * this.view.width;
      o -= h * this.view.offsetY;
      c = o - h * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(s, a, o, c, this.near, this.far);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.object.zoom = this.zoom;
    t.object.left = this.left;
    t.object.right = this.right;
    t.object.top = this.top;
    t.object.bottom = this.bottom;
    t.object.near = this.near;
    t.object.far = this.far;
    if (this.view !== null)
      t.object.view = Object.assign({}, this.view);
    return t;
  }
};
var es = 4;
var ou = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
var ui = 20;
var tc = new ds();
var cu = new de();
var nc = null;
var li = (1 + Math.sqrt(5)) / 2;
var qi = 1 / li;
var lu = [
  new w(1, 1, 1),
  new w(-1, 1, 1),
  new w(1, 1, -1),
  new w(-1, 1, -1),
  new w(0, li, qi),
  new w(0, li, -qi),
  new w(qi, 0, li),
  new w(-qi, 0, li),
  new w(li, qi, 0),
  new w(-li, qi, 0)
];
var tr = class {
  constructor(e) {
    this._renderer = e;
    this._pingPongRenderTarget = null;
    this._lodMax = 0;
    this._cubeSize = 0;
    this._lodPlanes = [];
    this._sizeLods = [];
    this._sigmas = [];
    this._blurMaterial = null;
    this._cubemapMaterial = null;
    this._equirectMaterial = null;
    this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(e, t = 0, n = 0.1, i = 100) {
    nc = this._renderer.getRenderTarget();
    this._setSize(256);
    const s = this._allocateTargets();
    s.depthBuffer = true;
    this._sceneToCubeUV(e, n, i, s);
    if (t > 0) {
      this._blur(s, 0, 0, t);
    }
    this._applyPMREM(s);
    this._cleanup(s);
    return s;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    if (this._cubemapMaterial === null) {
      this._cubemapMaterial = du();
      this._compileMaterial(this._cubemapMaterial);
    }
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    if (this._equirectMaterial === null) {
      this._equirectMaterial = uu();
      this._compileMaterial(this._equirectMaterial);
    }
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose();
    if (this._cubemapMaterial !== null)
      this._cubemapMaterial.dispose();
    if (this._equirectMaterial !== null)
      this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e));
    this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    if (this._blurMaterial !== null)
      this._blurMaterial.dispose();
    if (this._pingPongRenderTarget !== null)
      this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++) {
      this._lodPlanes[e].dispose();
    }
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(nc);
    e.scissorTest = false;
    ta(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    if (e.mapping === Wn || e.mapping === Xn) {
      this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width);
    } else {
      this._setSize(e.image.width / 4);
    }
    nc = this._renderer.getRenderTarget();
    const n = t || this._allocateTargets();
    this._textureToCubeUV(e, n);
    this._applyPMREM(n);
    this._cleanup(n);
    return n;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 16 * 7);
    const t = 4 * this._cubeSize;
    const n = {
      magFilter: lt,
      minFilter: lt,
      generateMipmaps: false,
      type: ss,
      format: Ft,
      colorSpace: tn,
      depthBuffer: false
    };
    const i = hu(e, t, n);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      if (this._pingPongRenderTarget !== null) {
        this._dispose();
      }
      this._pingPongRenderTarget = hu(e, t, n);
      const { _lodMax: s } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = k_(s));
      this._blurMaterial = V_(s, e, t);
    }
    return i;
  }
  _compileMaterial(e) {
    const t = new ft(this._lodPlanes[0], e);
    this._renderer.compile(t, tc);
  }
  _sceneToCubeUV(e, t, n, i) {
    const s = 90;
    const a = 1;
    const o = new dt(s, a, t, n);
    const c = [1, -1, 1, 1, 1, 1];
    const l = [1, 1, 1, -1, -1, -1];
    const h = this._renderer;
    const u = h.autoClear;
    const d = h.toneMapping;
    h.getClearColor(cu);
    h.toneMapping = hn;
    h.autoClear = false;
    const f = new dn({
      name: "PMREM.Background",
      side: Pt,
      depthWrite: false,
      depthTest: false
    });
    const m = new ft(new Zn(), f);
    let _ = false;
    const g = e.background;
    if (g) {
      if (g.isColor) {
        f.color.copy(g);
        e.background = null;
        _ = true;
      }
    } else {
      f.color.copy(cu);
      _ = true;
    }
    for (let p = 0; p < 6; p++) {
      const v = p % 3;
      if (v === 0) {
        o.up.set(0, c[p], 0);
        o.lookAt(l[p], 0, 0);
      } else if (v === 1) {
        o.up.set(0, 0, c[p]);
        o.lookAt(0, l[p], 0);
      } else {
        o.up.set(0, c[p], 0);
        o.lookAt(0, 0, l[p]);
      }
      const x = this._cubeSize;
      ta(i, v * x, p > 2 ? x : 0, x, x);
      h.setRenderTarget(i);
      if (_) {
        h.render(m, o);
      }
      h.render(e, o);
    }
    m.geometry.dispose();
    m.material.dispose();
    h.toneMapping = d;
    h.autoClear = u;
    e.background = g;
  }
  _textureToCubeUV(e, t) {
    const n = this._renderer;
    const i = e.mapping === Wn || e.mapping === Xn;
    if (i) {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = du();
      }
      this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === false ? -1 : 1;
    } else {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = uu();
      }
    }
    const s = i ? this._cubemapMaterial : this._equirectMaterial;
    const a = new ft(this._lodPlanes[0], s);
    const o = s.uniforms;
    o["envMap"].value = e;
    const c = this._cubeSize;
    ta(t, 0, 0, 3 * c, 2 * c);
    n.setRenderTarget(t);
    n.render(a, tc);
  }
  _applyPMREM(e) {
    const t = this._renderer;
    const n = t.autoClear;
    t.autoClear = false;
    for (let i = 1; i < this._lodPlanes.length; i++) {
      const s = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
      const a = lu[(i - 1) % lu.length];
      this._blur(e, i - 1, i, s, a);
    }
    t.autoClear = n;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(e, t, n, i, s) {
    const a = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      a,
      t,
      n,
      i,
      "latitudinal",
      s
    );
    this._halfBlur(
      a,
      e,
      n,
      n,
      i,
      "longitudinal",
      s
    );
  }
  _halfBlur(e, t, n, i, s, a, o) {
    const c = this._renderer;
    const l = this._blurMaterial;
    if (a !== "latitudinal" && a !== "longitudinal") {
      console.error(
        "blur direction must be either latitudinal or longitudinal!"
      );
    }
    const h = 3;
    const u = new ft(this._lodPlanes[i], l);
    const d = l.uniforms;
    const f = this._sizeLods[n] - 1;
    const m = isFinite(s) ? Math.PI / (2 * f) : 2 * Math.PI / (2 * ui - 1);
    const _ = s / m;
    const g = isFinite(s) ? 1 + Math.floor(h * _) : ui;
    if (g > ui) {
      console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${ui}`);
    }
    const p = [];
    let v = 0;
    for (let C = 0; C < ui; ++C) {
      const P = C / _;
      const y = Math.exp(-P * P / 2);
      p.push(y);
      if (C === 0) {
        v += y;
      } else if (C < g) {
        v += 2 * y;
      }
    }
    for (let C = 0; C < p.length; C++) {
      p[C] = p[C] / v;
    }
    d["envMap"].value = e.texture;
    d["samples"].value = g;
    d["weights"].value = p;
    d["latitudinal"].value = a === "latitudinal";
    if (o) {
      d["poleAxis"].value = o;
    }
    const { _lodMax: x } = this;
    d["dTheta"].value = m;
    d["mipInt"].value = x - n;
    const M = this._sizeLods[i];
    const S = 3 * M * (i > x - es ? i - x + es : 0);
    const E = 4 * (this._cubeSize - M);
    ta(t, S, E, 3 * M, 2 * M);
    c.setRenderTarget(t);
    c.render(u, tc);
  }
};
function k_(r) {
  const e = [];
  const t = [];
  const n = [];
  let i = r;
  const s = r - es + 1 + ou.length;
  for (let a = 0; a < s; a++) {
    const o = Math.pow(2, i);
    t.push(o);
    let c = 1 / o;
    if (a > r - es) {
      c = ou[a - r + es - 1];
    } else if (a === 0) {
      c = 0;
    }
    n.push(c);
    const l = 1 / (o - 2);
    const h = -l;
    const u = 1 + l;
    const d = [h, h, u, h, u, u, h, h, u, u, h, u];
    const f = 6;
    const m = 6;
    const _ = 3;
    const g = 2;
    const p = 1;
    const v = new Float32Array(_ * m * f);
    const x = new Float32Array(g * m * f);
    const M = new Float32Array(p * m * f);
    for (let E = 0; E < f; E++) {
      const C = E % 3 * 2 / 3 - 1;
      const P = E > 2 ? 0 : -1;
      const y = [
        C,
        P,
        0,
        C + 2 / 3,
        P,
        0,
        C + 2 / 3,
        P + 1,
        0,
        C,
        P,
        0,
        C + 2 / 3,
        P + 1,
        0,
        C,
        P + 1,
        0
      ];
      v.set(y, _ * m * E);
      x.set(d, g * m * E);
      const A = [E, E, E, E, E, E];
      M.set(A, p * m * E);
    }
    const S = new ze();
    S.setAttribute("position", new Ke(v, _));
    S.setAttribute("uv", new Ke(x, g));
    S.setAttribute("faceIndex", new Ke(M, p));
    e.push(S);
    if (i > es) {
      i--;
    }
  }
  return { lodPlanes: e, sizeLods: t, sigmas: n };
}
function hu(r, e, t) {
  const n = new zt(r, e, t);
  n.texture.mapping = ys;
  n.texture.name = "PMREM.cubeUv";
  n.scissorTest = true;
  return n;
}
function ta(r, e, t, n, i) {
  r.viewport.set(e, t, n, i);
  r.scissor.set(e, t, n, i);
}
function V_(r, e, t) {
  const n = new Float32Array(ui);
  const i = new w(0, 1, 0);
  const s = new Zt({
    name: "SphericalGaussianBlur",
    defines: {
      "n": ui,
      "CUBEUV_TEXEL_WIDTH": 1 / e,
      "CUBEUV_TEXEL_HEIGHT": 1 / t,
      "CUBEUV_MAX_MIP": `${r}.0`
    },
    uniforms: {
      "envMap": { value: null },
      "samples": { value: 1 },
      "weights": { value: n },
      "latitudinal": { value: false },
      "dTheta": { value: 0 },
      "mipInt": { value: 0 },
      "poleAxis": { value: i }
    },
    vertexShader: Nh(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: wn,
    depthTest: false,
    depthWrite: false
  });
  return s;
}
function uu() {
  return new Zt({
    name: "EquirectangularToCubeUV",
    uniforms: {
      "envMap": { value: null }
    },
    vertexShader: Nh(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: wn,
    depthTest: false,
    depthWrite: false
  });
}
function du() {
  return new Zt({
    name: "CubemapToCubeUV",
    uniforms: {
      "envMap": { value: null },
      "flipEnvMap": { value: -1 }
    },
    vertexShader: Nh(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: wn,
    depthTest: false,
    depthWrite: false
  });
}
function Nh() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function H_(r) {
  let e = /* @__PURE__ */ new WeakMap();
  let t = null;
  function n(o) {
    if (o && o.isTexture) {
      const c = o.mapping;
      const l = c === Vs || c === Hs;
      const h = c === Wn || c === Xn;
      if (l || h) {
        if (o.isRenderTargetTexture && o.needsPMREMUpdate === true) {
          o.needsPMREMUpdate = false;
          let u = e.get(o);
          if (t === null)
            t = new tr(r);
          u = l ? t.fromEquirectangular(o, u) : t.fromCubemap(o, u);
          e.set(o, u);
          return u.texture;
        } else {
          if (e.has(o)) {
            return e.get(o).texture;
          } else {
            const u = o.image;
            if (l && u && u.height > 0 || h && u && i(u)) {
              if (t === null)
                t = new tr(r);
              const d = l ? t.fromEquirectangular(o) : t.fromCubemap(o);
              e.set(o, d);
              o.addEventListener("dispose", s);
              return d.texture;
            } else {
              return null;
            }
          }
        }
      }
    }
    return o;
  }
  function i(o) {
    let c = 0;
    const l = 6;
    for (let h = 0; h < l; h++) {
      if (o[h] !== void 0)
        c++;
    }
    return c === l;
  }
  function s(o) {
    const c = o.target;
    c.removeEventListener("dispose", s);
    const l = e.get(c);
    if (l !== void 0) {
      e.delete(c);
      l.dispose();
    }
  }
  function a() {
    e = /* @__PURE__ */ new WeakMap();
    if (t !== null) {
      t.dispose();
      t = null;
    }
  }
  return {
    get: n,
    dispose: a
  };
}
function G_(r) {
  const e = {};
  function t(n) {
    if (e[n] !== void 0) {
      return e[n];
    }
    let i;
    switch (n) {
      case "WEBGL_depth_texture":
        i = r.getExtension("WEBGL_depth_texture") || r.getExtension("MOZ_WEBGL_depth_texture") || r.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        i = r.getExtension("EXT_texture_filter_anisotropic") || r.getExtension("MOZ_EXT_texture_filter_anisotropic") || r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        i = r.getExtension("WEBGL_compressed_texture_s3tc") || r.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        i = r.getExtension("WEBGL_compressed_texture_pvrtc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        i = r.getExtension(n);
    }
    e[n] = i;
    return i;
  }
  return {
    has: function(n) {
      return t(n) !== null;
    },
    init: function(n) {
      if (n.isWebGL2) {
        t("EXT_color_buffer_float");
      } else {
        t("WEBGL_depth_texture");
        t("OES_texture_float");
        t("OES_texture_half_float");
        t("OES_texture_half_float_linear");
        t("OES_standard_derivatives");
        t("OES_element_index_uint");
        t("OES_vertex_array_object");
        t("ANGLE_instanced_arrays");
      }
      t("OES_texture_float_linear");
      t("EXT_color_buffer_half_float");
      t("WEBGL_multisampled_render_to_texture");
    },
    get: function(n) {
      const i = t(n);
      if (i === null) {
        console.warn("THREE.WebGLRenderer: " + n + " extension not supported.");
      }
      return i;
    }
  };
}
function W_(r, e, t, n) {
  const i = {};
  const s = /* @__PURE__ */ new WeakMap();
  function a(u) {
    const d = u.target;
    if (d.index !== null) {
      e.remove(d.index);
    }
    for (const m in d.attributes) {
      e.remove(d.attributes[m]);
    }
    d.removeEventListener("dispose", a);
    delete i[d.id];
    const f = s.get(d);
    if (f) {
      e.remove(f);
      s.delete(d);
    }
    n.releaseStatesOfGeometry(d);
    if (d.isInstancedBufferGeometry === true) {
      delete d._maxInstanceCount;
    }
    t.memory.geometries--;
  }
  function o(u, d) {
    if (i[d.id] === true)
      return d;
    d.addEventListener("dispose", a);
    i[d.id] = true;
    t.memory.geometries++;
    return d;
  }
  function c(u) {
    const d = u.attributes;
    for (const m in d) {
      e.update(d[m], r.ARRAY_BUFFER);
    }
    const f = u.morphAttributes;
    for (const m in f) {
      const _ = f[m];
      for (let g = 0, p = _.length; g < p; g++) {
        e.update(_[g], r.ARRAY_BUFFER);
      }
    }
  }
  function l(u) {
    const d = [];
    const f = u.index;
    const m = u.attributes.position;
    let _ = 0;
    if (f !== null) {
      const v = f.array;
      _ = f.version;
      for (let x = 0, M = v.length; x < M; x += 3) {
        const S = v[x + 0];
        const E = v[x + 1];
        const C = v[x + 2];
        d.push(S, E, E, C, C, S);
      }
    } else {
      const v = m.array;
      _ = m.version;
      for (let x = 0, M = v.length / 3 - 1; x < M; x += 3) {
        const S = x + 0;
        const E = x + 1;
        const C = x + 2;
        d.push(S, E, E, C, C, S);
      }
    }
    const g = new (gf(d) ? er : Qs)(d, 1);
    g.version = _;
    const p = s.get(u);
    if (p)
      e.remove(p);
    s.set(u, g);
  }
  function h(u) {
    const d = s.get(u);
    if (d) {
      const f = u.index;
      if (f !== null) {
        if (d.version < f.version) {
          l(u);
        }
      }
    } else {
      l(u);
    }
    return s.get(u);
  }
  return {
    get: o,
    update: c,
    getWireframeAttribute: h
  };
}
function X_(r, e, t, n) {
  const i = n.isWebGL2;
  let s;
  function a(d) {
    s = d;
  }
  let o, c;
  function l(d) {
    o = d.type;
    c = d.bytesPerElement;
  }
  function h(d, f) {
    r.drawElements(s, f, o, d * c);
    t.update(f, s, 1);
  }
  function u(d, f, m) {
    if (m === 0)
      return;
    let _, g;
    if (i) {
      _ = r;
      g = "drawElementsInstanced";
    } else {
      _ = e.get("ANGLE_instanced_arrays");
      g = "drawElementsInstancedANGLE";
      if (_ === null) {
        console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        return;
      }
    }
    _[g](s, f, o, d * c, m);
    t.update(f, s, m);
  }
  this.setMode = a;
  this.setIndex = l;
  this.render = h;
  this.renderInstances = u;
}
function q_(r) {
  const e = {
    geometries: 0,
    textures: 0
  };
  const t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function n(s, a, o) {
    t.calls++;
    switch (a) {
      case r.TRIANGLES:
        t.triangles += o * (s / 3);
        break;
      case r.LINES:
        t.lines += o * (s / 2);
        break;
      case r.LINE_STRIP:
        t.lines += o * (s - 1);
        break;
      case r.LINE_LOOP:
        t.lines += o * s;
        break;
      case r.POINTS:
        t.points += o * s;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", a);
        break;
    }
  }
  function i() {
    t.frame++;
    t.calls = 0;
    t.triangles = 0;
    t.points = 0;
    t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: true,
    reset: i,
    update: n
  };
}
function Y_(r, e) {
  return r[0] - e[0];
}
function Z_(r, e) {
  return Math.abs(e[1]) - Math.abs(r[1]);
}
function J_(r, e, t) {
  const n = {};
  const i = new Float32Array(8);
  const s = /* @__PURE__ */ new WeakMap();
  const a = new $e();
  const o = [];
  for (let l = 0; l < 8; l++) {
    o[l] = [l, 0];
  }
  function c(l, h, u) {
    const d = l.morphTargetInfluences;
    if (e.isWebGL2 === true) {
      const f = h.morphAttributes.position || h.morphAttributes.normal || h.morphAttributes.color;
      const m = f !== void 0 ? f.length : 0;
      let _ = s.get(h);
      if (_ === void 0 || _.count !== m) {
        let F = function() {
          G.dispose();
          s.delete(h);
          h.removeEventListener("dispose", F);
        };
        if (_ !== void 0)
          _.texture.dispose();
        const v = h.morphAttributes.position !== void 0;
        const x = h.morphAttributes.normal !== void 0;
        const M = h.morphAttributes.color !== void 0;
        const S = h.morphAttributes.position || [];
        const E = h.morphAttributes.normal || [];
        const C = h.morphAttributes.color || [];
        let P = 0;
        if (v === true)
          P = 1;
        if (x === true)
          P = 2;
        if (M === true)
          P = 3;
        let y = h.attributes.position.count * P;
        let A = 1;
        if (y > e.maxTextureSize) {
          A = Math.ceil(y / e.maxTextureSize);
          y = e.maxTextureSize;
        }
        const O = new Float32Array(y * A * 4 * m);
        const G = new as(O, y, A, m);
        G.type = bn;
        G.needsUpdate = true;
        const U = P * 4;
        for (let z = 0; z < m; z++) {
          const K = S[z];
          const Z = E[z];
          const Y = C[z];
          const j = y * A * 4 * z;
          for (let te = 0; te < K.count; te++) {
            const pe = te * U;
            if (v === true) {
              a.fromBufferAttribute(K, te);
              O[j + pe + 0] = a.x;
              O[j + pe + 1] = a.y;
              O[j + pe + 2] = a.z;
              O[j + pe + 3] = 0;
            }
            if (x === true) {
              a.fromBufferAttribute(Z, te);
              O[j + pe + 4] = a.x;
              O[j + pe + 5] = a.y;
              O[j + pe + 6] = a.z;
              O[j + pe + 7] = 0;
            }
            if (M === true) {
              a.fromBufferAttribute(Y, te);
              O[j + pe + 8] = a.x;
              O[j + pe + 9] = a.y;
              O[j + pe + 10] = a.z;
              O[j + pe + 11] = Y.itemSize === 4 ? a.w : 1;
            }
          }
        }
        _ = {
          count: m,
          texture: G,
          size: new $(y, A)
        };
        s.set(h, _);
        h.addEventListener("dispose", F);
      }
      let g = 0;
      for (let v = 0; v < d.length; v++) {
        g += d[v];
      }
      const p = h.morphTargetsRelative ? 1 : 1 - g;
      u.getUniforms().setValue(r, "morphTargetBaseInfluence", p);
      u.getUniforms().setValue(r, "morphTargetInfluences", d);
      u.getUniforms().setValue(r, "morphTargetsTexture", _.texture, t);
      u.getUniforms().setValue(r, "morphTargetsTextureSize", _.size);
    } else {
      const f = d === void 0 ? 0 : d.length;
      let m = n[h.id];
      if (m === void 0 || m.length !== f) {
        m = [];
        for (let x = 0; x < f; x++) {
          m[x] = [x, 0];
        }
        n[h.id] = m;
      }
      for (let x = 0; x < f; x++) {
        const M = m[x];
        M[0] = x;
        M[1] = d[x];
      }
      m.sort(Z_);
      for (let x = 0; x < 8; x++) {
        if (x < f && m[x][1]) {
          o[x][0] = m[x][0];
          o[x][1] = m[x][1];
        } else {
          o[x][0] = Number.MAX_SAFE_INTEGER;
          o[x][1] = 0;
        }
      }
      o.sort(Y_);
      const _ = h.morphAttributes.position;
      const g = h.morphAttributes.normal;
      let p = 0;
      for (let x = 0; x < 8; x++) {
        const M = o[x];
        const S = M[0];
        const E = M[1];
        if (S !== Number.MAX_SAFE_INTEGER && E) {
          if (_ && h.getAttribute("morphTarget" + x) !== _[S]) {
            h.setAttribute("morphTarget" + x, _[S]);
          }
          if (g && h.getAttribute("morphNormal" + x) !== g[S]) {
            h.setAttribute("morphNormal" + x, g[S]);
          }
          i[x] = E;
          p += E;
        } else {
          if (_ && h.hasAttribute("morphTarget" + x) === true) {
            h.deleteAttribute("morphTarget" + x);
          }
          if (g && h.hasAttribute("morphNormal" + x) === true) {
            h.deleteAttribute("morphNormal" + x);
          }
          i[x] = 0;
        }
      }
      const v = h.morphTargetsRelative ? 1 : 1 - p;
      u.getUniforms().setValue(r, "morphTargetBaseInfluence", v);
      u.getUniforms().setValue(r, "morphTargetInfluences", i);
    }
  }
  return {
    update: c
  };
}
function $_(r, e, t, n) {
  let i = /* @__PURE__ */ new WeakMap();
  function s(c) {
    const l = n.render.frame;
    const h = c.geometry;
    const u = e.get(c, h);
    if (i.get(u) !== l) {
      e.update(u);
      i.set(u, l);
    }
    if (c.isInstancedMesh) {
      if (c.hasEventListener("dispose", o) === false) {
        c.addEventListener("dispose", o);
      }
      t.update(c.instanceMatrix, r.ARRAY_BUFFER);
      if (c.instanceColor !== null) {
        t.update(c.instanceColor, r.ARRAY_BUFFER);
      }
    }
    return u;
  }
  function a() {
    i = /* @__PURE__ */ new WeakMap();
  }
  function o(c) {
    const l = c.target;
    l.removeEventListener("dispose", o);
    t.remove(l.instanceMatrix);
    if (l.instanceColor !== null)
      t.remove(l.instanceColor);
  }
  return {
    update: s,
    dispose: a
  };
}
var Mf = new pt();
var Sf = new as();
var bf = new Ks();
var Ef = new yi();
var fu = [];
var pu = [];
var mu = new Float32Array(16);
var gu = new Float32Array(9);
var _u = new Float32Array(4);
function Ms(r, e, t) {
  const n = r[0];
  if (n <= 0 || n > 0)
    return r;
  const i = e * t;
  let s = fu[i];
  if (s === void 0) {
    s = new Float32Array(i);
    fu[i] = s;
  }
  if (e !== 0) {
    n.toArray(s, 0);
    for (let a = 1, o = 0; a !== e; ++a) {
      o += t;
      r[a].toArray(s, o);
    }
  }
  return s;
}
function mt(r, e) {
  if (r.length !== e.length)
    return false;
  for (let t = 0, n = r.length; t < n; t++) {
    if (r[t] !== e[t])
      return false;
  }
  return true;
}
function gt(r, e) {
  for (let t = 0, n = e.length; t < n; t++) {
    r[t] = e[t];
  }
}
function Io(r, e) {
  let t = pu[e];
  if (t === void 0) {
    t = new Int32Array(e);
    pu[e] = t;
  }
  for (let n = 0; n !== e; ++n) {
    t[n] = r.allocateTextureUnit();
  }
  return t;
}
function K_(r, e) {
  const t = this.cache;
  if (t[0] === e)
    return;
  r.uniform1f(this.addr, e);
  t[0] = e;
}
function j_(r, e) {
  const t = this.cache;
  if (e.x !== void 0) {
    if (t[0] !== e.x || t[1] !== e.y) {
      r.uniform2f(this.addr, e.x, e.y);
      t[0] = e.x;
      t[1] = e.y;
    }
  } else {
    if (mt(t, e))
      return;
    r.uniform2fv(this.addr, e);
    gt(t, e);
  }
}
function Q_(r, e) {
  const t = this.cache;
  if (e.x !== void 0) {
    if (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) {
      r.uniform3f(this.addr, e.x, e.y, e.z);
      t[0] = e.x;
      t[1] = e.y;
      t[2] = e.z;
    }
  } else if (e.r !== void 0) {
    if (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) {
      r.uniform3f(this.addr, e.r, e.g, e.b);
      t[0] = e.r;
      t[1] = e.g;
      t[2] = e.b;
    }
  } else {
    if (mt(t, e))
      return;
    r.uniform3fv(this.addr, e);
    gt(t, e);
  }
}
function e0(r, e) {
  const t = this.cache;
  if (e.x !== void 0) {
    if (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) {
      r.uniform4f(this.addr, e.x, e.y, e.z, e.w);
      t[0] = e.x;
      t[1] = e.y;
      t[2] = e.z;
      t[3] = e.w;
    }
  } else {
    if (mt(t, e))
      return;
    r.uniform4fv(this.addr, e);
    gt(t, e);
  }
}
function t0(r, e) {
  const t = this.cache;
  const n = e.elements;
  if (n === void 0) {
    if (mt(t, e))
      return;
    r.uniformMatrix2fv(this.addr, false, e);
    gt(t, e);
  } else {
    if (mt(t, n))
      return;
    _u.set(n);
    r.uniformMatrix2fv(this.addr, false, _u);
    gt(t, n);
  }
}
function n0(r, e) {
  const t = this.cache;
  const n = e.elements;
  if (n === void 0) {
    if (mt(t, e))
      return;
    r.uniformMatrix3fv(this.addr, false, e);
    gt(t, e);
  } else {
    if (mt(t, n))
      return;
    gu.set(n);
    r.uniformMatrix3fv(this.addr, false, gu);
    gt(t, n);
  }
}
function i0(r, e) {
  const t = this.cache;
  const n = e.elements;
  if (n === void 0) {
    if (mt(t, e))
      return;
    r.uniformMatrix4fv(this.addr, false, e);
    gt(t, e);
  } else {
    if (mt(t, n))
      return;
    mu.set(n);
    r.uniformMatrix4fv(this.addr, false, mu);
    gt(t, n);
  }
}
function s0(r, e) {
  const t = this.cache;
  if (t[0] === e)
    return;
  r.uniform1i(this.addr, e);
  t[0] = e;
}
function r0(r, e) {
  const t = this.cache;
  if (e.x !== void 0) {
    if (t[0] !== e.x || t[1] !== e.y) {
      r.uniform2i(this.addr, e.x, e.y);
      t[0] = e.x;
      t[1] = e.y;
    }
  } else {
    if (mt(t, e))
      return;
    r.uniform2iv(this.addr, e);
    gt(t, e);
  }
}
function a0(r, e) {
  const t = this.cache;
  if (e.x !== void 0) {
    if (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) {
      r.uniform3i(this.addr, e.x, e.y, e.z);
      t[0] = e.x;
      t[1] = e.y;
      t[2] = e.z;
    }
  } else {
    if (mt(t, e))
      return;
    r.uniform3iv(this.addr, e);
    gt(t, e);
  }
}
function o0(r, e) {
  const t = this.cache;
  if (e.x !== void 0) {
    if (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) {
      r.uniform4i(this.addr, e.x, e.y, e.z, e.w);
      t[0] = e.x;
      t[1] = e.y;
      t[2] = e.z;
      t[3] = e.w;
    }
  } else {
    if (mt(t, e))
      return;
    r.uniform4iv(this.addr, e);
    gt(t, e);
  }
}
function c0(r, e) {
  const t = this.cache;
  if (t[0] === e)
    return;
  r.uniform1ui(this.addr, e);
  t[0] = e;
}
function l0(r, e) {
  const t = this.cache;
  if (e.x !== void 0) {
    if (t[0] !== e.x || t[1] !== e.y) {
      r.uniform2ui(this.addr, e.x, e.y);
      t[0] = e.x;
      t[1] = e.y;
    }
  } else {
    if (mt(t, e))
      return;
    r.uniform2uiv(this.addr, e);
    gt(t, e);
  }
}
function h0(r, e) {
  const t = this.cache;
  if (e.x !== void 0) {
    if (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) {
      r.uniform3ui(this.addr, e.x, e.y, e.z);
      t[0] = e.x;
      t[1] = e.y;
      t[2] = e.z;
    }
  } else {
    if (mt(t, e))
      return;
    r.uniform3uiv(this.addr, e);
    gt(t, e);
  }
}
function u0(r, e) {
  const t = this.cache;
  if (e.x !== void 0) {
    if (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) {
      r.uniform4ui(this.addr, e.x, e.y, e.z, e.w);
      t[0] = e.x;
      t[1] = e.y;
      t[2] = e.z;
      t[3] = e.w;
    }
  } else {
    if (mt(t, e))
      return;
    r.uniform4uiv(this.addr, e);
    gt(t, e);
  }
}
function d0(r, e, t) {
  const n = this.cache;
  const i = t.allocateTextureUnit();
  if (n[0] !== i) {
    r.uniform1i(this.addr, i);
    n[0] = i;
  }
  t.setTexture2D(e || Mf, i);
}
function f0(r, e, t) {
  const n = this.cache;
  const i = t.allocateTextureUnit();
  if (n[0] !== i) {
    r.uniform1i(this.addr, i);
    n[0] = i;
  }
  t.setTexture3D(e || bf, i);
}
function p0(r, e, t) {
  const n = this.cache;
  const i = t.allocateTextureUnit();
  if (n[0] !== i) {
    r.uniform1i(this.addr, i);
    n[0] = i;
  }
  t.setTextureCube(e || Ef, i);
}
function m0(r, e, t) {
  const n = this.cache;
  const i = t.allocateTextureUnit();
  if (n[0] !== i) {
    r.uniform1i(this.addr, i);
    n[0] = i;
  }
  t.setTexture2DArray(e || Sf, i);
}
function g0(r) {
  switch (r) {
    case 5126:
      return K_;
    case 35664:
      return j_;
    case 35665:
      return Q_;
    case 35666:
      return e0;
    case 35674:
      return t0;
    case 35675:
      return n0;
    case 35676:
      return i0;
    case 5124:
    case 35670:
      return s0;
    case 35667:
    case 35671:
      return r0;
    case 35668:
    case 35672:
      return a0;
    case 35669:
    case 35673:
      return o0;
    case 5125:
      return c0;
    case 36294:
      return l0;
    case 36295:
      return h0;
    case 36296:
      return u0;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return d0;
    case 35679:
    case 36299:
    case 36307:
      return f0;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return p0;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return m0;
  }
}
function _0(r, e) {
  r.uniform1fv(this.addr, e);
}
function x0(r, e) {
  const t = Ms(e, this.size, 2);
  r.uniform2fv(this.addr, t);
}
function v0(r, e) {
  const t = Ms(e, this.size, 3);
  r.uniform3fv(this.addr, t);
}
function y0(r, e) {
  const t = Ms(e, this.size, 4);
  r.uniform4fv(this.addr, t);
}
function M0(r, e) {
  const t = Ms(e, this.size, 4);
  r.uniformMatrix2fv(this.addr, false, t);
}
function S0(r, e) {
  const t = Ms(e, this.size, 9);
  r.uniformMatrix3fv(this.addr, false, t);
}
function b0(r, e) {
  const t = Ms(e, this.size, 16);
  r.uniformMatrix4fv(this.addr, false, t);
}
function E0(r, e) {
  r.uniform1iv(this.addr, e);
}
function T0(r, e) {
  r.uniform2iv(this.addr, e);
}
function w0(r, e) {
  r.uniform3iv(this.addr, e);
}
function A0(r, e) {
  r.uniform4iv(this.addr, e);
}
function R0(r, e) {
  r.uniform1uiv(this.addr, e);
}
function C0(r, e) {
  r.uniform2uiv(this.addr, e);
}
function P0(r, e) {
  r.uniform3uiv(this.addr, e);
}
function L0(r, e) {
  r.uniform4uiv(this.addr, e);
}
function I0(r, e, t) {
  const n = this.cache;
  const i = e.length;
  const s = Io(t, i);
  if (!mt(n, s)) {
    r.uniform1iv(this.addr, s);
    gt(n, s);
  }
  for (let a = 0; a !== i; ++a) {
    t.setTexture2D(e[a] || Mf, s[a]);
  }
}
function U0(r, e, t) {
  const n = this.cache;
  const i = e.length;
  const s = Io(t, i);
  if (!mt(n, s)) {
    r.uniform1iv(this.addr, s);
    gt(n, s);
  }
  for (let a = 0; a !== i; ++a) {
    t.setTexture3D(e[a] || bf, s[a]);
  }
}
function D0(r, e, t) {
  const n = this.cache;
  const i = e.length;
  const s = Io(t, i);
  if (!mt(n, s)) {
    r.uniform1iv(this.addr, s);
    gt(n, s);
  }
  for (let a = 0; a !== i; ++a) {
    t.setTextureCube(e[a] || Ef, s[a]);
  }
}
function N0(r, e, t) {
  const n = this.cache;
  const i = e.length;
  const s = Io(t, i);
  if (!mt(n, s)) {
    r.uniform1iv(this.addr, s);
    gt(n, s);
  }
  for (let a = 0; a !== i; ++a) {
    t.setTexture2DArray(e[a] || Sf, s[a]);
  }
}
function F0(r) {
  switch (r) {
    case 5126:
      return _0;
    case 35664:
      return x0;
    case 35665:
      return v0;
    case 35666:
      return y0;
    case 35674:
      return M0;
    case 35675:
      return S0;
    case 35676:
      return b0;
    case 5124:
    case 35670:
      return E0;
    case 35667:
    case 35671:
      return T0;
    case 35668:
    case 35672:
      return w0;
    case 35669:
    case 35673:
      return A0;
    case 5125:
      return R0;
    case 36294:
      return C0;
    case 36295:
      return P0;
    case 36296:
      return L0;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return I0;
    case 35679:
    case 36299:
    case 36307:
      return U0;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return D0;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return N0;
  }
}
var tl = class {
  constructor(e, t, n) {
    this.id = e;
    this.addr = n;
    this.cache = [];
    this.setValue = g0(t.type);
  }
};
var nl = class {
  constructor(e, t, n) {
    this.id = e;
    this.addr = n;
    this.cache = [];
    this.size = t.size;
    this.setValue = F0(t.type);
  }
};
var il = class {
  constructor(e) {
    this.id = e;
    this.seq = [];
    this.map = {};
  }
  setValue(e, t, n) {
    const i = this.seq;
    for (let s = 0, a = i.length; s !== a; ++s) {
      const o = i[s];
      o.setValue(e, t[o.id], n);
    }
  }
};
var ic = /(\w+)(\])?(\[|\.)?/g;
function xu(r, e) {
  r.seq.push(e);
  r.map[e.id] = e;
}
function O0(r, e, t) {
  const n = r.name, i = n.length;
  ic.lastIndex = 0;
  while (true) {
    const s = ic.exec(n), a = ic.lastIndex;
    let o = s[1];
    const c = s[2] === "]", l = s[3];
    if (c)
      o = o | 0;
    if (l === void 0 || l === "[" && a + 2 === i) {
      xu(t, l === void 0 ? new tl(o, r, e) : new nl(o, r, e));
      break;
    } else {
      const h = t.map;
      let u = h[o];
      if (u === void 0) {
        u = new il(o);
        xu(t, u);
      }
      t = u;
    }
  }
}
var is = class {
  constructor(e, t) {
    this.seq = [];
    this.map = {};
    const n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
    for (let i = 0; i < n; ++i) {
      const s = e.getActiveUniform(t, i), a = e.getUniformLocation(t, s.name);
      O0(s, a, this);
    }
  }
  setValue(e, t, n, i) {
    const s = this.map[t];
    if (s !== void 0)
      s.setValue(e, n, i);
  }
  setOptional(e, t, n) {
    const i = t[n];
    if (i !== void 0)
      this.setValue(e, n, i);
  }
  static upload(e, t, n, i) {
    for (let s = 0, a = t.length; s !== a; ++s) {
      const o = t[s], c = n[o.id];
      if (c.needsUpdate !== false) {
        o.setValue(e, c.value, i);
      }
    }
  }
  static seqWithValue(e, t) {
    const n = [];
    for (let i = 0, s = e.length; i !== s; ++i) {
      const a = e[i];
      if (a.id in t)
        n.push(a);
    }
    return n;
  }
};
function vu(r, e, t) {
  const n = r.createShader(e);
  r.shaderSource(n, t);
  r.compileShader(n);
  return n;
}
var B0 = 0;
function z0(r, e) {
  const t = r.split("\n");
  const n = [];
  const i = Math.max(e - 6, 0);
  const s = Math.min(e + 6, t.length);
  for (let a = i; a < s; a++) {
    const o = a + 1;
    n.push(`${o === e ? ">" : " "} ${o}: ${t[a]}`);
  }
  return n.join("\n");
}
function k0(r) {
  switch (r) {
    case tn:
      return ["Linear", "( value )"];
    case De:
      return ["sRGB", "( value )"];
    default:
      console.warn("THREE.WebGLProgram: Unsupported color space:", r);
      return ["Linear", "( value )"];
  }
}
function yu(r, e, t) {
  const n = r.getShaderParameter(e, r.COMPILE_STATUS);
  const i = r.getShaderInfoLog(e).trim();
  if (n && i === "")
    return "";
  const s = /ERROR: 0:(\d+)/.exec(i);
  if (s) {
    const a = parseInt(s[1]);
    return t.toUpperCase() + "\n\n" + i + "\n\n" + z0(r.getShaderSource(e), a);
  } else {
    return i;
  }
}
function V0(r, e) {
  const t = k0(e);
  return "vec4 " + r + "( vec4 value ) { return LinearTo" + t[0] + t[1] + "; }";
}
function H0(r, e) {
  let t;
  switch (e) {
    case kd:
      t = "Linear";
      break;
    case Vd:
      t = "Reinhard";
      break;
    case Hd:
      t = "OptimizedCineon";
      break;
    case Gd:
      t = "ACESFilmic";
      break;
    case Wd:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e);
      t = "Linear";
  }
  return "vec3 " + r + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function G0(r) {
  const e = [
    r.extensionDerivatives || !!r.envMapCubeUVHeight || r.bumpMap || r.normalMapTangentSpace || r.clearcoatNormalMap || r.flatShading || r.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
    (r.extensionFragDepth || r.logarithmicDepthBuffer) && r.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
    r.extensionDrawBuffers && r.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
    (r.extensionShaderTextureLOD || r.envMap || r.transmission) && r.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
  ];
  return e.filter(Ds).join("\n");
}
function W0(r) {
  const e = [];
  for (const t in r) {
    const n = r[t];
    if (n === false)
      continue;
    e.push("#define " + t + " " + n);
  }
  return e.join("\n");
}
function X0(r, e) {
  const t = {};
  const n = r.getProgramParameter(e, r.ACTIVE_ATTRIBUTES);
  for (let i = 0; i < n; i++) {
    const s = r.getActiveAttrib(e, i);
    const a = s.name;
    let o = 1;
    if (s.type === r.FLOAT_MAT2)
      o = 2;
    if (s.type === r.FLOAT_MAT3)
      o = 3;
    if (s.type === r.FLOAT_MAT4)
      o = 4;
    t[a] = {
      type: s.type,
      location: r.getAttribLocation(e, a),
      locationSize: o
    };
  }
  return t;
}
function Ds(r) {
  return r !== "";
}
function Mu(r, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return r.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function Su(r, e) {
  return r.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
var q0 = /^[ \t]*#include +<([\w\d./]+)>/gm;
function sl(r) {
  return r.replace(q0, Y0);
}
function Y0(r, e) {
  const t = Fe[e];
  if (t === void 0) {
    throw new Error("Can not resolve #include <" + e + ">");
  }
  return sl(t);
}
var Z0 = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function bu(r) {
  return r.replace(Z0, J0);
}
function J0(r, e, t, n) {
  let i = "";
  for (let s = parseInt(e); s < parseInt(t); s++) {
    i += n.replace(/\[\s*i\s*\]/g, "[ " + s + " ]").replace(/UNROLLED_LOOP_INDEX/g, s);
  }
  return i;
}
function Eu(r) {
  let e = "precision " + r.precision + " float;\nprecision " + r.precision + " int;";
  if (r.precision === "highp") {
    e += "\n#define HIGH_PRECISION";
  } else if (r.precision === "mediump") {
    e += "\n#define MEDIUM_PRECISION";
  } else if (r.precision === "lowp") {
    e += "\n#define LOW_PRECISION";
  }
  return e;
}
function $0(r) {
  let e = "SHADOWMAP_TYPE_BASIC";
  if (r.shadowMapType === wh) {
    e = "SHADOWMAP_TYPE_PCF";
  } else if (r.shadowMapType === xd) {
    e = "SHADOWMAP_TYPE_PCF_SOFT";
  } else if (r.shadowMapType === on) {
    e = "SHADOWMAP_TYPE_VSM";
  }
  return e;
}
function K0(r) {
  let e = "ENVMAP_TYPE_CUBE";
  if (r.envMap) {
    switch (r.envMapMode) {
      case Wn:
      case Xn:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case ys:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  }
  return e;
}
function j0(r) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (r.envMap) {
    switch (r.envMapMode) {
      case Xn:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  }
  return e;
}
function Q0(r) {
  let e = "ENVMAP_BLENDING_NONE";
  if (r.envMap) {
    switch (r.combine) {
      case Dr:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case Bd:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case zd:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  }
  return e;
}
function ex(r) {
  const e = r.envMapCubeUVHeight;
  if (e === null)
    return null;
  const t = Math.log2(e) - 2;
  const n = 1 / e;
  const i = 1 / (3 * Math.max(Math.pow(2, t), 7 * 16));
  return { texelWidth: i, texelHeight: n, maxMip: t };
}
function tx(r, e, t, n) {
  const i = r.getContext();
  const s = t.defines;
  let a = t.vertexShader;
  let o = t.fragmentShader;
  const c = $0(t);
  const l = K0(t);
  const h = j0(t);
  const u = Q0(t);
  const d = ex(t);
  const f = t.isWebGL2 ? "" : G0(t);
  const m = W0(s);
  const _ = i.createProgram();
  let g, p;
  let v = t.glslVersion ? "#version " + t.glslVersion + "\n" : "";
  if (t.isRawShaderMaterial) {
    g = [
      m
    ].filter(Ds).join("\n");
    if (g.length > 0) {
      g += "\n";
    }
    p = [
      f,
      m
    ].filter(Ds).join("\n");
    if (p.length > 0) {
      p += "\n";
    }
  } else {
    g = [
      Eu(t),
      "#define SHADER_NAME " + t.shaderName,
      m,
      t.instancing ? "#define USE_INSTANCING" : "",
      t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
      t.useFog && t.fog ? "#define USE_FOG" : "",
      t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
      t.map ? "#define USE_MAP" : "",
      t.envMap ? "#define USE_ENVMAP" : "",
      t.envMap ? "#define " + h : "",
      t.lightMap ? "#define USE_LIGHTMAP" : "",
      t.aoMap ? "#define USE_AOMAP" : "",
      t.bumpMap ? "#define USE_BUMPMAP" : "",
      t.normalMap ? "#define USE_NORMALMAP" : "",
      t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
      t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      t.specularMap ? "#define USE_SPECULARMAP" : "",
      t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      t.metalnessMap ? "#define USE_METALNESSMAP" : "",
      t.alphaMap ? "#define USE_ALPHAMAP" : "",
      t.transmission ? "#define USE_TRANSMISSION" : "",
      t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      //
      t.mapUv ? "#define MAP_UV " + t.mapUv : "",
      t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
      t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
      t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
      t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
      t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
      t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
      t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
      t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
      t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
      t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
      t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
      t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
      t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
      t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
      t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
      t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
      t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
      t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
      t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
      t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
      t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
      //
      t.vertexTangents ? "#define USE_TANGENT" : "",
      t.vertexColors ? "#define USE_COLOR" : "",
      t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      t.vertexUv1s ? "#define USE_UV1" : "",
      t.vertexUv2s ? "#define USE_UV2" : "",
      t.vertexUv3s ? "#define USE_UV3" : "",
      t.pointsUvs ? "#define USE_POINTS_UV" : "",
      t.flatShading ? "#define FLAT_SHADED" : "",
      t.skinning ? "#define USE_SKINNING" : "",
      t.morphTargets ? "#define USE_MORPHTARGETS" : "",
      t.morphNormals && t.flatShading === false ? "#define USE_MORPHNORMALS" : "",
      t.morphColors && t.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
      t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
      t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
      t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
      t.doubleSided ? "#define DOUBLE_SIDED" : "",
      t.flipSided ? "#define FLIP_SIDED" : "",
      t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      t.shadowMapEnabled ? "#define " + c : "",
      t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
      t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
      "uniform mat4 modelMatrix;",
      "uniform mat4 modelViewMatrix;",
      "uniform mat4 projectionMatrix;",
      "uniform mat4 viewMatrix;",
      "uniform mat3 normalMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      "#ifdef USE_INSTANCING",
      "	attribute mat4 instanceMatrix;",
      "#endif",
      "#ifdef USE_INSTANCING_COLOR",
      "	attribute vec3 instanceColor;",
      "#endif",
      "attribute vec3 position;",
      "attribute vec3 normal;",
      "attribute vec2 uv;",
      "#ifdef USE_UV1",
      "	attribute vec2 uv1;",
      "#endif",
      "#ifdef USE_UV2",
      "	attribute vec2 uv2;",
      "#endif",
      "#ifdef USE_UV3",
      "	attribute vec2 uv3;",
      "#endif",
      "#ifdef USE_TANGENT",
      "	attribute vec4 tangent;",
      "#endif",
      "#if defined( USE_COLOR_ALPHA )",
      "	attribute vec4 color;",
      "#elif defined( USE_COLOR )",
      "	attribute vec3 color;",
      "#endif",
      "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
      "	attribute vec3 morphTarget0;",
      "	attribute vec3 morphTarget1;",
      "	attribute vec3 morphTarget2;",
      "	attribute vec3 morphTarget3;",
      "	#ifdef USE_MORPHNORMALS",
      "		attribute vec3 morphNormal0;",
      "		attribute vec3 morphNormal1;",
      "		attribute vec3 morphNormal2;",
      "		attribute vec3 morphNormal3;",
      "	#else",
      "		attribute vec3 morphTarget4;",
      "		attribute vec3 morphTarget5;",
      "		attribute vec3 morphTarget6;",
      "		attribute vec3 morphTarget7;",
      "	#endif",
      "#endif",
      "#ifdef USE_SKINNING",
      "	attribute vec4 skinIndex;",
      "	attribute vec4 skinWeight;",
      "#endif",
      "\n"
    ].filter(Ds).join("\n");
    p = [
      f,
      Eu(t),
      "#define SHADER_NAME " + t.shaderName,
      m,
      t.useFog && t.fog ? "#define USE_FOG" : "",
      t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
      t.map ? "#define USE_MAP" : "",
      t.matcap ? "#define USE_MATCAP" : "",
      t.envMap ? "#define USE_ENVMAP" : "",
      t.envMap ? "#define " + l : "",
      t.envMap ? "#define " + h : "",
      t.envMap ? "#define " + u : "",
      d ? "#define CUBEUV_TEXEL_WIDTH " + d.texelWidth : "",
      d ? "#define CUBEUV_TEXEL_HEIGHT " + d.texelHeight : "",
      d ? "#define CUBEUV_MAX_MIP " + d.maxMip + ".0" : "",
      t.lightMap ? "#define USE_LIGHTMAP" : "",
      t.aoMap ? "#define USE_AOMAP" : "",
      t.bumpMap ? "#define USE_BUMPMAP" : "",
      t.normalMap ? "#define USE_NORMALMAP" : "",
      t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      t.clearcoat ? "#define USE_CLEARCOAT" : "",
      t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      t.iridescence ? "#define USE_IRIDESCENCE" : "",
      t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      t.specularMap ? "#define USE_SPECULARMAP" : "",
      t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      t.metalnessMap ? "#define USE_METALNESSMAP" : "",
      t.alphaMap ? "#define USE_ALPHAMAP" : "",
      t.alphaTest ? "#define USE_ALPHATEST" : "",
      t.sheen ? "#define USE_SHEEN" : "",
      t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      t.transmission ? "#define USE_TRANSMISSION" : "",
      t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      t.vertexTangents ? "#define USE_TANGENT" : "",
      t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
      t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      t.vertexUv1s ? "#define USE_UV1" : "",
      t.vertexUv2s ? "#define USE_UV2" : "",
      t.vertexUv3s ? "#define USE_UV3" : "",
      t.pointsUvs ? "#define USE_POINTS_UV" : "",
      t.gradientMap ? "#define USE_GRADIENTMAP" : "",
      t.flatShading ? "#define FLAT_SHADED" : "",
      t.doubleSided ? "#define DOUBLE_SIDED" : "",
      t.flipSided ? "#define FLIP_SIDED" : "",
      t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      t.shadowMapEnabled ? "#define " + c : "",
      t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
      t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
      t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
      "uniform mat4 viewMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      t.toneMapping !== hn ? "#define TONE_MAPPING" : "",
      t.toneMapping !== hn ? Fe["tonemapping_pars_fragment"] : "",
      // this code is required here because it is used by the toneMapping() function defined below
      t.toneMapping !== hn ? H0("toneMapping", t.toneMapping) : "",
      t.dithering ? "#define DITHERING" : "",
      t.opaque ? "#define OPAQUE" : "",
      Fe["encodings_pars_fragment"],
      // this code is required here because it is used by the various encoding/decoding function defined below
      V0("linearToOutputTexel", t.outputColorSpace),
      t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
      "\n"
    ].filter(Ds).join("\n");
  }
  a = sl(a);
  a = Mu(a, t);
  a = Su(a, t);
  o = sl(o);
  o = Mu(o, t);
  o = Su(o, t);
  a = bu(a);
  o = bu(o);
  if (t.isWebGL2 && t.isRawShaderMaterial !== true) {
    v = "#version 300 es\n";
    g = [
      "precision mediump sampler2DArray;",
      "#define attribute in",
      "#define varying out",
      "#define texture2D texture"
    ].join("\n") + "\n" + g;
    p = [
      "#define varying in",
      t.glslVersion === Gc ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
      t.glslVersion === Gc ? "" : "#define gl_FragColor pc_fragColor",
      "#define gl_FragDepthEXT gl_FragDepth",
      "#define texture2D texture",
      "#define textureCube texture",
      "#define texture2DProj textureProj",
      "#define texture2DLodEXT textureLod",
      "#define texture2DProjLodEXT textureProjLod",
      "#define textureCubeLodEXT textureLod",
      "#define texture2DGradEXT textureGrad",
      "#define texture2DProjGradEXT textureProjGrad",
      "#define textureCubeGradEXT textureGrad"
    ].join("\n") + "\n" + p;
  }
  const x = v + g + a;
  const M = v + p + o;
  const S = vu(i, i.VERTEX_SHADER, x);
  const E = vu(i, i.FRAGMENT_SHADER, M);
  i.attachShader(_, S);
  i.attachShader(_, E);
  if (t.index0AttributeName !== void 0) {
    i.bindAttribLocation(_, 0, t.index0AttributeName);
  } else if (t.morphTargets === true) {
    i.bindAttribLocation(_, 0, "position");
  }
  i.linkProgram(_);
  if (r.debug.checkShaderErrors) {
    const y = i.getProgramInfoLog(_).trim();
    const A = i.getShaderInfoLog(S).trim();
    const O = i.getShaderInfoLog(E).trim();
    let G = true;
    let U = true;
    if (i.getProgramParameter(_, i.LINK_STATUS) === false) {
      G = false;
      if (typeof r.debug.onShaderError === "function") {
        r.debug.onShaderError(i, _, S, E);
      } else {
        const F = yu(i, S, "vertex");
        const z = yu(i, E, "fragment");
        console.error(
          "THREE.WebGLProgram: Shader Error " + i.getError() + " - VALIDATE_STATUS " + i.getProgramParameter(_, i.VALIDATE_STATUS) + "\n\nProgram Info Log: " + y + "\n" + F + "\n" + z
        );
      }
    } else if (y !== "") {
      console.warn("THREE.WebGLProgram: Program Info Log:", y);
    } else if (A === "" || O === "") {
      U = false;
    }
    if (U) {
      this.diagnostics = {
        runnable: G,
        programLog: y,
        vertexShader: {
          log: A,
          prefix: g
        },
        fragmentShader: {
          log: O,
          prefix: p
        }
      };
    }
  }
  i.deleteShader(S);
  i.deleteShader(E);
  let C;
  this.getUniforms = function() {
    if (C === void 0) {
      C = new is(i, _);
    }
    return C;
  };
  let P;
  this.getAttributes = function() {
    if (P === void 0) {
      P = X0(i, _);
    }
    return P;
  };
  this.destroy = function() {
    n.releaseStatesOfProgram(this);
    i.deleteProgram(_);
    this.program = void 0;
  };
  this.name = t.shaderName;
  this.id = B0++;
  this.cacheKey = e;
  this.usedTimes = 1;
  this.program = _;
  this.vertexShader = S;
  this.fragmentShader = E;
  return this;
}
var nx = 0;
var rl = class {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map();
    this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader;
    const n = e.fragmentShader;
    const i = this._getShaderStage(t);
    const s = this._getShaderStage(n);
    const a = this._getShaderCacheForMaterial(e);
    if (a.has(i) === false) {
      a.add(i);
      i.usedTimes++;
    }
    if (a.has(s) === false) {
      a.add(s);
      s.usedTimes++;
    }
    return this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const n of t) {
      n.usedTimes--;
      if (n.usedTimes === 0)
        this.shaderCache.delete(n.code);
    }
    this.materialCache.delete(e);
    return this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear();
    this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let n = t.get(e);
    if (n === void 0) {
      n = /* @__PURE__ */ new Set();
      t.set(e, n);
    }
    return n;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let n = t.get(e);
    if (n === void 0) {
      n = new al(e);
      t.set(e, n);
    }
    return n;
  }
};
var al = class {
  constructor(e) {
    this.id = nx++;
    this.code = e;
    this.usedTimes = 0;
  }
};
function ix(r, e, t, n, i, s, a) {
  const o = new os();
  const c = new rl();
  const l = [];
  const h = i.isWebGL2;
  const u = i.logarithmicDepthBuffer;
  const d = i.vertexTextures;
  let f = i.precision;
  const m = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function _(y) {
    if (y === 1)
      return "uv1";
    if (y === 2)
      return "uv2";
    if (y === 3)
      return "uv3";
    return "uv";
  }
  function g(y, A, O, G, U) {
    const F = G.fog;
    const z = U.geometry;
    const K = y.isMeshStandardMaterial ? G.environment : null;
    const Z = (y.isMeshStandardMaterial ? t : e).get(y.envMap || K);
    const Y = !!Z && Z.mapping === ys ? Z.image.height : null;
    const j = m[y.type];
    if (y.precision !== null) {
      f = i.getMaxPrecision(y.precision);
      if (f !== y.precision) {
        console.warn("THREE.WebGLProgram.getParameters:", y.precision, "not supported, using", f, "instead.");
      }
    }
    const te = z.morphAttributes.position || z.morphAttributes.normal || z.morphAttributes.color;
    const pe = te !== void 0 ? te.length : 0;
    let he = 0;
    if (z.morphAttributes.position !== void 0)
      he = 1;
    if (z.morphAttributes.normal !== void 0)
      he = 2;
    if (z.morphAttributes.color !== void 0)
      he = 3;
    let k, J;
    let oe, ue;
    if (j) {
      const et = en[j];
      k = et.vertexShader;
      J = et.fragmentShader;
    } else {
      k = y.vertexShader;
      J = y.fragmentShader;
      c.update(y);
      oe = c.getVertexShaderID(y);
      ue = c.getFragmentShaderID(y);
    }
    const L = r.getRenderTarget();
    const Le = U.isInstancedMesh === true;
    const Ie = !!y.map;
    const re = !!y.matcap;
    const ye = !!Z;
    const Q = !!y.aoMap;
    const X = !!y.lightMap;
    const ee = !!y.bumpMap;
    const ge = !!y.normalMap;
    const ce = !!y.displacementMap;
    const we = !!y.emissiveMap;
    const Ae = !!y.metalnessMap;
    const be = !!y.roughnessMap;
    const ke = y.clearcoat > 0;
    const Ye = y.iridescence > 0;
    const R = y.sheen > 0;
    const b = y.transmission > 0;
    const B = ke && !!y.clearcoatMap;
    const ne = ke && !!y.clearcoatNormalMap;
    const se = ke && !!y.clearcoatRoughnessMap;
    const le = Ye && !!y.iridescenceMap;
    const Pe = Ye && !!y.iridescenceThicknessMap;
    const me = R && !!y.sheenColorMap;
    const W = R && !!y.sheenRoughnessMap;
    const ve = !!y.specularMap;
    const Ee = !!y.specularColorMap;
    const Re = !!y.specularIntensityMap;
    const _e = b && !!y.transmissionMap;
    const Se = b && !!y.thicknessMap;
    const Xe = !!y.gradientMap;
    const je = !!y.alphaMap;
    const rt = y.alphaTest > 0;
    const I = !!y.extensions;
    const V = !!z.attributes.uv1;
    const ie = !!z.attributes.uv2;
    const fe = !!z.attributes.uv3;
    const Me = {
      isWebGL2: h,
      shaderID: j,
      shaderName: y.type,
      vertexShader: k,
      fragmentShader: J,
      defines: y.defines,
      customVertexShaderID: oe,
      customFragmentShaderID: ue,
      isRawShaderMaterial: y.isRawShaderMaterial === true,
      glslVersion: y.glslVersion,
      precision: f,
      instancing: Le,
      instancingColor: Le && U.instanceColor !== null,
      supportsVertexTextures: d,
      outputColorSpace: L === null ? r.outputColorSpace : L.isXRRenderTarget === true ? L.texture.colorSpace : tn,
      map: Ie,
      matcap: re,
      envMap: ye,
      envMapMode: ye && Z.mapping,
      envMapCubeUVHeight: Y,
      aoMap: Q,
      lightMap: X,
      bumpMap: ee,
      normalMap: ge,
      displacementMap: d && ce,
      emissiveMap: we,
      normalMapObjectSpace: ge && y.normalMapType === df,
      normalMapTangentSpace: ge && y.normalMapType === Kn,
      metalnessMap: Ae,
      roughnessMap: be,
      clearcoat: ke,
      clearcoatMap: B,
      clearcoatNormalMap: ne,
      clearcoatRoughnessMap: se,
      iridescence: Ye,
      iridescenceMap: le,
      iridescenceThicknessMap: Pe,
      sheen: R,
      sheenColorMap: me,
      sheenRoughnessMap: W,
      specularMap: ve,
      specularColorMap: Ee,
      specularIntensityMap: Re,
      transmission: b,
      transmissionMap: _e,
      thicknessMap: Se,
      gradientMap: Xe,
      opaque: y.transparent === false && y.blending === mi,
      alphaMap: je,
      alphaTest: rt,
      combine: y.combine,
      //
      mapUv: Ie && _(y.map.channel),
      aoMapUv: Q && _(y.aoMap.channel),
      lightMapUv: X && _(y.lightMap.channel),
      bumpMapUv: ee && _(y.bumpMap.channel),
      normalMapUv: ge && _(y.normalMap.channel),
      displacementMapUv: ce && _(y.displacementMap.channel),
      emissiveMapUv: we && _(y.emissiveMap.channel),
      metalnessMapUv: Ae && _(y.metalnessMap.channel),
      roughnessMapUv: be && _(y.roughnessMap.channel),
      clearcoatMapUv: B && _(y.clearcoatMap.channel),
      clearcoatNormalMapUv: ne && _(y.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: se && _(y.clearcoatRoughnessMap.channel),
      iridescenceMapUv: le && _(y.iridescenceMap.channel),
      iridescenceThicknessMapUv: Pe && _(y.iridescenceThicknessMap.channel),
      sheenColorMapUv: me && _(y.sheenColorMap.channel),
      sheenRoughnessMapUv: W && _(y.sheenRoughnessMap.channel),
      specularMapUv: ve && _(y.specularMap.channel),
      specularColorMapUv: Ee && _(y.specularColorMap.channel),
      specularIntensityMapUv: Re && _(y.specularIntensityMap.channel),
      transmissionMapUv: _e && _(y.transmissionMap.channel),
      thicknessMapUv: Se && _(y.thicknessMap.channel),
      alphaMapUv: je && _(y.alphaMap.channel),
      //
      vertexTangents: ge && !!z.attributes.tangent,
      vertexColors: y.vertexColors,
      vertexAlphas: y.vertexColors === true && !!z.attributes.color && z.attributes.color.itemSize === 4,
      vertexUv1s: V,
      vertexUv2s: ie,
      vertexUv3s: fe,
      pointsUvs: U.isPoints === true && !!z.attributes.uv && (Ie || je),
      fog: !!F,
      useFog: y.fog === true,
      fogExp2: F && F.isFogExp2,
      flatShading: y.flatShading === true,
      sizeAttenuation: y.sizeAttenuation === true,
      logarithmicDepthBuffer: u,
      skinning: U.isSkinnedMesh === true,
      morphTargets: z.morphAttributes.position !== void 0,
      morphNormals: z.morphAttributes.normal !== void 0,
      morphColors: z.morphAttributes.color !== void 0,
      morphTargetsCount: pe,
      morphTextureStride: he,
      numDirLights: A.directional.length,
      numPointLights: A.point.length,
      numSpotLights: A.spot.length,
      numSpotLightMaps: A.spotLightMap.length,
      numRectAreaLights: A.rectArea.length,
      numHemiLights: A.hemi.length,
      numDirLightShadows: A.directionalShadowMap.length,
      numPointLightShadows: A.pointShadowMap.length,
      numSpotLightShadows: A.spotShadowMap.length,
      numSpotLightShadowsWithMaps: A.numSpotLightShadowsWithMaps,
      numClippingPlanes: a.numPlanes,
      numClipIntersection: a.numIntersection,
      dithering: y.dithering,
      shadowMapEnabled: r.shadowMap.enabled && O.length > 0,
      shadowMapType: r.shadowMap.type,
      toneMapping: y.toneMapped ? r.toneMapping : hn,
      useLegacyLights: r.useLegacyLights,
      premultipliedAlpha: y.premultipliedAlpha,
      doubleSided: y.side === ln,
      flipSided: y.side === Pt,
      useDepthPacking: y.depthPacking >= 0,
      depthPacking: y.depthPacking || 0,
      index0AttributeName: y.index0AttributeName,
      extensionDerivatives: I && y.extensions.derivatives === true,
      extensionFragDepth: I && y.extensions.fragDepth === true,
      extensionDrawBuffers: I && y.extensions.drawBuffers === true,
      extensionShaderTextureLOD: I && y.extensions.shaderTextureLOD === true,
      rendererExtensionFragDepth: h || n.has("EXT_frag_depth"),
      rendererExtensionDrawBuffers: h || n.has("WEBGL_draw_buffers"),
      rendererExtensionShaderTextureLod: h || n.has("EXT_shader_texture_lod"),
      customProgramCacheKey: y.customProgramCacheKey()
    };
    return Me;
  }
  function p(y) {
    const A = [];
    if (y.shaderID) {
      A.push(y.shaderID);
    } else {
      A.push(y.customVertexShaderID);
      A.push(y.customFragmentShaderID);
    }
    if (y.defines !== void 0) {
      for (const O in y.defines) {
        A.push(O);
        A.push(y.defines[O]);
      }
    }
    if (y.isRawShaderMaterial === false) {
      v(A, y);
      x(A, y);
      A.push(r.outputColorSpace);
    }
    A.push(y.customProgramCacheKey);
    return A.join();
  }
  function v(y, A) {
    y.push(A.precision);
    y.push(A.outputColorSpace);
    y.push(A.envMapMode);
    y.push(A.envMapCubeUVHeight);
    y.push(A.mapUv);
    y.push(A.alphaMapUv);
    y.push(A.lightMapUv);
    y.push(A.aoMapUv);
    y.push(A.bumpMapUv);
    y.push(A.normalMapUv);
    y.push(A.displacementMapUv);
    y.push(A.emissiveMapUv);
    y.push(A.metalnessMapUv);
    y.push(A.roughnessMapUv);
    y.push(A.clearcoatMapUv);
    y.push(A.clearcoatNormalMapUv);
    y.push(A.clearcoatRoughnessMapUv);
    y.push(A.iridescenceMapUv);
    y.push(A.iridescenceThicknessMapUv);
    y.push(A.sheenColorMapUv);
    y.push(A.sheenRoughnessMapUv);
    y.push(A.specularMapUv);
    y.push(A.specularColorMapUv);
    y.push(A.specularIntensityMapUv);
    y.push(A.transmissionMapUv);
    y.push(A.thicknessMapUv);
    y.push(A.combine);
    y.push(A.fogExp2);
    y.push(A.sizeAttenuation);
    y.push(A.morphTargetsCount);
    y.push(A.morphAttributeCount);
    y.push(A.numDirLights);
    y.push(A.numPointLights);
    y.push(A.numSpotLights);
    y.push(A.numSpotLightMaps);
    y.push(A.numHemiLights);
    y.push(A.numRectAreaLights);
    y.push(A.numDirLightShadows);
    y.push(A.numPointLightShadows);
    y.push(A.numSpotLightShadows);
    y.push(A.numSpotLightShadowsWithMaps);
    y.push(A.shadowMapType);
    y.push(A.toneMapping);
    y.push(A.numClippingPlanes);
    y.push(A.numClipIntersection);
    y.push(A.depthPacking);
  }
  function x(y, A) {
    o.disableAll();
    if (A.isWebGL2)
      o.enable(0);
    if (A.supportsVertexTextures)
      o.enable(1);
    if (A.instancing)
      o.enable(2);
    if (A.instancingColor)
      o.enable(3);
    if (A.matcap)
      o.enable(4);
    if (A.envMap)
      o.enable(5);
    if (A.normalMapObjectSpace)
      o.enable(6);
    if (A.normalMapTangentSpace)
      o.enable(7);
    if (A.clearcoat)
      o.enable(8);
    if (A.iridescence)
      o.enable(9);
    if (A.alphaTest)
      o.enable(10);
    if (A.vertexColors)
      o.enable(11);
    if (A.vertexAlphas)
      o.enable(12);
    if (A.vertexUv1s)
      o.enable(13);
    if (A.vertexUv2s)
      o.enable(14);
    if (A.vertexUv3s)
      o.enable(15);
    if (A.vertexTangents)
      o.enable(16);
    y.push(o.mask);
    o.disableAll();
    if (A.fog)
      o.enable(0);
    if (A.useFog)
      o.enable(1);
    if (A.flatShading)
      o.enable(2);
    if (A.logarithmicDepthBuffer)
      o.enable(3);
    if (A.skinning)
      o.enable(4);
    if (A.morphTargets)
      o.enable(5);
    if (A.morphNormals)
      o.enable(6);
    if (A.morphColors)
      o.enable(7);
    if (A.premultipliedAlpha)
      o.enable(8);
    if (A.shadowMapEnabled)
      o.enable(9);
    if (A.useLegacyLights)
      o.enable(10);
    if (A.doubleSided)
      o.enable(11);
    if (A.flipSided)
      o.enable(12);
    if (A.useDepthPacking)
      o.enable(13);
    if (A.dithering)
      o.enable(14);
    if (A.transmission)
      o.enable(15);
    if (A.sheen)
      o.enable(16);
    if (A.opaque)
      o.enable(17);
    if (A.pointsUvs)
      o.enable(18);
    y.push(o.mask);
  }
  function M(y) {
    const A = m[y.type];
    let O;
    if (A) {
      const G = en[A];
      O = vf.clone(G.uniforms);
    } else {
      O = y.uniforms;
    }
    return O;
  }
  function S(y, A) {
    let O;
    for (let G = 0, U = l.length; G < U; G++) {
      const F = l[G];
      if (F.cacheKey === A) {
        O = F;
        ++O.usedTimes;
        break;
      }
    }
    if (O === void 0) {
      O = new tx(r, A, y, s);
      l.push(O);
    }
    return O;
  }
  function E(y) {
    if (--y.usedTimes === 0) {
      const A = l.indexOf(y);
      l[A] = l[l.length - 1];
      l.pop();
      y.destroy();
    }
  }
  function C(y) {
    c.remove(y);
  }
  function P() {
    c.dispose();
  }
  return {
    getParameters: g,
    getProgramCacheKey: p,
    getUniforms: M,
    acquireProgram: S,
    releaseProgram: E,
    releaseShaderCache: C,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: l,
    dispose: P
  };
}
function sx() {
  let r = /* @__PURE__ */ new WeakMap();
  function e(s) {
    let a = r.get(s);
    if (a === void 0) {
      a = {};
      r.set(s, a);
    }
    return a;
  }
  function t(s) {
    r.delete(s);
  }
  function n(s, a, o) {
    r.get(s)[a] = o;
  }
  function i() {
    r = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    remove: t,
    update: n,
    dispose: i
  };
}
function rx(r, e) {
  if (r.groupOrder !== e.groupOrder) {
    return r.groupOrder - e.groupOrder;
  } else if (r.renderOrder !== e.renderOrder) {
    return r.renderOrder - e.renderOrder;
  } else if (r.material.id !== e.material.id) {
    return r.material.id - e.material.id;
  } else if (r.z !== e.z) {
    return r.z - e.z;
  } else {
    return r.id - e.id;
  }
}
function Tu(r, e) {
  if (r.groupOrder !== e.groupOrder) {
    return r.groupOrder - e.groupOrder;
  } else if (r.renderOrder !== e.renderOrder) {
    return r.renderOrder - e.renderOrder;
  } else if (r.z !== e.z) {
    return e.z - r.z;
  } else {
    return r.id - e.id;
  }
}
function wu() {
  const r = [];
  let e = 0;
  const t = [];
  const n = [];
  const i = [];
  function s() {
    e = 0;
    t.length = 0;
    n.length = 0;
    i.length = 0;
  }
  function a(u, d, f, m, _, g) {
    let p = r[e];
    if (p === void 0) {
      p = {
        id: u.id,
        object: u,
        geometry: d,
        material: f,
        groupOrder: m,
        renderOrder: u.renderOrder,
        z: _,
        group: g
      };
      r[e] = p;
    } else {
      p.id = u.id;
      p.object = u;
      p.geometry = d;
      p.material = f;
      p.groupOrder = m;
      p.renderOrder = u.renderOrder;
      p.z = _;
      p.group = g;
    }
    e++;
    return p;
  }
  function o(u, d, f, m, _, g) {
    const p = a(u, d, f, m, _, g);
    if (f.transmission > 0) {
      n.push(p);
    } else if (f.transparent === true) {
      i.push(p);
    } else {
      t.push(p);
    }
  }
  function c(u, d, f, m, _, g) {
    const p = a(u, d, f, m, _, g);
    if (f.transmission > 0) {
      n.unshift(p);
    } else if (f.transparent === true) {
      i.unshift(p);
    } else {
      t.unshift(p);
    }
  }
  function l(u, d) {
    if (t.length > 1)
      t.sort(u || rx);
    if (n.length > 1)
      n.sort(d || Tu);
    if (i.length > 1)
      i.sort(d || Tu);
  }
  function h() {
    for (let u = e, d = r.length; u < d; u++) {
      const f = r[u];
      if (f.id === null)
        break;
      f.id = null;
      f.object = null;
      f.geometry = null;
      f.material = null;
      f.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: n,
    transparent: i,
    init: s,
    push: o,
    unshift: c,
    finish: h,
    sort: l
  };
}
function ax() {
  let r = /* @__PURE__ */ new WeakMap();
  function e(n, i) {
    const s = r.get(n);
    let a;
    if (s === void 0) {
      a = new wu();
      r.set(n, [a]);
    } else {
      if (i >= s.length) {
        a = new wu();
        s.push(a);
      } else {
        a = s[i];
      }
    }
    return a;
  }
  function t() {
    r = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function ox() {
  const r = {};
  return {
    get: function(e) {
      if (r[e.id] !== void 0) {
        return r[e.id];
      }
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new w(),
            color: new de()
          };
          break;
        case "SpotLight":
          t = {
            position: new w(),
            direction: new w(),
            color: new de(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new w(),
            color: new de(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new w(),
            skyColor: new de(),
            groundColor: new de()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new de(),
            position: new w(),
            halfWidth: new w(),
            halfHeight: new w()
          };
          break;
      }
      r[e.id] = t;
      return t;
    }
  };
}
function cx() {
  const r = {};
  return {
    get: function(e) {
      if (r[e.id] !== void 0) {
        return r[e.id];
      }
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new $()
          };
          break;
        case "SpotLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new $()
          };
          break;
        case "PointLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new $(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      r[e.id] = t;
      return t;
    }
  };
}
var lx = 0;
function hx(r, e) {
  return (e.castShadow ? 2 : 0) - (r.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (r.map ? 1 : 0);
}
function ux(r, e) {
  const t = new ox();
  const n = cx();
  const i = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0
  };
  for (let h = 0; h < 9; h++)
    i.probe.push(new w());
  const s = new w();
  const a = new Ne();
  const o = new Ne();
  function c(h, u) {
    let d = 0, f = 0, m = 0;
    for (let O = 0; O < 9; O++)
      i.probe[O].set(0, 0, 0);
    let _ = 0;
    let g = 0;
    let p = 0;
    let v = 0;
    let x = 0;
    let M = 0;
    let S = 0;
    let E = 0;
    let C = 0;
    let P = 0;
    h.sort(hx);
    const y = u === true ? Math.PI : 1;
    for (let O = 0, G = h.length; O < G; O++) {
      const U = h[O];
      const F = U.color;
      const z = U.intensity;
      const K = U.distance;
      const Z = U.shadow && U.shadow.map ? U.shadow.map.texture : null;
      if (U.isAmbientLight) {
        d += F.r * z * y;
        f += F.g * z * y;
        m += F.b * z * y;
      } else if (U.isLightProbe) {
        for (let Y = 0; Y < 9; Y++) {
          i.probe[Y].addScaledVector(U.sh.coefficients[Y], z);
        }
      } else if (U.isDirectionalLight) {
        const Y = t.get(U);
        Y.color.copy(U.color).multiplyScalar(U.intensity * y);
        if (U.castShadow) {
          const j = U.shadow;
          const te = n.get(U);
          te.shadowBias = j.bias;
          te.shadowNormalBias = j.normalBias;
          te.shadowRadius = j.radius;
          te.shadowMapSize = j.mapSize;
          i.directionalShadow[_] = te;
          i.directionalShadowMap[_] = Z;
          i.directionalShadowMatrix[_] = U.shadow.matrix;
          M++;
        }
        i.directional[_] = Y;
        _++;
      } else if (U.isSpotLight) {
        const Y = t.get(U);
        Y.position.setFromMatrixPosition(U.matrixWorld);
        Y.color.copy(F).multiplyScalar(z * y);
        Y.distance = K;
        Y.coneCos = Math.cos(U.angle);
        Y.penumbraCos = Math.cos(U.angle * (1 - U.penumbra));
        Y.decay = U.decay;
        i.spot[p] = Y;
        const j = U.shadow;
        if (U.map) {
          i.spotLightMap[C] = U.map;
          C++;
          j.updateMatrices(U);
          if (U.castShadow)
            P++;
        }
        i.spotLightMatrix[p] = j.matrix;
        if (U.castShadow) {
          const te = n.get(U);
          te.shadowBias = j.bias;
          te.shadowNormalBias = j.normalBias;
          te.shadowRadius = j.radius;
          te.shadowMapSize = j.mapSize;
          i.spotShadow[p] = te;
          i.spotShadowMap[p] = Z;
          E++;
        }
        p++;
      } else if (U.isRectAreaLight) {
        const Y = t.get(U);
        Y.color.copy(F).multiplyScalar(z);
        Y.halfWidth.set(U.width * 0.5, 0, 0);
        Y.halfHeight.set(0, U.height * 0.5, 0);
        i.rectArea[v] = Y;
        v++;
      } else if (U.isPointLight) {
        const Y = t.get(U);
        Y.color.copy(U.color).multiplyScalar(U.intensity * y);
        Y.distance = U.distance;
        Y.decay = U.decay;
        if (U.castShadow) {
          const j = U.shadow;
          const te = n.get(U);
          te.shadowBias = j.bias;
          te.shadowNormalBias = j.normalBias;
          te.shadowRadius = j.radius;
          te.shadowMapSize = j.mapSize;
          te.shadowCameraNear = j.camera.near;
          te.shadowCameraFar = j.camera.far;
          i.pointShadow[g] = te;
          i.pointShadowMap[g] = Z;
          i.pointShadowMatrix[g] = U.shadow.matrix;
          S++;
        }
        i.point[g] = Y;
        g++;
      } else if (U.isHemisphereLight) {
        const Y = t.get(U);
        Y.skyColor.copy(U.color).multiplyScalar(z * y);
        Y.groundColor.copy(U.groundColor).multiplyScalar(z * y);
        i.hemi[x] = Y;
        x++;
      }
    }
    if (v > 0) {
      if (e.isWebGL2) {
        i.rectAreaLTC1 = ae.LTC_FLOAT_1;
        i.rectAreaLTC2 = ae.LTC_FLOAT_2;
      } else {
        if (r.has("OES_texture_float_linear") === true) {
          i.rectAreaLTC1 = ae.LTC_FLOAT_1;
          i.rectAreaLTC2 = ae.LTC_FLOAT_2;
        } else if (r.has("OES_texture_half_float_linear") === true) {
          i.rectAreaLTC1 = ae.LTC_HALF_1;
          i.rectAreaLTC2 = ae.LTC_HALF_2;
        } else {
          console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
        }
      }
    }
    i.ambient[0] = d;
    i.ambient[1] = f;
    i.ambient[2] = m;
    const A = i.hash;
    if (A.directionalLength !== _ || A.pointLength !== g || A.spotLength !== p || A.rectAreaLength !== v || A.hemiLength !== x || A.numDirectionalShadows !== M || A.numPointShadows !== S || A.numSpotShadows !== E || A.numSpotMaps !== C) {
      i.directional.length = _;
      i.spot.length = p;
      i.rectArea.length = v;
      i.point.length = g;
      i.hemi.length = x;
      i.directionalShadow.length = M;
      i.directionalShadowMap.length = M;
      i.pointShadow.length = S;
      i.pointShadowMap.length = S;
      i.spotShadow.length = E;
      i.spotShadowMap.length = E;
      i.directionalShadowMatrix.length = M;
      i.pointShadowMatrix.length = S;
      i.spotLightMatrix.length = E + C - P;
      i.spotLightMap.length = C;
      i.numSpotLightShadowsWithMaps = P;
      A.directionalLength = _;
      A.pointLength = g;
      A.spotLength = p;
      A.rectAreaLength = v;
      A.hemiLength = x;
      A.numDirectionalShadows = M;
      A.numPointShadows = S;
      A.numSpotShadows = E;
      A.numSpotMaps = C;
      i.version = lx++;
    }
  }
  function l(h, u) {
    let d = 0;
    let f = 0;
    let m = 0;
    let _ = 0;
    let g = 0;
    const p = u.matrixWorldInverse;
    for (let v = 0, x = h.length; v < x; v++) {
      const M = h[v];
      if (M.isDirectionalLight) {
        const S = i.directional[d];
        S.direction.setFromMatrixPosition(M.matrixWorld);
        s.setFromMatrixPosition(M.target.matrixWorld);
        S.direction.sub(s);
        S.direction.transformDirection(p);
        d++;
      } else if (M.isSpotLight) {
        const S = i.spot[m];
        S.position.setFromMatrixPosition(M.matrixWorld);
        S.position.applyMatrix4(p);
        S.direction.setFromMatrixPosition(M.matrixWorld);
        s.setFromMatrixPosition(M.target.matrixWorld);
        S.direction.sub(s);
        S.direction.transformDirection(p);
        m++;
      } else if (M.isRectAreaLight) {
        const S = i.rectArea[_];
        S.position.setFromMatrixPosition(M.matrixWorld);
        S.position.applyMatrix4(p);
        o.identity();
        a.copy(M.matrixWorld);
        a.premultiply(p);
        o.extractRotation(a);
        S.halfWidth.set(M.width * 0.5, 0, 0);
        S.halfHeight.set(0, M.height * 0.5, 0);
        S.halfWidth.applyMatrix4(o);
        S.halfHeight.applyMatrix4(o);
        _++;
      } else if (M.isPointLight) {
        const S = i.point[f];
        S.position.setFromMatrixPosition(M.matrixWorld);
        S.position.applyMatrix4(p);
        f++;
      } else if (M.isHemisphereLight) {
        const S = i.hemi[g];
        S.direction.setFromMatrixPosition(M.matrixWorld);
        S.direction.transformDirection(p);
        g++;
      }
    }
  }
  return {
    setup: c,
    setupView: l,
    state: i
  };
}
function Au(r, e) {
  const t = new ux(r, e);
  const n = [];
  const i = [];
  function s() {
    n.length = 0;
    i.length = 0;
  }
  function a(u) {
    n.push(u);
  }
  function o(u) {
    i.push(u);
  }
  function c(u) {
    t.setup(n, u);
  }
  function l(u) {
    t.setupView(n, u);
  }
  const h = {
    lightsArray: n,
    shadowsArray: i,
    lights: t
  };
  return {
    init: s,
    state: h,
    setupLights: c,
    setupLightsView: l,
    pushLight: a,
    pushShadow: o
  };
}
function dx(r, e) {
  let t = /* @__PURE__ */ new WeakMap();
  function n(s, a = 0) {
    const o = t.get(s);
    let c;
    if (o === void 0) {
      c = new Au(r, e);
      t.set(s, [c]);
    } else {
      if (a >= o.length) {
        c = new Au(r, e);
        o.push(c);
      } else {
        c = o[a];
      }
    }
    return c;
  }
  function i() {
    t = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: i
  };
}
var nr = class extends vt {
  constructor(e) {
    super();
    this.isMeshDepthMaterial = true;
    this.type = "MeshDepthMaterial";
    this.depthPacking = hf;
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.depthPacking = e.depthPacking;
    this.map = e.map;
    this.alphaMap = e.alphaMap;
    this.displacementMap = e.displacementMap;
    this.displacementScale = e.displacementScale;
    this.displacementBias = e.displacementBias;
    this.wireframe = e.wireframe;
    this.wireframeLinewidth = e.wireframeLinewidth;
    return this;
  }
};
var ir = class extends vt {
  constructor(e) {
    super();
    this.isMeshDistanceMaterial = true;
    this.type = "MeshDistanceMaterial";
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.map = e.map;
    this.alphaMap = e.alphaMap;
    this.displacementMap = e.displacementMap;
    this.displacementScale = e.displacementScale;
    this.displacementBias = e.displacementBias;
    return this;
  }
};
var fx = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
var px = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
function mx(r, e, t) {
  let n = new hs();
  const i = new $(), s = new $(), a = new $e(), o = new nr({ depthPacking: uf }), c = new ir(), l = {}, h = t.maxTextureSize;
  const u = { [Rn]: Pt, [Pt]: Rn, [ln]: ln };
  const d = new Zt({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new $() },
      radius: { value: 4 }
    },
    vertexShader: fx,
    fragmentShader: px
  });
  const f = d.clone();
  f.defines.HORIZONTAL_PASS = 1;
  const m = new ze();
  m.setAttribute(
    "position",
    new Ke(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const _ = new ft(m, d);
  const g = this;
  this.enabled = false;
  this.autoUpdate = true;
  this.needsUpdate = false;
  this.type = wh;
  let p = this.type;
  this.render = function(S, E, C) {
    if (g.enabled === false)
      return;
    if (g.autoUpdate === false && g.needsUpdate === false)
      return;
    if (S.length === 0)
      return;
    const P = r.getRenderTarget();
    const y = r.getActiveCubeFace();
    const A = r.getActiveMipmapLevel();
    const O = r.state;
    O.setBlending(wn);
    O.buffers.color.setClear(1, 1, 1, 1);
    O.buffers.depth.setTest(true);
    O.setScissorTest(false);
    const G = p !== on && this.type === on;
    const U = p === on && this.type !== on;
    for (let F = 0, z = S.length; F < z; F++) {
      const K = S[F];
      const Z = K.shadow;
      if (Z === void 0) {
        console.warn("THREE.WebGLShadowMap:", K, "has no shadow.");
        continue;
      }
      if (Z.autoUpdate === false && Z.needsUpdate === false)
        continue;
      i.copy(Z.mapSize);
      const Y = Z.getFrameExtents();
      i.multiply(Y);
      s.copy(Z.mapSize);
      if (i.x > h || i.y > h) {
        if (i.x > h) {
          s.x = Math.floor(h / Y.x);
          i.x = s.x * Y.x;
          Z.mapSize.x = s.x;
        }
        if (i.y > h) {
          s.y = Math.floor(h / Y.y);
          i.y = s.y * Y.y;
          Z.mapSize.y = s.y;
        }
      }
      if (Z.map === null || G === true || U === true) {
        const te = this.type !== on ? { minFilter: ct, magFilter: ct } : {};
        if (Z.map !== null) {
          Z.map.dispose();
        }
        Z.map = new zt(i.x, i.y, te);
        Z.map.texture.name = K.name + ".shadowMap";
        Z.camera.updateProjectionMatrix();
      }
      r.setRenderTarget(Z.map);
      r.clear();
      const j = Z.getViewportCount();
      for (let te = 0; te < j; te++) {
        const pe = Z.getViewport(te);
        a.set(
          s.x * pe.x,
          s.y * pe.y,
          s.x * pe.z,
          s.y * pe.w
        );
        O.viewport(a);
        Z.updateMatrices(K, te);
        n = Z.getFrustum();
        M(E, C, Z.camera, K, this.type);
      }
      if (Z.isPointLightShadow !== true && this.type === on) {
        v(Z, C);
      }
      Z.needsUpdate = false;
    }
    p = this.type;
    g.needsUpdate = false;
    r.setRenderTarget(P, y, A);
  };
  function v(S, E) {
    const C = e.update(_);
    if (d.defines.VSM_SAMPLES !== S.blurSamples) {
      d.defines.VSM_SAMPLES = S.blurSamples;
      f.defines.VSM_SAMPLES = S.blurSamples;
      d.needsUpdate = true;
      f.needsUpdate = true;
    }
    if (S.mapPass === null) {
      S.mapPass = new zt(i.x, i.y);
    }
    d.uniforms.shadow_pass.value = S.map.texture;
    d.uniforms.resolution.value = S.mapSize;
    d.uniforms.radius.value = S.radius;
    r.setRenderTarget(S.mapPass);
    r.clear();
    r.renderBufferDirect(E, null, C, d, _, null);
    f.uniforms.shadow_pass.value = S.mapPass.texture;
    f.uniforms.resolution.value = S.mapSize;
    f.uniforms.radius.value = S.radius;
    r.setRenderTarget(S.map);
    r.clear();
    r.renderBufferDirect(E, null, C, f, _, null);
  }
  function x(S, E, C, P) {
    let y = null;
    const A = C.isPointLight === true ? S.customDistanceMaterial : S.customDepthMaterial;
    if (A !== void 0) {
      y = A;
    } else {
      y = C.isPointLight === true ? c : o;
      if (r.localClippingEnabled && E.clipShadows === true && Array.isArray(E.clippingPlanes) && E.clippingPlanes.length !== 0 || E.displacementMap && E.displacementScale !== 0 || E.alphaMap && E.alphaTest > 0 || E.map && E.alphaTest > 0) {
        const O = y.uuid, G = E.uuid;
        let U = l[O];
        if (U === void 0) {
          U = {};
          l[O] = U;
        }
        let F = U[G];
        if (F === void 0) {
          F = y.clone();
          U[G] = F;
        }
        y = F;
      }
    }
    y.visible = E.visible;
    y.wireframe = E.wireframe;
    if (P === on) {
      y.side = E.shadowSide !== null ? E.shadowSide : E.side;
    } else {
      y.side = E.shadowSide !== null ? E.shadowSide : u[E.side];
    }
    y.alphaMap = E.alphaMap;
    y.alphaTest = E.alphaTest;
    y.map = E.map;
    y.clipShadows = E.clipShadows;
    y.clippingPlanes = E.clippingPlanes;
    y.clipIntersection = E.clipIntersection;
    y.displacementMap = E.displacementMap;
    y.displacementScale = E.displacementScale;
    y.displacementBias = E.displacementBias;
    y.wireframeLinewidth = E.wireframeLinewidth;
    y.linewidth = E.linewidth;
    if (C.isPointLight === true && y.isMeshDistanceMaterial === true) {
      const O = r.properties.get(y);
      O.light = C;
    }
    return y;
  }
  function M(S, E, C, P, y) {
    if (S.visible === false)
      return;
    const A = S.layers.test(E.layers);
    if (A && (S.isMesh || S.isLine || S.isPoints)) {
      if ((S.castShadow || S.receiveShadow && y === on) && (!S.frustumCulled || n.intersectsObject(S))) {
        S.modelViewMatrix.multiplyMatrices(C.matrixWorldInverse, S.matrixWorld);
        const G = e.update(S);
        const U = S.material;
        if (Array.isArray(U)) {
          const F = G.groups;
          for (let z = 0, K = F.length; z < K; z++) {
            const Z = F[z];
            const Y = U[Z.materialIndex];
            if (Y && Y.visible) {
              const j = x(S, Y, P, y);
              r.renderBufferDirect(C, null, G, j, S, Z);
            }
          }
        } else if (U.visible) {
          const F = x(S, U, P, y);
          r.renderBufferDirect(C, null, G, F, S, null);
        }
      }
    }
    const O = S.children;
    for (let G = 0, U = O.length; G < U; G++) {
      M(O[G], E, C, P, y);
    }
  }
}
function gx(r, e, t) {
  const n = t.isWebGL2;
  function i() {
    let I = false;
    const V = new $e();
    let ie = null;
    const fe = new $e(0, 0, 0, 0);
    return {
      setMask: function(Me) {
        if (ie !== Me && !I) {
          r.colorMask(Me, Me, Me, Me);
          ie = Me;
        }
      },
      setLocked: function(Me) {
        I = Me;
      },
      setClear: function(Me, et, tt, Mt, In) {
        if (In === true) {
          Me *= Mt;
          et *= Mt;
          tt *= Mt;
        }
        V.set(Me, et, tt, Mt);
        if (fe.equals(V) === false) {
          r.clearColor(Me, et, tt, Mt);
          fe.copy(V);
        }
      },
      reset: function() {
        I = false;
        ie = null;
        fe.set(-1, 0, 0, 0);
      }
    };
  }
  function s() {
    let I = false;
    let V = null;
    let ie = null;
    let fe = null;
    return {
      setTest: function(Me) {
        if (Me) {
          L(r.DEPTH_TEST);
        } else {
          Le(r.DEPTH_TEST);
        }
      },
      setMask: function(Me) {
        if (V !== Me && !I) {
          r.depthMask(Me);
          V = Me;
        }
      },
      setFunc: function(Me) {
        if (ie !== Me) {
          switch (Me) {
            case Ld:
              r.depthFunc(r.NEVER);
              break;
            case Id:
              r.depthFunc(r.ALWAYS);
              break;
            case Ud:
              r.depthFunc(r.LESS);
              break;
            case Pa:
              r.depthFunc(r.LEQUAL);
              break;
            case Dd:
              r.depthFunc(r.EQUAL);
              break;
            case Nd:
              r.depthFunc(r.GEQUAL);
              break;
            case Fd:
              r.depthFunc(r.GREATER);
              break;
            case Od:
              r.depthFunc(r.NOTEQUAL);
              break;
            default:
              r.depthFunc(r.LEQUAL);
          }
          ie = Me;
        }
      },
      setLocked: function(Me) {
        I = Me;
      },
      setClear: function(Me) {
        if (fe !== Me) {
          r.clearDepth(Me);
          fe = Me;
        }
      },
      reset: function() {
        I = false;
        V = null;
        ie = null;
        fe = null;
      }
    };
  }
  function a() {
    let I = false;
    let V = null;
    let ie = null;
    let fe = null;
    let Me = null;
    let et = null;
    let tt = null;
    let Mt = null;
    let In = null;
    return {
      setTest: function(at) {
        if (!I) {
          if (at) {
            L(r.STENCIL_TEST);
          } else {
            Le(r.STENCIL_TEST);
          }
        }
      },
      setMask: function(at) {
        if (V !== at && !I) {
          r.stencilMask(at);
          V = at;
        }
      },
      setFunc: function(at, Ht, rn) {
        if (ie !== at || fe !== Ht || Me !== rn) {
          r.stencilFunc(at, Ht, rn);
          ie = at;
          fe = Ht;
          Me = rn;
        }
      },
      setOp: function(at, Ht, rn) {
        if (et !== at || tt !== Ht || Mt !== rn) {
          r.stencilOp(at, Ht, rn);
          et = at;
          tt = Ht;
          Mt = rn;
        }
      },
      setLocked: function(at) {
        I = at;
      },
      setClear: function(at) {
        if (In !== at) {
          r.clearStencil(at);
          In = at;
        }
      },
      reset: function() {
        I = false;
        V = null;
        ie = null;
        fe = null;
        Me = null;
        et = null;
        tt = null;
        Mt = null;
        In = null;
      }
    };
  }
  const o = new i();
  const c = new s();
  const l = new a();
  const h = /* @__PURE__ */ new WeakMap();
  const u = /* @__PURE__ */ new WeakMap();
  let d = {};
  let f = {};
  let m = /* @__PURE__ */ new WeakMap();
  let _ = [];
  let g = null;
  let p = false;
  let v = null;
  let x = null;
  let M = null;
  let S = null;
  let E = null;
  let C = null;
  let P = null;
  let y = false;
  let A = null;
  let O = null;
  let G = null;
  let U = null;
  let F = null;
  const z = r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let K = false;
  let Z = 0;
  const Y = r.getParameter(r.VERSION);
  if (Y.indexOf("WebGL") !== -1) {
    Z = parseFloat(/^WebGL (\d)/.exec(Y)[1]);
    K = Z >= 1;
  } else if (Y.indexOf("OpenGL ES") !== -1) {
    Z = parseFloat(/^OpenGL ES (\d)/.exec(Y)[1]);
    K = Z >= 2;
  }
  let j = null;
  let te = {};
  const pe = r.getParameter(r.SCISSOR_BOX);
  const he = r.getParameter(r.VIEWPORT);
  const k = new $e().fromArray(pe);
  const J = new $e().fromArray(he);
  function oe(I, V, ie, fe) {
    const Me = new Uint8Array(4);
    const et = r.createTexture();
    r.bindTexture(I, et);
    r.texParameteri(I, r.TEXTURE_MIN_FILTER, r.NEAREST);
    r.texParameteri(I, r.TEXTURE_MAG_FILTER, r.NEAREST);
    for (let tt = 0; tt < ie; tt++) {
      if (n && (I === r.TEXTURE_3D || I === r.TEXTURE_2D_ARRAY)) {
        r.texImage3D(V, 0, r.RGBA, 1, 1, fe, 0, r.RGBA, r.UNSIGNED_BYTE, Me);
      } else {
        r.texImage2D(V + tt, 0, r.RGBA, 1, 1, 0, r.RGBA, r.UNSIGNED_BYTE, Me);
      }
    }
    return et;
  }
  const ue = {};
  ue[r.TEXTURE_2D] = oe(r.TEXTURE_2D, r.TEXTURE_2D, 1);
  ue[r.TEXTURE_CUBE_MAP] = oe(r.TEXTURE_CUBE_MAP, r.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
  if (n) {
    ue[r.TEXTURE_2D_ARRAY] = oe(r.TEXTURE_2D_ARRAY, r.TEXTURE_2D_ARRAY, 1, 1);
    ue[r.TEXTURE_3D] = oe(r.TEXTURE_3D, r.TEXTURE_3D, 1, 1);
  }
  o.setClear(0, 0, 0, 1);
  c.setClear(1);
  l.setClear(0);
  L(r.DEPTH_TEST);
  c.setFunc(Pa);
  ce(false);
  we(pc);
  L(r.CULL_FACE);
  ee(wn);
  function L(I) {
    if (d[I] !== true) {
      r.enable(I);
      d[I] = true;
    }
  }
  function Le(I) {
    if (d[I] !== false) {
      r.disable(I);
      d[I] = false;
    }
  }
  function Ie(I, V) {
    if (f[I] !== V) {
      r.bindFramebuffer(I, V);
      f[I] = V;
      if (n) {
        if (I === r.DRAW_FRAMEBUFFER) {
          f[r.FRAMEBUFFER] = V;
        }
        if (I === r.FRAMEBUFFER) {
          f[r.DRAW_FRAMEBUFFER] = V;
        }
      }
      return true;
    }
    return false;
  }
  function re(I, V) {
    let ie = _;
    let fe = false;
    if (I) {
      ie = m.get(V);
      if (ie === void 0) {
        ie = [];
        m.set(V, ie);
      }
      if (I.isWebGLMultipleRenderTargets) {
        const Me = I.texture;
        if (ie.length !== Me.length || ie[0] !== r.COLOR_ATTACHMENT0) {
          for (let et = 0, tt = Me.length; et < tt; et++) {
            ie[et] = r.COLOR_ATTACHMENT0 + et;
          }
          ie.length = Me.length;
          fe = true;
        }
      } else {
        if (ie[0] !== r.COLOR_ATTACHMENT0) {
          ie[0] = r.COLOR_ATTACHMENT0;
          fe = true;
        }
      }
    } else {
      if (ie[0] !== r.BACK) {
        ie[0] = r.BACK;
        fe = true;
      }
    }
    if (fe) {
      if (t.isWebGL2) {
        r.drawBuffers(ie);
      } else {
        e.get("WEBGL_draw_buffers").drawBuffersWEBGL(ie);
      }
    }
  }
  function ye(I) {
    if (g !== I) {
      r.useProgram(I);
      g = I;
      return true;
    }
    return false;
  }
  const Q = {
    [hi]: r.FUNC_ADD,
    [yd]: r.FUNC_SUBTRACT,
    [Md]: r.FUNC_REVERSE_SUBTRACT
  };
  if (n) {
    Q[xc] = r.MIN;
    Q[vc] = r.MAX;
  } else {
    const I = e.get("EXT_blend_minmax");
    if (I !== null) {
      Q[xc] = I.MIN_EXT;
      Q[vc] = I.MAX_EXT;
    }
  }
  const X = {
    [Sd]: r.ZERO,
    [bd]: r.ONE,
    [Ed]: r.SRC_COLOR,
    [Ah]: r.SRC_ALPHA,
    [Pd]: r.SRC_ALPHA_SATURATE,
    [Rd]: r.DST_COLOR,
    [wd]: r.DST_ALPHA,
    [Td]: r.ONE_MINUS_SRC_COLOR,
    [Rh]: r.ONE_MINUS_SRC_ALPHA,
    [Cd]: r.ONE_MINUS_DST_COLOR,
    [Ad]: r.ONE_MINUS_DST_ALPHA
  };
  function ee(I, V, ie, fe, Me, et, tt, Mt) {
    if (I === wn) {
      if (p === true) {
        Le(r.BLEND);
        p = false;
      }
      return;
    }
    if (p === false) {
      L(r.BLEND);
      p = true;
    }
    if (I !== vd) {
      if (I !== v || Mt !== y) {
        if (x !== hi || E !== hi) {
          r.blendEquation(r.FUNC_ADD);
          x = hi;
          E = hi;
        }
        if (Mt) {
          switch (I) {
            case mi:
              r.blendFuncSeparate(r.ONE, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case mc:
              r.blendFunc(r.ONE, r.ONE);
              break;
            case gc:
              r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE);
              break;
            case _c:
              r.blendFuncSeparate(r.ZERO, r.SRC_COLOR, r.ZERO, r.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", I);
              break;
          }
        } else {
          switch (I) {
            case mi:
              r.blendFuncSeparate(r.SRC_ALPHA, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case mc:
              r.blendFunc(r.SRC_ALPHA, r.ONE);
              break;
            case gc:
              r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE);
              break;
            case _c:
              r.blendFunc(r.ZERO, r.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", I);
              break;
          }
        }
        M = null;
        S = null;
        C = null;
        P = null;
        v = I;
        y = Mt;
      }
      return;
    }
    Me = Me || V;
    et = et || ie;
    tt = tt || fe;
    if (V !== x || Me !== E) {
      r.blendEquationSeparate(Q[V], Q[Me]);
      x = V;
      E = Me;
    }
    if (ie !== M || fe !== S || et !== C || tt !== P) {
      r.blendFuncSeparate(X[ie], X[fe], X[et], X[tt]);
      M = ie;
      S = fe;
      C = et;
      P = tt;
    }
    v = I;
    y = false;
  }
  function ge(I, V) {
    I.side === ln ? Le(r.CULL_FACE) : L(r.CULL_FACE);
    let ie = I.side === Pt;
    if (V)
      ie = !ie;
    ce(ie);
    I.blending === mi && I.transparent === false ? ee(wn) : ee(I.blending, I.blendEquation, I.blendSrc, I.blendDst, I.blendEquationAlpha, I.blendSrcAlpha, I.blendDstAlpha, I.premultipliedAlpha);
    c.setFunc(I.depthFunc);
    c.setTest(I.depthTest);
    c.setMask(I.depthWrite);
    o.setMask(I.colorWrite);
    const fe = I.stencilWrite;
    l.setTest(fe);
    if (fe) {
      l.setMask(I.stencilWriteMask);
      l.setFunc(I.stencilFunc, I.stencilRef, I.stencilFuncMask);
      l.setOp(I.stencilFail, I.stencilZFail, I.stencilZPass);
    }
    be(I.polygonOffset, I.polygonOffsetFactor, I.polygonOffsetUnits);
    I.alphaToCoverage === true ? L(r.SAMPLE_ALPHA_TO_COVERAGE) : Le(r.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function ce(I) {
    if (A !== I) {
      if (I) {
        r.frontFace(r.CW);
      } else {
        r.frontFace(r.CCW);
      }
      A = I;
    }
  }
  function we(I) {
    if (I !== gd) {
      L(r.CULL_FACE);
      if (I !== O) {
        if (I === pc) {
          r.cullFace(r.BACK);
        } else if (I === _d) {
          r.cullFace(r.FRONT);
        } else {
          r.cullFace(r.FRONT_AND_BACK);
        }
      }
    } else {
      Le(r.CULL_FACE);
    }
    O = I;
  }
  function Ae(I) {
    if (I !== G) {
      if (K)
        r.lineWidth(I);
      G = I;
    }
  }
  function be(I, V, ie) {
    if (I) {
      L(r.POLYGON_OFFSET_FILL);
      if (U !== V || F !== ie) {
        r.polygonOffset(V, ie);
        U = V;
        F = ie;
      }
    } else {
      Le(r.POLYGON_OFFSET_FILL);
    }
  }
  function ke(I) {
    if (I) {
      L(r.SCISSOR_TEST);
    } else {
      Le(r.SCISSOR_TEST);
    }
  }
  function Ye(I) {
    if (I === void 0)
      I = r.TEXTURE0 + z - 1;
    if (j !== I) {
      r.activeTexture(I);
      j = I;
    }
  }
  function R(I, V, ie) {
    if (ie === void 0) {
      if (j === null) {
        ie = r.TEXTURE0 + z - 1;
      } else {
        ie = j;
      }
    }
    let fe = te[ie];
    if (fe === void 0) {
      fe = { type: void 0, texture: void 0 };
      te[ie] = fe;
    }
    if (fe.type !== I || fe.texture !== V) {
      if (j !== ie) {
        r.activeTexture(ie);
        j = ie;
      }
      r.bindTexture(I, V || ue[I]);
      fe.type = I;
      fe.texture = V;
    }
  }
  function b() {
    const I = te[j];
    if (I !== void 0 && I.type !== void 0) {
      r.bindTexture(I.type, null);
      I.type = void 0;
      I.texture = void 0;
    }
  }
  function B() {
    try {
      r.compressedTexImage2D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function ne() {
    try {
      r.compressedTexImage3D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function se() {
    try {
      r.texSubImage2D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function le() {
    try {
      r.texSubImage3D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function Pe() {
    try {
      r.compressedTexSubImage2D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function me() {
    try {
      r.compressedTexSubImage3D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function W() {
    try {
      r.texStorage2D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function ve() {
    try {
      r.texStorage3D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function Ee() {
    try {
      r.texImage2D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function Re() {
    try {
      r.texImage3D.apply(r, arguments);
    } catch (I) {
      console.error("THREE.WebGLState:", I);
    }
  }
  function _e(I) {
    if (k.equals(I) === false) {
      r.scissor(I.x, I.y, I.z, I.w);
      k.copy(I);
    }
  }
  function Se(I) {
    if (J.equals(I) === false) {
      r.viewport(I.x, I.y, I.z, I.w);
      J.copy(I);
    }
  }
  function Xe(I, V) {
    let ie = u.get(V);
    if (ie === void 0) {
      ie = /* @__PURE__ */ new WeakMap();
      u.set(V, ie);
    }
    let fe = ie.get(I);
    if (fe === void 0) {
      fe = r.getUniformBlockIndex(V, I.name);
      ie.set(I, fe);
    }
  }
  function je(I, V) {
    const ie = u.get(V);
    const fe = ie.get(I);
    if (h.get(V) !== fe) {
      r.uniformBlockBinding(V, fe, I.__bindingPointIndex);
      h.set(V, fe);
    }
  }
  function rt() {
    r.disable(r.BLEND);
    r.disable(r.CULL_FACE);
    r.disable(r.DEPTH_TEST);
    r.disable(r.POLYGON_OFFSET_FILL);
    r.disable(r.SCISSOR_TEST);
    r.disable(r.STENCIL_TEST);
    r.disable(r.SAMPLE_ALPHA_TO_COVERAGE);
    r.blendEquation(r.FUNC_ADD);
    r.blendFunc(r.ONE, r.ZERO);
    r.blendFuncSeparate(r.ONE, r.ZERO, r.ONE, r.ZERO);
    r.colorMask(true, true, true, true);
    r.clearColor(0, 0, 0, 0);
    r.depthMask(true);
    r.depthFunc(r.LESS);
    r.clearDepth(1);
    r.stencilMask(4294967295);
    r.stencilFunc(r.ALWAYS, 0, 4294967295);
    r.stencilOp(r.KEEP, r.KEEP, r.KEEP);
    r.clearStencil(0);
    r.cullFace(r.BACK);
    r.frontFace(r.CCW);
    r.polygonOffset(0, 0);
    r.activeTexture(r.TEXTURE0);
    r.bindFramebuffer(r.FRAMEBUFFER, null);
    if (n === true) {
      r.bindFramebuffer(r.DRAW_FRAMEBUFFER, null);
      r.bindFramebuffer(r.READ_FRAMEBUFFER, null);
    }
    r.useProgram(null);
    r.lineWidth(1);
    r.scissor(0, 0, r.canvas.width, r.canvas.height);
    r.viewport(0, 0, r.canvas.width, r.canvas.height);
    d = {};
    j = null;
    te = {};
    f = {};
    m = /* @__PURE__ */ new WeakMap();
    _ = [];
    g = null;
    p = false;
    v = null;
    x = null;
    M = null;
    S = null;
    E = null;
    C = null;
    P = null;
    y = false;
    A = null;
    O = null;
    G = null;
    U = null;
    F = null;
    k.set(0, 0, r.canvas.width, r.canvas.height);
    J.set(0, 0, r.canvas.width, r.canvas.height);
    o.reset();
    c.reset();
    l.reset();
  }
  return {
    buffers: {
      color: o,
      depth: c,
      stencil: l
    },
    enable: L,
    disable: Le,
    bindFramebuffer: Ie,
    drawBuffers: re,
    useProgram: ye,
    setBlending: ee,
    setMaterial: ge,
    setFlipSided: ce,
    setCullFace: we,
    setLineWidth: Ae,
    setPolygonOffset: be,
    setScissorTest: ke,
    activeTexture: Ye,
    bindTexture: R,
    unbindTexture: b,
    compressedTexImage2D: B,
    compressedTexImage3D: ne,
    texImage2D: Ee,
    texImage3D: Re,
    updateUBOMapping: Xe,
    uniformBlockBinding: je,
    texStorage2D: W,
    texStorage3D: ve,
    texSubImage2D: se,
    texSubImage3D: le,
    compressedTexSubImage2D: Pe,
    compressedTexSubImage3D: me,
    scissor: _e,
    viewport: Se,
    reset: rt
  };
}
function _x(r, e, t, n, i, s, a) {
  const o = i.isWebGL2;
  const c = i.maxTextures;
  const l = i.maxCubemapSize;
  const h = i.maxTextureSize;
  const u = i.maxSamples;
  const d = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null;
  const f = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
  const m = /* @__PURE__ */ new WeakMap();
  let _;
  const g = /* @__PURE__ */ new WeakMap();
  let p = false;
  try {
    p = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch (R) {
  }
  function v(R, b) {
    return p ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(R, b)
    ) : Js("canvas");
  }
  function x(R, b, B, ne) {
    let se = 1;
    if (R.width > ne || R.height > ne) {
      se = ne / Math.max(R.width, R.height);
    }
    if (se < 1 || b === true) {
      if (typeof HTMLImageElement !== "undefined" && R instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && R instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && R instanceof ImageBitmap) {
        const le = b ? mf : Math.floor;
        const Pe = le(se * R.width);
        const me = le(se * R.height);
        if (_ === void 0)
          _ = v(Pe, me);
        const W = B ? v(Pe, me) : _;
        W.width = Pe;
        W.height = me;
        const ve = W.getContext("2d");
        ve.drawImage(R, 0, 0, Pe, me);
        console.warn("THREE.WebGLRenderer: Texture has been resized from (" + R.width + "x" + R.height + ") to (" + Pe + "x" + me + ").");
        return W;
      } else {
        if ("data" in R) {
          console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + R.width + "x" + R.height + ").");
        }
        return R;
      }
    }
    return R;
  }
  function M(R) {
    return Wc(R.width) && Wc(R.height);
  }
  function S(R) {
    if (o)
      return false;
    return R.wrapS !== Et || R.wrapT !== Et || R.minFilter !== ct && R.minFilter !== lt;
  }
  function E(R, b) {
    return R.generateMipmaps && b && R.minFilter !== ct && R.minFilter !== lt;
  }
  function C(R) {
    r.generateMipmap(R);
  }
  function P(R, b, B, ne, se = false) {
    if (o === false)
      return b;
    if (R !== null) {
      if (r[R] !== void 0)
        return r[R];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + R + "'");
    }
    let le = b;
    if (b === r.RED) {
      if (B === r.FLOAT)
        le = r.R32F;
      if (B === r.HALF_FLOAT)
        le = r.R16F;
      if (B === r.UNSIGNED_BYTE)
        le = r.R8;
    }
    if (b === r.RG) {
      if (B === r.FLOAT)
        le = r.RG32F;
      if (B === r.HALF_FLOAT)
        le = r.RG16F;
      if (B === r.UNSIGNED_BYTE)
        le = r.RG8;
    }
    if (b === r.RGBA) {
      if (B === r.FLOAT)
        le = r.RGBA32F;
      if (B === r.HALF_FLOAT)
        le = r.RGBA16F;
      if (B === r.UNSIGNED_BYTE)
        le = ne === De && se === false ? r.SRGB8_ALPHA8 : r.RGBA8;
      if (B === r.UNSIGNED_SHORT_4_4_4_4)
        le = r.RGBA4;
      if (B === r.UNSIGNED_SHORT_5_5_5_1)
        le = r.RGB5_A1;
    }
    if (le === r.R16F || le === r.R32F || le === r.RG16F || le === r.RG32F || le === r.RGBA16F || le === r.RGBA32F) {
      e.get("EXT_color_buffer_float");
    }
    return le;
  }
  function y(R, b, B) {
    if (E(R, B) === true || R.isFramebufferTexture && R.minFilter !== ct && R.minFilter !== lt) {
      return Math.log2(Math.max(b.width, b.height)) + 1;
    } else if (R.mipmaps !== void 0 && R.mipmaps.length > 0) {
      return R.mipmaps.length;
    } else if (R.isCompressedTexture && Array.isArray(R.image)) {
      return b.mipmaps.length;
    } else {
      return 1;
    }
  }
  function A(R) {
    if (R === ct || R === La || R === Ns) {
      return r.NEAREST;
    }
    return r.LINEAR;
  }
  function O(R) {
    const b = R.target;
    b.removeEventListener("dispose", O);
    U(b);
    if (b.isVideoTexture) {
      m.delete(b);
    }
  }
  function G(R) {
    const b = R.target;
    b.removeEventListener("dispose", G);
    z(b);
  }
  function U(R) {
    const b = n.get(R);
    if (b.__webglInit === void 0)
      return;
    const B = R.source;
    const ne = g.get(B);
    if (ne) {
      const se = ne[b.__cacheKey];
      se.usedTimes--;
      if (se.usedTimes === 0) {
        F(R);
      }
      if (Object.keys(ne).length === 0) {
        g.delete(B);
      }
    }
    n.remove(R);
  }
  function F(R) {
    const b = n.get(R);
    r.deleteTexture(b.__webglTexture);
    const B = R.source;
    const ne = g.get(B);
    delete ne[b.__cacheKey];
    a.memory.textures--;
  }
  function z(R) {
    const b = R.texture;
    const B = n.get(R);
    const ne = n.get(b);
    if (ne.__webglTexture !== void 0) {
      r.deleteTexture(ne.__webglTexture);
      a.memory.textures--;
    }
    if (R.depthTexture) {
      R.depthTexture.dispose();
    }
    if (R.isWebGLCubeRenderTarget) {
      for (let se = 0; se < 6; se++) {
        r.deleteFramebuffer(B.__webglFramebuffer[se]);
        if (B.__webglDepthbuffer)
          r.deleteRenderbuffer(B.__webglDepthbuffer[se]);
      }
    } else {
      r.deleteFramebuffer(B.__webglFramebuffer);
      if (B.__webglDepthbuffer)
        r.deleteRenderbuffer(B.__webglDepthbuffer);
      if (B.__webglMultisampledFramebuffer)
        r.deleteFramebuffer(B.__webglMultisampledFramebuffer);
      if (B.__webglColorRenderbuffer) {
        for (let se = 0; se < B.__webglColorRenderbuffer.length; se++) {
          if (B.__webglColorRenderbuffer[se])
            r.deleteRenderbuffer(B.__webglColorRenderbuffer[se]);
        }
      }
      if (B.__webglDepthRenderbuffer)
        r.deleteRenderbuffer(B.__webglDepthRenderbuffer);
    }
    if (R.isWebGLMultipleRenderTargets) {
      for (let se = 0, le = b.length; se < le; se++) {
        const Pe = n.get(b[se]);
        if (Pe.__webglTexture) {
          r.deleteTexture(Pe.__webglTexture);
          a.memory.textures--;
        }
        n.remove(b[se]);
      }
    }
    n.remove(b);
    n.remove(R);
  }
  let K = 0;
  function Z() {
    K = 0;
  }
  function Y() {
    const R = K;
    if (R >= c) {
      console.warn("THREE.WebGLTextures: Trying to use " + R + " texture units while this GPU supports only " + c);
    }
    K += 1;
    return R;
  }
  function j(R) {
    const b = [];
    b.push(R.wrapS);
    b.push(R.wrapT);
    b.push(R.wrapR || 0);
    b.push(R.magFilter);
    b.push(R.minFilter);
    b.push(R.anisotropy);
    b.push(R.internalFormat);
    b.push(R.format);
    b.push(R.type);
    b.push(R.generateMipmaps);
    b.push(R.premultiplyAlpha);
    b.push(R.flipY);
    b.push(R.unpackAlignment);
    b.push(R.colorSpace);
    return b.join();
  }
  function te(R, b) {
    const B = n.get(R);
    if (R.isVideoTexture)
      ke(R);
    if (R.isRenderTargetTexture === false && R.version > 0 && B.__version !== R.version) {
      const ne = R.image;
      if (ne === null) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      } else if (ne.complete === false) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      } else {
        Le(B, R, b);
        return;
      }
    }
    t.bindTexture(r.TEXTURE_2D, B.__webglTexture, r.TEXTURE0 + b);
  }
  function pe(R, b) {
    const B = n.get(R);
    if (R.version > 0 && B.__version !== R.version) {
      Le(B, R, b);
      return;
    }
    t.bindTexture(r.TEXTURE_2D_ARRAY, B.__webglTexture, r.TEXTURE0 + b);
  }
  function he(R, b) {
    const B = n.get(R);
    if (R.version > 0 && B.__version !== R.version) {
      Le(B, R, b);
      return;
    }
    t.bindTexture(r.TEXTURE_3D, B.__webglTexture, r.TEXTURE0 + b);
  }
  function k(R, b) {
    const B = n.get(R);
    if (R.version > 0 && B.__version !== R.version) {
      Ie(B, R, b);
      return;
    }
    t.bindTexture(r.TEXTURE_CUBE_MAP, B.__webglTexture, r.TEXTURE0 + b);
  }
  const J = {
    [Gs]: r.REPEAT,
    [Et]: r.CLAMP_TO_EDGE,
    [Ws]: r.MIRRORED_REPEAT
  };
  const oe = {
    [ct]: r.NEAREST,
    [La]: r.NEAREST_MIPMAP_NEAREST,
    [Ns]: r.NEAREST_MIPMAP_LINEAR,
    [lt]: r.LINEAR,
    [Ch]: r.LINEAR_MIPMAP_NEAREST,
    [qn]: r.LINEAR_MIPMAP_LINEAR
  };
  function ue(R, b, B) {
    if (B) {
      r.texParameteri(R, r.TEXTURE_WRAP_S, J[b.wrapS]);
      r.texParameteri(R, r.TEXTURE_WRAP_T, J[b.wrapT]);
      if (R === r.TEXTURE_3D || R === r.TEXTURE_2D_ARRAY) {
        r.texParameteri(R, r.TEXTURE_WRAP_R, J[b.wrapR]);
      }
      r.texParameteri(R, r.TEXTURE_MAG_FILTER, oe[b.magFilter]);
      r.texParameteri(R, r.TEXTURE_MIN_FILTER, oe[b.minFilter]);
    } else {
      r.texParameteri(R, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE);
      r.texParameteri(R, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE);
      if (R === r.TEXTURE_3D || R === r.TEXTURE_2D_ARRAY) {
        r.texParameteri(R, r.TEXTURE_WRAP_R, r.CLAMP_TO_EDGE);
      }
      if (b.wrapS !== Et || b.wrapT !== Et) {
        console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
      }
      r.texParameteri(R, r.TEXTURE_MAG_FILTER, A(b.magFilter));
      r.texParameteri(R, r.TEXTURE_MIN_FILTER, A(b.minFilter));
      if (b.minFilter !== ct && b.minFilter !== lt) {
        console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
      }
    }
    if (e.has("EXT_texture_filter_anisotropic") === true) {
      const ne = e.get("EXT_texture_filter_anisotropic");
      if (b.magFilter === ct)
        return;
      if (b.minFilter !== Ns && b.minFilter !== qn)
        return;
      if (b.type === bn && e.has("OES_texture_float_linear") === false)
        return;
      if (o === false && (b.type === ss && e.has("OES_texture_half_float_linear") === false))
        return;
      if (b.anisotropy > 1 || n.get(b).__currentAnisotropy) {
        r.texParameterf(R, ne.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(b.anisotropy, i.getMaxAnisotropy()));
        n.get(b).__currentAnisotropy = b.anisotropy;
      }
    }
  }
  function L(R, b) {
    let B = false;
    if (R.__webglInit === void 0) {
      R.__webglInit = true;
      b.addEventListener("dispose", O);
    }
    const ne = b.source;
    let se = g.get(ne);
    if (se === void 0) {
      se = {};
      g.set(ne, se);
    }
    const le = j(b);
    if (le !== R.__cacheKey) {
      if (se[le] === void 0) {
        se[le] = {
          texture: r.createTexture(),
          usedTimes: 0
        };
        a.memory.textures++;
        B = true;
      }
      se[le].usedTimes++;
      const Pe = se[R.__cacheKey];
      if (Pe !== void 0) {
        se[R.__cacheKey].usedTimes--;
        if (Pe.usedTimes === 0) {
          F(b);
        }
      }
      R.__cacheKey = le;
      R.__webglTexture = se[le].texture;
    }
    return B;
  }
  function Le(R, b, B) {
    let ne = r.TEXTURE_2D;
    if (b.isDataArrayTexture || b.isCompressedArrayTexture)
      ne = r.TEXTURE_2D_ARRAY;
    if (b.isData3DTexture)
      ne = r.TEXTURE_3D;
    const se = L(R, b);
    const le = b.source;
    t.bindTexture(ne, R.__webglTexture, r.TEXTURE0 + B);
    const Pe = n.get(le);
    if (le.version !== Pe.__version || se === true) {
      t.activeTexture(r.TEXTURE0 + B);
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, b.flipY);
      r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, b.premultiplyAlpha);
      r.pixelStorei(r.UNPACK_ALIGNMENT, b.unpackAlignment);
      r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, r.NONE);
      const me = S(b) && M(b.image) === false;
      let W = x(b.image, me, false, h);
      W = Ye(b, W);
      const ve = M(W) || o, Ee = s.convert(b.format, b.colorSpace);
      let Re = s.convert(b.type), _e = P(b.internalFormat, Ee, Re, b.colorSpace);
      ue(ne, b, ve);
      let Se;
      const Xe = b.mipmaps;
      const je = o && b.isVideoTexture !== true;
      const rt = Pe.__version === void 0 || se === true;
      const I = y(b, W, ve);
      if (b.isDepthTexture) {
        _e = r.DEPTH_COMPONENT;
        if (o) {
          if (b.type === bn) {
            _e = r.DEPTH_COMPONENT32F;
          } else if (b.type === Bn) {
            _e = r.DEPTH_COMPONENT24;
          } else if (b.type === gi) {
            _e = r.DEPTH24_STENCIL8;
          } else {
            _e = r.DEPTH_COMPONENT16;
          }
        } else {
          if (b.type === bn) {
            console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
          }
        }
        if (b.format === kn && _e === r.DEPTH_COMPONENT) {
          if (b.type !== Ph && b.type !== Bn) {
            console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
            b.type = Bn;
            Re = s.convert(b.type);
          }
        }
        if (b.format === xi && _e === r.DEPTH_COMPONENT) {
          _e = r.DEPTH_STENCIL;
          if (b.type !== gi) {
            console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
            b.type = gi;
            Re = s.convert(b.type);
          }
        }
        if (rt) {
          if (je) {
            t.texStorage2D(r.TEXTURE_2D, 1, _e, W.width, W.height);
          } else {
            t.texImage2D(r.TEXTURE_2D, 0, _e, W.width, W.height, 0, Ee, Re, null);
          }
        }
      } else if (b.isDataTexture) {
        if (Xe.length > 0 && ve) {
          if (je && rt) {
            t.texStorage2D(r.TEXTURE_2D, I, _e, Xe[0].width, Xe[0].height);
          }
          for (let V = 0, ie = Xe.length; V < ie; V++) {
            Se = Xe[V];
            if (je) {
              t.texSubImage2D(r.TEXTURE_2D, V, 0, 0, Se.width, Se.height, Ee, Re, Se.data);
            } else {
              t.texImage2D(r.TEXTURE_2D, V, _e, Se.width, Se.height, 0, Ee, Re, Se.data);
            }
          }
          b.generateMipmaps = false;
        } else {
          if (je) {
            if (rt) {
              t.texStorage2D(r.TEXTURE_2D, I, _e, W.width, W.height);
            }
            t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, W.width, W.height, Ee, Re, W.data);
          } else {
            t.texImage2D(r.TEXTURE_2D, 0, _e, W.width, W.height, 0, Ee, Re, W.data);
          }
        }
      } else if (b.isCompressedTexture) {
        if (b.isCompressedArrayTexture) {
          if (je && rt) {
            t.texStorage3D(r.TEXTURE_2D_ARRAY, I, _e, Xe[0].width, Xe[0].height, W.depth);
          }
          for (let V = 0, ie = Xe.length; V < ie; V++) {
            Se = Xe[V];
            if (b.format !== Ft) {
              if (Ee !== null) {
                if (je) {
                  t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY, V, 0, 0, 0, Se.width, Se.height, W.depth, Ee, Se.data, 0, 0);
                } else {
                  t.compressedTexImage3D(r.TEXTURE_2D_ARRAY, V, _e, Se.width, Se.height, W.depth, 0, Se.data, 0, 0);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              }
            } else {
              if (je) {
                t.texSubImage3D(r.TEXTURE_2D_ARRAY, V, 0, 0, 0, Se.width, Se.height, W.depth, Ee, Re, Se.data);
              } else {
                t.texImage3D(r.TEXTURE_2D_ARRAY, V, _e, Se.width, Se.height, W.depth, 0, Ee, Re, Se.data);
              }
            }
          }
        } else {
          if (je && rt) {
            t.texStorage2D(r.TEXTURE_2D, I, _e, Xe[0].width, Xe[0].height);
          }
          for (let V = 0, ie = Xe.length; V < ie; V++) {
            Se = Xe[V];
            if (b.format !== Ft) {
              if (Ee !== null) {
                if (je) {
                  t.compressedTexSubImage2D(r.TEXTURE_2D, V, 0, 0, Se.width, Se.height, Ee, Se.data);
                } else {
                  t.compressedTexImage2D(r.TEXTURE_2D, V, _e, Se.width, Se.height, 0, Se.data);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              }
            } else {
              if (je) {
                t.texSubImage2D(r.TEXTURE_2D, V, 0, 0, Se.width, Se.height, Ee, Re, Se.data);
              } else {
                t.texImage2D(r.TEXTURE_2D, V, _e, Se.width, Se.height, 0, Ee, Re, Se.data);
              }
            }
          }
        }
      } else if (b.isDataArrayTexture) {
        if (je) {
          if (rt) {
            t.texStorage3D(r.TEXTURE_2D_ARRAY, I, _e, W.width, W.height, W.depth);
          }
          t.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, 0, W.width, W.height, W.depth, Ee, Re, W.data);
        } else {
          t.texImage3D(r.TEXTURE_2D_ARRAY, 0, _e, W.width, W.height, W.depth, 0, Ee, Re, W.data);
        }
      } else if (b.isData3DTexture) {
        if (je) {
          if (rt) {
            t.texStorage3D(r.TEXTURE_3D, I, _e, W.width, W.height, W.depth);
          }
          t.texSubImage3D(r.TEXTURE_3D, 0, 0, 0, 0, W.width, W.height, W.depth, Ee, Re, W.data);
        } else {
          t.texImage3D(r.TEXTURE_3D, 0, _e, W.width, W.height, W.depth, 0, Ee, Re, W.data);
        }
      } else if (b.isFramebufferTexture) {
        if (rt) {
          if (je) {
            t.texStorage2D(r.TEXTURE_2D, I, _e, W.width, W.height);
          } else {
            let V = W.width, ie = W.height;
            for (let fe = 0; fe < I; fe++) {
              t.texImage2D(r.TEXTURE_2D, fe, _e, V, ie, 0, Ee, Re, null);
              V >>= 1;
              ie >>= 1;
            }
          }
        }
      } else {
        if (Xe.length > 0 && ve) {
          if (je && rt) {
            t.texStorage2D(r.TEXTURE_2D, I, _e, Xe[0].width, Xe[0].height);
          }
          for (let V = 0, ie = Xe.length; V < ie; V++) {
            Se = Xe[V];
            if (je) {
              t.texSubImage2D(r.TEXTURE_2D, V, 0, 0, Ee, Re, Se);
            } else {
              t.texImage2D(r.TEXTURE_2D, V, _e, Ee, Re, Se);
            }
          }
          b.generateMipmaps = false;
        } else {
          if (je) {
            if (rt) {
              t.texStorage2D(r.TEXTURE_2D, I, _e, W.width, W.height);
            }
            t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, Ee, Re, W);
          } else {
            t.texImage2D(r.TEXTURE_2D, 0, _e, Ee, Re, W);
          }
        }
      }
      if (E(b, ve)) {
        C(ne);
      }
      Pe.__version = le.version;
      if (b.onUpdate)
        b.onUpdate(b);
    }
    R.__version = b.version;
  }
  function Ie(R, b, B) {
    if (b.image.length !== 6)
      return;
    const ne = L(R, b);
    const se = b.source;
    t.bindTexture(r.TEXTURE_CUBE_MAP, R.__webglTexture, r.TEXTURE0 + B);
    const le = n.get(se);
    if (se.version !== le.__version || ne === true) {
      t.activeTexture(r.TEXTURE0 + B);
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, b.flipY);
      r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, b.premultiplyAlpha);
      r.pixelStorei(r.UNPACK_ALIGNMENT, b.unpackAlignment);
      r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, r.NONE);
      const Pe = b.isCompressedTexture || b.image[0].isCompressedTexture;
      const me = b.image[0] && b.image[0].isDataTexture;
      const W = [];
      for (let V = 0; V < 6; V++) {
        if (!Pe && !me) {
          W[V] = x(b.image[V], false, true, l);
        } else {
          W[V] = me ? b.image[V].image : b.image[V];
        }
        W[V] = Ye(b, W[V]);
      }
      const ve = W[0], Ee = M(ve) || o, Re = s.convert(b.format, b.colorSpace), _e = s.convert(b.type), Se = P(b.internalFormat, Re, _e, b.colorSpace);
      const Xe = o && b.isVideoTexture !== true;
      const je = le.__version === void 0 || ne === true;
      let rt = y(b, ve, Ee);
      ue(r.TEXTURE_CUBE_MAP, b, Ee);
      let I;
      if (Pe) {
        if (Xe && je) {
          t.texStorage2D(r.TEXTURE_CUBE_MAP, rt, Se, ve.width, ve.height);
        }
        for (let V = 0; V < 6; V++) {
          I = W[V].mipmaps;
          for (let ie = 0; ie < I.length; ie++) {
            const fe = I[ie];
            if (b.format !== Ft) {
              if (Re !== null) {
                if (Xe) {
                  t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, ie, 0, 0, fe.width, fe.height, Re, fe.data);
                } else {
                  t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, ie, Se, fe.width, fe.height, 0, fe.data);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
              }
            } else {
              if (Xe) {
                t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, ie, 0, 0, fe.width, fe.height, Re, _e, fe.data);
              } else {
                t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, ie, Se, fe.width, fe.height, 0, Re, _e, fe.data);
              }
            }
          }
        }
      } else {
        I = b.mipmaps;
        if (Xe && je) {
          if (I.length > 0)
            rt++;
          t.texStorage2D(r.TEXTURE_CUBE_MAP, rt, Se, W[0].width, W[0].height);
        }
        for (let V = 0; V < 6; V++) {
          if (me) {
            if (Xe) {
              t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, 0, 0, 0, W[V].width, W[V].height, Re, _e, W[V].data);
            } else {
              t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, 0, Se, W[V].width, W[V].height, 0, Re, _e, W[V].data);
            }
            for (let ie = 0; ie < I.length; ie++) {
              const fe = I[ie];
              const Me = fe.image[V].image;
              if (Xe) {
                t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, ie + 1, 0, 0, Me.width, Me.height, Re, _e, Me.data);
              } else {
                t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, ie + 1, Se, Me.width, Me.height, 0, Re, _e, Me.data);
              }
            }
          } else {
            if (Xe) {
              t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, 0, 0, 0, Re, _e, W[V]);
            } else {
              t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, 0, Se, Re, _e, W[V]);
            }
            for (let ie = 0; ie < I.length; ie++) {
              const fe = I[ie];
              if (Xe) {
                t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, ie + 1, 0, 0, Re, _e, fe.image[V]);
              } else {
                t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + V, ie + 1, Se, Re, _e, fe.image[V]);
              }
            }
          }
        }
      }
      if (E(b, Ee)) {
        C(r.TEXTURE_CUBE_MAP);
      }
      le.__version = se.version;
      if (b.onUpdate)
        b.onUpdate(b);
    }
    R.__version = b.version;
  }
  function re(R, b, B, ne, se) {
    const le = s.convert(B.format, B.colorSpace);
    const Pe = s.convert(B.type);
    const me = P(B.internalFormat, le, Pe, B.colorSpace);
    const W = n.get(b);
    if (!W.__hasExternalTextures) {
      if (se === r.TEXTURE_3D || se === r.TEXTURE_2D_ARRAY) {
        t.texImage3D(se, 0, me, b.width, b.height, b.depth, 0, le, Pe, null);
      } else {
        t.texImage2D(se, 0, me, b.width, b.height, 0, le, Pe, null);
      }
    }
    t.bindFramebuffer(r.FRAMEBUFFER, R);
    if (be(b)) {
      d.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, ne, se, n.get(B).__webglTexture, 0, Ae(b));
    } else if (se === r.TEXTURE_2D || se >= r.TEXTURE_CUBE_MAP_POSITIVE_X && se <= r.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
      r.framebufferTexture2D(r.FRAMEBUFFER, ne, se, n.get(B).__webglTexture, 0);
    }
    t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function ye(R, b, B) {
    r.bindRenderbuffer(r.RENDERBUFFER, R);
    if (b.depthBuffer && !b.stencilBuffer) {
      let ne = r.DEPTH_COMPONENT16;
      if (B || be(b)) {
        const se = b.depthTexture;
        if (se && se.isDepthTexture) {
          if (se.type === bn) {
            ne = r.DEPTH_COMPONENT32F;
          } else if (se.type === Bn) {
            ne = r.DEPTH_COMPONENT24;
          }
        }
        const le = Ae(b);
        if (be(b)) {
          d.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, le, ne, b.width, b.height);
        } else {
          r.renderbufferStorageMultisample(r.RENDERBUFFER, le, ne, b.width, b.height);
        }
      } else {
        r.renderbufferStorage(r.RENDERBUFFER, ne, b.width, b.height);
      }
      r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.RENDERBUFFER, R);
    } else if (b.depthBuffer && b.stencilBuffer) {
      const ne = Ae(b);
      if (B && be(b) === false) {
        r.renderbufferStorageMultisample(r.RENDERBUFFER, ne, r.DEPTH24_STENCIL8, b.width, b.height);
      } else if (be(b)) {
        d.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, ne, r.DEPTH24_STENCIL8, b.width, b.height);
      } else {
        r.renderbufferStorage(r.RENDERBUFFER, r.DEPTH_STENCIL, b.width, b.height);
      }
      r.framebufferRenderbuffer(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.RENDERBUFFER, R);
    } else {
      const ne = b.isWebGLMultipleRenderTargets === true ? b.texture : [b.texture];
      for (let se = 0; se < ne.length; se++) {
        const le = ne[se];
        const Pe = s.convert(le.format, le.colorSpace);
        const me = s.convert(le.type);
        const W = P(le.internalFormat, Pe, me, le.colorSpace);
        const ve = Ae(b);
        if (B && be(b) === false) {
          r.renderbufferStorageMultisample(r.RENDERBUFFER, ve, W, b.width, b.height);
        } else if (be(b)) {
          d.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, ve, W, b.width, b.height);
        } else {
          r.renderbufferStorage(r.RENDERBUFFER, W, b.width, b.height);
        }
      }
    }
    r.bindRenderbuffer(r.RENDERBUFFER, null);
  }
  function Q(R, b) {
    const B = b && b.isWebGLCubeRenderTarget;
    if (B)
      throw new Error("Depth Texture with cube render targets is not supported");
    t.bindFramebuffer(r.FRAMEBUFFER, R);
    if (!(b.depthTexture && b.depthTexture.isDepthTexture)) {
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    }
    if (!n.get(b.depthTexture).__webglTexture || b.depthTexture.image.width !== b.width || b.depthTexture.image.height !== b.height) {
      b.depthTexture.image.width = b.width;
      b.depthTexture.image.height = b.height;
      b.depthTexture.needsUpdate = true;
    }
    te(b.depthTexture, 0);
    const ne = n.get(b.depthTexture).__webglTexture;
    const se = Ae(b);
    if (b.depthTexture.format === kn) {
      if (be(b)) {
        d.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, ne, 0, se);
      } else {
        r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, ne, 0);
      }
    } else if (b.depthTexture.format === xi) {
      if (be(b)) {
        d.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, ne, 0, se);
      } else {
        r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, ne, 0);
      }
    } else {
      throw new Error("Unknown depthTexture format");
    }
  }
  function X(R) {
    const b = n.get(R);
    const B = R.isWebGLCubeRenderTarget === true;
    if (R.depthTexture && !b.__autoAllocateDepthBuffer) {
      if (B)
        throw new Error("target.depthTexture not supported in Cube render targets");
      Q(b.__webglFramebuffer, R);
    } else {
      if (B) {
        b.__webglDepthbuffer = [];
        for (let ne = 0; ne < 6; ne++) {
          t.bindFramebuffer(r.FRAMEBUFFER, b.__webglFramebuffer[ne]);
          b.__webglDepthbuffer[ne] = r.createRenderbuffer();
          ye(b.__webglDepthbuffer[ne], R, false);
        }
      } else {
        t.bindFramebuffer(r.FRAMEBUFFER, b.__webglFramebuffer);
        b.__webglDepthbuffer = r.createRenderbuffer();
        ye(b.__webglDepthbuffer, R, false);
      }
    }
    t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function ee(R, b, B) {
    const ne = n.get(R);
    if (b !== void 0) {
      re(ne.__webglFramebuffer, R, R.texture, r.COLOR_ATTACHMENT0, r.TEXTURE_2D);
    }
    if (B !== void 0) {
      X(R);
    }
  }
  function ge(R) {
    const b = R.texture;
    const B = n.get(R);
    const ne = n.get(b);
    R.addEventListener("dispose", G);
    if (R.isWebGLMultipleRenderTargets !== true) {
      if (ne.__webglTexture === void 0) {
        ne.__webglTexture = r.createTexture();
      }
      ne.__version = b.version;
      a.memory.textures++;
    }
    const se = R.isWebGLCubeRenderTarget === true;
    const le = R.isWebGLMultipleRenderTargets === true;
    const Pe = M(R) || o;
    if (se) {
      B.__webglFramebuffer = [];
      for (let me = 0; me < 6; me++) {
        B.__webglFramebuffer[me] = r.createFramebuffer();
      }
    } else {
      B.__webglFramebuffer = r.createFramebuffer();
      if (le) {
        if (i.drawBuffers) {
          const me = R.texture;
          for (let W = 0, ve = me.length; W < ve; W++) {
            const Ee = n.get(me[W]);
            if (Ee.__webglTexture === void 0) {
              Ee.__webglTexture = r.createTexture();
              a.memory.textures++;
            }
          }
        } else {
          console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
        }
      }
      if (o && R.samples > 0 && be(R) === false) {
        const me = le ? b : [b];
        B.__webglMultisampledFramebuffer = r.createFramebuffer();
        B.__webglColorRenderbuffer = [];
        t.bindFramebuffer(r.FRAMEBUFFER, B.__webglMultisampledFramebuffer);
        for (let W = 0; W < me.length; W++) {
          const ve = me[W];
          B.__webglColorRenderbuffer[W] = r.createRenderbuffer();
          r.bindRenderbuffer(r.RENDERBUFFER, B.__webglColorRenderbuffer[W]);
          const Ee = s.convert(ve.format, ve.colorSpace);
          const Re = s.convert(ve.type);
          const _e = P(ve.internalFormat, Ee, Re, ve.colorSpace, R.isXRRenderTarget === true);
          const Se = Ae(R);
          r.renderbufferStorageMultisample(r.RENDERBUFFER, Se, _e, R.width, R.height);
          r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + W, r.RENDERBUFFER, B.__webglColorRenderbuffer[W]);
        }
        r.bindRenderbuffer(r.RENDERBUFFER, null);
        if (R.depthBuffer) {
          B.__webglDepthRenderbuffer = r.createRenderbuffer();
          ye(B.__webglDepthRenderbuffer, R, true);
        }
        t.bindFramebuffer(r.FRAMEBUFFER, null);
      }
    }
    if (se) {
      t.bindTexture(r.TEXTURE_CUBE_MAP, ne.__webglTexture);
      ue(r.TEXTURE_CUBE_MAP, b, Pe);
      for (let me = 0; me < 6; me++) {
        re(B.__webglFramebuffer[me], R, b, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + me);
      }
      if (E(b, Pe)) {
        C(r.TEXTURE_CUBE_MAP);
      }
      t.unbindTexture();
    } else if (le) {
      const me = R.texture;
      for (let W = 0, ve = me.length; W < ve; W++) {
        const Ee = me[W];
        const Re = n.get(Ee);
        t.bindTexture(r.TEXTURE_2D, Re.__webglTexture);
        ue(r.TEXTURE_2D, Ee, Pe);
        re(B.__webglFramebuffer, R, Ee, r.COLOR_ATTACHMENT0 + W, r.TEXTURE_2D);
        if (E(Ee, Pe)) {
          C(r.TEXTURE_2D);
        }
      }
      t.unbindTexture();
    } else {
      let me = r.TEXTURE_2D;
      if (R.isWebGL3DRenderTarget || R.isWebGLArrayRenderTarget) {
        if (o) {
          me = R.isWebGL3DRenderTarget ? r.TEXTURE_3D : r.TEXTURE_2D_ARRAY;
        } else {
          console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");
        }
      }
      t.bindTexture(me, ne.__webglTexture);
      ue(me, b, Pe);
      re(B.__webglFramebuffer, R, b, r.COLOR_ATTACHMENT0, me);
      if (E(b, Pe)) {
        C(me);
      }
      t.unbindTexture();
    }
    if (R.depthBuffer) {
      X(R);
    }
  }
  function ce(R) {
    const b = M(R) || o;
    const B = R.isWebGLMultipleRenderTargets === true ? R.texture : [R.texture];
    for (let ne = 0, se = B.length; ne < se; ne++) {
      const le = B[ne];
      if (E(le, b)) {
        const Pe = R.isWebGLCubeRenderTarget ? r.TEXTURE_CUBE_MAP : r.TEXTURE_2D;
        const me = n.get(le).__webglTexture;
        t.bindTexture(Pe, me);
        C(Pe);
        t.unbindTexture();
      }
    }
  }
  function we(R) {
    if (o && R.samples > 0 && be(R) === false) {
      const b = R.isWebGLMultipleRenderTargets ? R.texture : [R.texture];
      const B = R.width;
      const ne = R.height;
      let se = r.COLOR_BUFFER_BIT;
      const le = [];
      const Pe = R.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT;
      const me = n.get(R);
      const W = R.isWebGLMultipleRenderTargets === true;
      if (W) {
        for (let ve = 0; ve < b.length; ve++) {
          t.bindFramebuffer(r.FRAMEBUFFER, me.__webglMultisampledFramebuffer);
          r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + ve, r.RENDERBUFFER, null);
          t.bindFramebuffer(r.FRAMEBUFFER, me.__webglFramebuffer);
          r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + ve, r.TEXTURE_2D, null, 0);
        }
      }
      t.bindFramebuffer(r.READ_FRAMEBUFFER, me.__webglMultisampledFramebuffer);
      t.bindFramebuffer(r.DRAW_FRAMEBUFFER, me.__webglFramebuffer);
      for (let ve = 0; ve < b.length; ve++) {
        le.push(r.COLOR_ATTACHMENT0 + ve);
        if (R.depthBuffer) {
          le.push(Pe);
        }
        const Ee = me.__ignoreDepthValues !== void 0 ? me.__ignoreDepthValues : false;
        if (Ee === false) {
          if (R.depthBuffer)
            se |= r.DEPTH_BUFFER_BIT;
          if (R.stencilBuffer)
            se |= r.STENCIL_BUFFER_BIT;
        }
        if (W) {
          r.framebufferRenderbuffer(r.READ_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.RENDERBUFFER, me.__webglColorRenderbuffer[ve]);
        }
        if (Ee === true) {
          r.invalidateFramebuffer(r.READ_FRAMEBUFFER, [Pe]);
          r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, [Pe]);
        }
        if (W) {
          const Re = n.get(b[ve]).__webglTexture;
          r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, Re, 0);
        }
        r.blitFramebuffer(0, 0, B, ne, 0, 0, B, ne, se, r.NEAREST);
        if (f) {
          r.invalidateFramebuffer(r.READ_FRAMEBUFFER, le);
        }
      }
      t.bindFramebuffer(r.READ_FRAMEBUFFER, null);
      t.bindFramebuffer(r.DRAW_FRAMEBUFFER, null);
      if (W) {
        for (let ve = 0; ve < b.length; ve++) {
          t.bindFramebuffer(r.FRAMEBUFFER, me.__webglMultisampledFramebuffer);
          r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + ve, r.RENDERBUFFER, me.__webglColorRenderbuffer[ve]);
          const Ee = n.get(b[ve]).__webglTexture;
          t.bindFramebuffer(r.FRAMEBUFFER, me.__webglFramebuffer);
          r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + ve, r.TEXTURE_2D, Ee, 0);
        }
      }
      t.bindFramebuffer(r.DRAW_FRAMEBUFFER, me.__webglMultisampledFramebuffer);
    }
  }
  function Ae(R) {
    return Math.min(u, R.samples);
  }
  function be(R) {
    const b = n.get(R);
    return o && R.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === true && b.__useRenderToTexture !== false;
  }
  function ke(R) {
    const b = a.render.frame;
    if (m.get(R) !== b) {
      m.set(R, b);
      R.update();
    }
  }
  function Ye(R, b) {
    const B = R.colorSpace;
    const ne = R.format;
    const se = R.type;
    if (R.isCompressedTexture === true || R.format === Ia)
      return b;
    if (B !== tn && B !== Hn) {
      if (B === De) {
        if (o === false) {
          if (e.has("EXT_sRGB") === true && ne === Ft) {
            R.format = Ia;
            R.minFilter = lt;
            R.generateMipmaps = false;
          } else {
            b = $s.sRGBToLinear(b);
          }
        } else {
          if (ne !== Ft || se !== Yn) {
            console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
          }
        }
      } else {
        console.error("THREE.WebGLTextures: Unsupported texture color space:", B);
      }
    }
    return b;
  }
  this.allocateTextureUnit = Y;
  this.resetTextureUnits = Z;
  this.setTexture2D = te;
  this.setTexture2DArray = pe;
  this.setTexture3D = he;
  this.setTextureCube = k;
  this.rebindTextures = ee;
  this.setupRenderTarget = ge;
  this.updateRenderTargetMipmap = ce;
  this.updateMultisampleRenderTarget = we;
  this.setupDepthRenderbuffer = X;
  this.setupFrameBufferTexture = re;
  this.useMultisampledRTT = be;
}
function Tf(r, e, t) {
  const n = t.isWebGL2;
  function i(s, a = Hn) {
    let o;
    if (s === Yn)
      return r.UNSIGNED_BYTE;
    if (s === Zd)
      return r.UNSIGNED_SHORT_4_4_4_4;
    if (s === Jd)
      return r.UNSIGNED_SHORT_5_5_5_1;
    if (s === Xd)
      return r.BYTE;
    if (s === qd)
      return r.SHORT;
    if (s === Ph)
      return r.UNSIGNED_SHORT;
    if (s === Yd)
      return r.INT;
    if (s === Bn)
      return r.UNSIGNED_INT;
    if (s === bn)
      return r.FLOAT;
    if (s === ss) {
      if (n)
        return r.HALF_FLOAT;
      o = e.get("OES_texture_half_float");
      if (o !== null) {
        return o.HALF_FLOAT_OES;
      } else {
        return null;
      }
    }
    if (s === $d)
      return r.ALPHA;
    if (s === Ft)
      return r.RGBA;
    if (s === Kd)
      return r.LUMINANCE;
    if (s === jd)
      return r.LUMINANCE_ALPHA;
    if (s === kn)
      return r.DEPTH_COMPONENT;
    if (s === xi)
      return r.DEPTH_STENCIL;
    if (s === Ia) {
      o = e.get("EXT_sRGB");
      if (o !== null) {
        return o.SRGB_ALPHA_EXT;
      } else {
        return null;
      }
    }
    if (s === Qd)
      return r.RED;
    if (s === ef)
      return r.RED_INTEGER;
    if (s === tf)
      return r.RG;
    if (s === nf)
      return r.RG_INTEGER;
    if (s === sf)
      return r.RGBA_INTEGER;
    if (s === ba || s === Ea || s === Ta || s === wa) {
      if (a === De) {
        o = e.get("WEBGL_compressed_texture_s3tc_srgb");
        if (o !== null) {
          if (s === ba)
            return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (s === Ea)
            return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (s === Ta)
            return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (s === wa)
            return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      } else {
        o = e.get("WEBGL_compressed_texture_s3tc");
        if (o !== null) {
          if (s === ba)
            return o.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (s === Ea)
            return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (s === Ta)
            return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (s === wa)
            return o.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      }
    }
    if (s === yc || s === Mc || s === Sc || s === bc) {
      o = e.get("WEBGL_compressed_texture_pvrtc");
      if (o !== null) {
        if (s === yc)
          return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (s === Mc)
          return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (s === Sc)
          return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (s === bc)
          return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else {
        return null;
      }
    }
    if (s === rf) {
      o = e.get("WEBGL_compressed_texture_etc1");
      if (o !== null) {
        return o.COMPRESSED_RGB_ETC1_WEBGL;
      } else {
        return null;
      }
    }
    if (s === Ec || s === Tc) {
      o = e.get("WEBGL_compressed_texture_etc");
      if (o !== null) {
        if (s === Ec)
          return a === De ? o.COMPRESSED_SRGB8_ETC2 : o.COMPRESSED_RGB8_ETC2;
        if (s === Tc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : o.COMPRESSED_RGBA8_ETC2_EAC;
      } else {
        return null;
      }
    }
    if (s === wc || s === Ac || s === Rc || s === Cc || s === Pc || s === Lc || s === Ic || s === Uc || s === Dc || s === Nc || s === Fc || s === Oc || s === Bc || s === zc) {
      o = e.get("WEBGL_compressed_texture_astc");
      if (o !== null) {
        if (s === wc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : o.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (s === Ac)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : o.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (s === Rc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : o.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (s === Cc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : o.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (s === Pc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : o.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (s === Lc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : o.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (s === Ic)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : o.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (s === Uc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : o.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (s === Dc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : o.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (s === Nc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : o.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (s === Fc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : o.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (s === Oc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : o.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (s === Bc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : o.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (s === zc)
          return a === De ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : o.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else {
        return null;
      }
    }
    if (s === Aa) {
      o = e.get("EXT_texture_compression_bptc");
      if (o !== null) {
        if (s === Aa)
          return a === De ? o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : o.COMPRESSED_RGBA_BPTC_UNORM_EXT;
      } else {
        return null;
      }
    }
    if (s === af || s === kc || s === Vc || s === Hc) {
      o = e.get("EXT_texture_compression_rgtc");
      if (o !== null) {
        if (s === Aa)
          return o.COMPRESSED_RED_RGTC1_EXT;
        if (s === kc)
          return o.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (s === Vc)
          return o.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (s === Hc)
          return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else {
        return null;
      }
    }
    if (s === gi) {
      if (n)
        return r.UNSIGNED_INT_24_8;
      o = e.get("WEBGL_depth_texture");
      if (o !== null) {
        return o.UNSIGNED_INT_24_8_WEBGL;
      } else {
        return null;
      }
    }
    return r[s] !== void 0 ? r[s] : null;
  }
  return { convert: i };
}
var Na = class extends dt {
  constructor(e = []) {
    super();
    this.isArrayCamera = true;
    this.cameras = e;
  }
};
var zn = class extends Ze {
  constructor() {
    super();
    this.isGroup = true;
    this.type = "Group";
  }
};
var xx = { type: "move" };
var Bs = class {
  constructor() {
    this._targetRay = null;
    this._grip = null;
    this._hand = null;
  }
  getHandSpace() {
    if (this._hand === null) {
      this._hand = new zn();
      this._hand.matrixAutoUpdate = false;
      this._hand.visible = false;
      this._hand.joints = {};
      this._hand.inputState = { pinching: false };
    }
    return this._hand;
  }
  getTargetRaySpace() {
    if (this._targetRay === null) {
      this._targetRay = new zn();
      this._targetRay.matrixAutoUpdate = false;
      this._targetRay.visible = false;
      this._targetRay.hasLinearVelocity = false;
      this._targetRay.linearVelocity = new w();
      this._targetRay.hasAngularVelocity = false;
      this._targetRay.angularVelocity = new w();
    }
    return this._targetRay;
  }
  getGripSpace() {
    if (this._grip === null) {
      this._grip = new zn();
      this._grip.matrixAutoUpdate = false;
      this._grip.visible = false;
      this._grip.hasLinearVelocity = false;
      this._grip.linearVelocity = new w();
      this._grip.hasAngularVelocity = false;
      this._grip.angularVelocity = new w();
    }
    return this._grip;
  }
  dispatchEvent(e) {
    if (this._targetRay !== null) {
      this._targetRay.dispatchEvent(e);
    }
    if (this._grip !== null) {
      this._grip.dispatchEvent(e);
    }
    if (this._hand !== null) {
      this._hand.dispatchEvent(e);
    }
    return this;
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t) {
        for (const n of e.hand.values()) {
          this._getHandJoint(t, n);
        }
      }
    }
    this.dispatchEvent({ type: "connected", data: e });
    return this;
  }
  disconnect(e) {
    this.dispatchEvent({ type: "disconnected", data: e });
    if (this._targetRay !== null) {
      this._targetRay.visible = false;
    }
    if (this._grip !== null) {
      this._grip.visible = false;
    }
    if (this._hand !== null) {
      this._hand.visible = false;
    }
    return this;
  }
  update(e, t, n) {
    let i = null;
    let s = null;
    let a = null;
    const o = this._targetRay;
    const c = this._grip;
    const l = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (l && e.hand) {
        a = true;
        for (const _ of e.hand.values()) {
          const g = t.getJointPose(_, n);
          const p = this._getHandJoint(l, _);
          if (g !== null) {
            p.matrix.fromArray(g.transform.matrix);
            p.matrix.decompose(p.position, p.rotation, p.scale);
            p.matrixWorldNeedsUpdate = true;
            p.jointRadius = g.radius;
          }
          p.visible = g !== null;
        }
        const h = l.joints["index-finger-tip"];
        const u = l.joints["thumb-tip"];
        const d = h.position.distanceTo(u.position);
        const f = 0.02;
        const m = 5e-3;
        if (l.inputState.pinching && d > f + m) {
          l.inputState.pinching = false;
          this.dispatchEvent({
            type: "pinchend",
            handedness: e.handedness,
            target: this
          });
        } else if (!l.inputState.pinching && d <= f - m) {
          l.inputState.pinching = true;
          this.dispatchEvent({
            type: "pinchstart",
            handedness: e.handedness,
            target: this
          });
        }
      } else {
        if (c !== null && e.gripSpace) {
          s = t.getPose(e.gripSpace, n);
          if (s !== null) {
            c.matrix.fromArray(s.transform.matrix);
            c.matrix.decompose(c.position, c.rotation, c.scale);
            c.matrixWorldNeedsUpdate = true;
            if (s.linearVelocity) {
              c.hasLinearVelocity = true;
              c.linearVelocity.copy(s.linearVelocity);
            } else {
              c.hasLinearVelocity = false;
            }
            if (s.angularVelocity) {
              c.hasAngularVelocity = true;
              c.angularVelocity.copy(s.angularVelocity);
            } else {
              c.hasAngularVelocity = false;
            }
          }
        }
      }
      if (o !== null) {
        i = t.getPose(e.targetRaySpace, n);
        if (i === null && s !== null) {
          i = s;
        }
        if (i !== null) {
          o.matrix.fromArray(i.transform.matrix);
          o.matrix.decompose(o.position, o.rotation, o.scale);
          o.matrixWorldNeedsUpdate = true;
          if (i.linearVelocity) {
            o.hasLinearVelocity = true;
            o.linearVelocity.copy(i.linearVelocity);
          } else {
            o.hasLinearVelocity = false;
          }
          if (i.angularVelocity) {
            o.hasAngularVelocity = true;
            o.angularVelocity.copy(i.angularVelocity);
          } else {
            o.hasAngularVelocity = false;
          }
          this.dispatchEvent(xx);
        }
      }
    }
    if (o !== null) {
      o.visible = i !== null;
    }
    if (c !== null) {
      c.visible = s !== null;
    }
    if (l !== null) {
      l.visible = a !== null;
    }
    return this;
  }
  // private method
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const n = new zn();
      n.matrixAutoUpdate = false;
      n.visible = false;
      e.joints[t.jointName] = n;
      e.add(n);
    }
    return e.joints[t.jointName];
  }
};
var Fa = class extends pt {
  constructor(e, t, n, i, s, a, o, c, l, h) {
    h = h !== void 0 ? h : kn;
    if (h !== kn && h !== xi) {
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    if (n === void 0 && h === kn)
      n = Bn;
    if (n === void 0 && h === xi)
      n = gi;
    super(null, i, s, a, o, c, h, n, l);
    this.isDepthTexture = true;
    this.image = { width: e, height: t };
    this.magFilter = o !== void 0 ? o : ct;
    this.minFilter = c !== void 0 ? c : ct;
    this.flipY = false;
    this.generateMipmaps = false;
  }
};
var ol = class extends nn {
  constructor(e, t) {
    super();
    const n = this;
    let i = null;
    let s = 1;
    let a = null;
    let o = "local-floor";
    let c = 1;
    let l = null;
    let h = null;
    let u = null;
    let d = null;
    let f = null;
    let m = null;
    const _ = t.getContextAttributes();
    let g = null;
    let p = null;
    const v = [];
    const x = [];
    const M = /* @__PURE__ */ new Set();
    const S = /* @__PURE__ */ new Map();
    const E = new dt();
    E.layers.enable(1);
    E.viewport = new $e();
    const C = new dt();
    C.layers.enable(2);
    C.viewport = new $e();
    const P = [E, C];
    const y = new Na();
    y.layers.enable(1);
    y.layers.enable(2);
    let A = null;
    let O = null;
    this.cameraAutoUpdate = true;
    this.enabled = false;
    this.isPresenting = false;
    this.getController = function(k) {
      let J = v[k];
      if (J === void 0) {
        J = new Bs();
        v[k] = J;
      }
      return J.getTargetRaySpace();
    };
    this.getControllerGrip = function(k) {
      let J = v[k];
      if (J === void 0) {
        J = new Bs();
        v[k] = J;
      }
      return J.getGripSpace();
    };
    this.getHand = function(k) {
      let J = v[k];
      if (J === void 0) {
        J = new Bs();
        v[k] = J;
      }
      return J.getHandSpace();
    };
    function G(k) {
      const J = x.indexOf(k.inputSource);
      if (J === -1) {
        return;
      }
      const oe = v[J];
      if (oe !== void 0) {
        oe.update(k.inputSource, k.frame, l || a);
        oe.dispatchEvent({ type: k.type, data: k.inputSource });
      }
    }
    function U() {
      i.removeEventListener("select", G);
      i.removeEventListener("selectstart", G);
      i.removeEventListener("selectend", G);
      i.removeEventListener("squeeze", G);
      i.removeEventListener("squeezestart", G);
      i.removeEventListener("squeezeend", G);
      i.removeEventListener("end", U);
      i.removeEventListener("inputsourceschange", F);
      for (let k = 0; k < v.length; k++) {
        const J = x[k];
        if (J === null)
          continue;
        x[k] = null;
        v[k].disconnect(J);
      }
      A = null;
      O = null;
      e.setRenderTarget(g);
      f = null;
      d = null;
      u = null;
      i = null;
      p = null;
      he.stop();
      n.isPresenting = false;
      n.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(k) {
      s = k;
      if (n.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
      }
    };
    this.setReferenceSpaceType = function(k) {
      o = k;
      if (n.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }
    };
    this.getReferenceSpace = function() {
      return l || a;
    };
    this.setReferenceSpace = function(k) {
      l = k;
    };
    this.getBaseLayer = function() {
      return d !== null ? d : f;
    };
    this.getBinding = function() {
      return u;
    };
    this.getFrame = function() {
      return m;
    };
    this.getSession = function() {
      return i;
    };
    this.setSession = async function(k) {
      i = k;
      if (i !== null) {
        g = e.getRenderTarget();
        i.addEventListener("select", G);
        i.addEventListener("selectstart", G);
        i.addEventListener("selectend", G);
        i.addEventListener("squeeze", G);
        i.addEventListener("squeezestart", G);
        i.addEventListener("squeezeend", G);
        i.addEventListener("end", U);
        i.addEventListener("inputsourceschange", F);
        if (_.xrCompatible !== true) {
          await t.makeXRCompatible();
        }
        if (i.renderState.layers === void 0 || e.capabilities.isWebGL2 === false) {
          const J = {
            antialias: i.renderState.layers === void 0 ? _.antialias : true,
            alpha: true,
            depth: _.depth,
            stencil: _.stencil,
            framebufferScaleFactor: s
          };
          f = new XRWebGLLayer(i, t, J);
          i.updateRenderState({ baseLayer: f });
          p = new zt(
            f.framebufferWidth,
            f.framebufferHeight,
            {
              format: Ft,
              type: Yn,
              colorSpace: e.outputColorSpace,
              stencilBuffer: _.stencil
            }
          );
        } else {
          let J = null;
          let oe = null;
          let ue = null;
          if (_.depth) {
            ue = _.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24;
            J = _.stencil ? xi : kn;
            oe = _.stencil ? gi : Bn;
          }
          const L = {
            colorFormat: t.RGBA8,
            depthFormat: ue,
            scaleFactor: s
          };
          u = new XRWebGLBinding(i, t);
          d = u.createProjectionLayer(L);
          i.updateRenderState({ layers: [d] });
          p = new zt(
            d.textureWidth,
            d.textureHeight,
            {
              format: Ft,
              type: Yn,
              depthTexture: new Fa(d.textureWidth, d.textureHeight, oe, void 0, void 0, void 0, void 0, void 0, void 0, J),
              stencilBuffer: _.stencil,
              colorSpace: e.outputColorSpace,
              samples: _.antialias ? 4 : 0
            }
          );
          const Le = e.properties.get(p);
          Le.__ignoreDepthValues = d.ignoreDepthValues;
        }
        p.isXRRenderTarget = true;
        this.setFoveation(c);
        l = null;
        a = await i.requestReferenceSpace(o);
        he.setContext(i);
        he.start();
        n.isPresenting = true;
        n.dispatchEvent({ type: "sessionstart" });
      }
    };
    this.getEnvironmentBlendMode = function() {
      if (i !== null) {
        return i.environmentBlendMode;
      }
    };
    function F(k) {
      for (let J = 0; J < k.removed.length; J++) {
        const oe = k.removed[J];
        const ue = x.indexOf(oe);
        if (ue >= 0) {
          x[ue] = null;
          v[ue].disconnect(oe);
        }
      }
      for (let J = 0; J < k.added.length; J++) {
        const oe = k.added[J];
        let ue = x.indexOf(oe);
        if (ue === -1) {
          for (let Le = 0; Le < v.length; Le++) {
            if (Le >= x.length) {
              x.push(oe);
              ue = Le;
              break;
            } else if (x[Le] === null) {
              x[Le] = oe;
              ue = Le;
              break;
            }
          }
          if (ue === -1)
            break;
        }
        const L = v[ue];
        if (L) {
          L.connect(oe);
        }
      }
    }
    const z = new w();
    const K = new w();
    function Z(k, J, oe) {
      z.setFromMatrixPosition(J.matrixWorld);
      K.setFromMatrixPosition(oe.matrixWorld);
      const ue = z.distanceTo(K);
      const L = J.projectionMatrix.elements;
      const Le = oe.projectionMatrix.elements;
      const Ie = L[14] / (L[10] - 1);
      const re = L[14] / (L[10] + 1);
      const ye = (L[9] + 1) / L[5];
      const Q = (L[9] - 1) / L[5];
      const X = (L[8] - 1) / L[0];
      const ee = (Le[8] + 1) / Le[0];
      const ge = Ie * X;
      const ce = Ie * ee;
      const we = ue / (-X + ee);
      const Ae = we * -X;
      J.matrixWorld.decompose(k.position, k.quaternion, k.scale);
      k.translateX(Ae);
      k.translateZ(we);
      k.matrixWorld.compose(k.position, k.quaternion, k.scale);
      k.matrixWorldInverse.copy(k.matrixWorld).invert();
      const be = Ie + we;
      const ke = re + we;
      const Ye = ge - Ae;
      const R = ce + (ue - Ae);
      const b = ye * re / ke * be;
      const B = Q * re / ke * be;
      k.projectionMatrix.makePerspective(Ye, R, b, B, be, ke);
      k.projectionMatrixInverse.copy(k.projectionMatrix).invert();
    }
    function Y(k, J) {
      if (J === null) {
        k.matrixWorld.copy(k.matrix);
      } else {
        k.matrixWorld.multiplyMatrices(J.matrixWorld, k.matrix);
      }
      k.matrixWorldInverse.copy(k.matrixWorld).invert();
    }
    this.updateCamera = function(k) {
      if (i === null)
        return;
      y.near = C.near = E.near = k.near;
      y.far = C.far = E.far = k.far;
      if (A !== y.near || O !== y.far) {
        i.updateRenderState({
          depthNear: y.near,
          depthFar: y.far
        });
        A = y.near;
        O = y.far;
      }
      const J = k.parent;
      const oe = y.cameras;
      Y(y, J);
      for (let ue = 0; ue < oe.length; ue++) {
        Y(oe[ue], J);
      }
      if (oe.length === 2) {
        Z(y, E, C);
      } else {
        y.projectionMatrix.copy(E.projectionMatrix);
      }
      j(k, y, J);
    };
    function j(k, J, oe) {
      if (oe === null) {
        k.matrix.copy(J.matrixWorld);
      } else {
        k.matrix.copy(oe.matrixWorld);
        k.matrix.invert();
        k.matrix.multiply(J.matrixWorld);
      }
      k.matrix.decompose(k.position, k.quaternion, k.scale);
      k.updateMatrixWorld(true);
      const ue = k.children;
      for (let L = 0, Le = ue.length; L < Le; L++) {
        ue[L].updateMatrixWorld(true);
      }
      k.projectionMatrix.copy(J.projectionMatrix);
      k.projectionMatrixInverse.copy(J.projectionMatrixInverse);
      if (k.isPerspectiveCamera) {
        k.fov = rs * 2 * Math.atan(1 / k.projectionMatrix.elements[5]);
        k.zoom = 1;
      }
    }
    this.getCamera = function() {
      return y;
    };
    this.getFoveation = function() {
      if (d === null && f === null) {
        return void 0;
      }
      return c;
    };
    this.setFoveation = function(k) {
      c = k;
      if (d !== null) {
        d.fixedFoveation = k;
      }
      if (f !== null && f.fixedFoveation !== void 0) {
        f.fixedFoveation = k;
      }
    };
    this.getPlanes = function() {
      return M;
    };
    let te = null;
    function pe(k, J) {
      h = J.getViewerPose(l || a);
      m = J;
      if (h !== null) {
        const oe = h.views;
        if (f !== null) {
          e.setRenderTargetFramebuffer(p, f.framebuffer);
          e.setRenderTarget(p);
        }
        let ue = false;
        if (oe.length !== y.cameras.length) {
          y.cameras.length = 0;
          ue = true;
        }
        for (let L = 0; L < oe.length; L++) {
          const Le = oe[L];
          let Ie = null;
          if (f !== null) {
            Ie = f.getViewport(Le);
          } else {
            const ye = u.getViewSubImage(d, Le);
            Ie = ye.viewport;
            if (L === 0) {
              e.setRenderTargetTextures(
                p,
                ye.colorTexture,
                d.ignoreDepthValues ? void 0 : ye.depthStencilTexture
              );
              e.setRenderTarget(p);
            }
          }
          let re = P[L];
          if (re === void 0) {
            re = new dt();
            re.layers.enable(L);
            re.viewport = new $e();
            P[L] = re;
          }
          re.matrix.fromArray(Le.transform.matrix);
          re.matrix.decompose(re.position, re.quaternion, re.scale);
          re.projectionMatrix.fromArray(Le.projectionMatrix);
          re.projectionMatrixInverse.copy(re.projectionMatrix).invert();
          re.viewport.set(Ie.x, Ie.y, Ie.width, Ie.height);
          if (L === 0) {
            y.matrix.copy(re.matrix);
            y.matrix.decompose(y.position, y.quaternion, y.scale);
          }
          if (ue === true) {
            y.cameras.push(re);
          }
        }
      }
      for (let oe = 0; oe < v.length; oe++) {
        const ue = x[oe];
        const L = v[oe];
        if (ue !== null && L !== void 0) {
          L.update(ue, J, l || a);
        }
      }
      if (te)
        te(k, J);
      if (J.detectedPlanes) {
        n.dispatchEvent({ type: "planesdetected", data: J.detectedPlanes });
        let oe = null;
        for (const ue of M) {
          if (!J.detectedPlanes.has(ue)) {
            if (oe === null) {
              oe = [];
            }
            oe.push(ue);
          }
        }
        if (oe !== null) {
          for (const ue of oe) {
            M.delete(ue);
            S.delete(ue);
            n.dispatchEvent({ type: "planeremoved", data: ue });
          }
        }
        for (const ue of J.detectedPlanes) {
          if (!M.has(ue)) {
            M.add(ue);
            S.set(ue, J.lastChangedTime);
            n.dispatchEvent({ type: "planeadded", data: ue });
          } else {
            const L = S.get(ue);
            if (ue.lastChangedTime > L) {
              S.set(ue, ue.lastChangedTime);
              n.dispatchEvent({ type: "planechanged", data: ue });
            }
          }
        }
      }
      m = null;
    }
    const he = new yf();
    he.setAnimationLoop(pe);
    this.setAnimationLoop = function(k) {
      te = k;
    };
    this.dispose = function() {
    };
  }
};
function vx(r, e) {
  function t(g, p) {
    if (g.matrixAutoUpdate === true) {
      g.updateMatrix();
    }
    p.value.copy(g.matrix);
  }
  function n(g, p) {
    p.color.getRGB(g.fogColor.value, xf(r));
    if (p.isFog) {
      g.fogNear.value = p.near;
      g.fogFar.value = p.far;
    } else if (p.isFogExp2) {
      g.fogDensity.value = p.density;
    }
  }
  function i(g, p, v, x, M) {
    if (p.isMeshBasicMaterial) {
      s(g, p);
    } else if (p.isMeshLambertMaterial) {
      s(g, p);
    } else if (p.isMeshToonMaterial) {
      s(g, p);
      u(g, p);
    } else if (p.isMeshPhongMaterial) {
      s(g, p);
      h(g, p);
    } else if (p.isMeshStandardMaterial) {
      s(g, p);
      d(g, p);
      if (p.isMeshPhysicalMaterial) {
        f(g, p, M);
      }
    } else if (p.isMeshMatcapMaterial) {
      s(g, p);
      m(g, p);
    } else if (p.isMeshDepthMaterial) {
      s(g, p);
    } else if (p.isMeshDistanceMaterial) {
      s(g, p);
      _(g, p);
    } else if (p.isMeshNormalMaterial) {
      s(g, p);
    } else if (p.isLineBasicMaterial) {
      a(g, p);
      if (p.isLineDashedMaterial) {
        o(g, p);
      }
    } else if (p.isPointsMaterial) {
      c(g, p, v, x);
    } else if (p.isSpriteMaterial) {
      l(g, p);
    } else if (p.isShadowMaterial) {
      g.color.value.copy(p.color);
      g.opacity.value = p.opacity;
    } else if (p.isShaderMaterial) {
      p.uniformsNeedUpdate = false;
    }
  }
  function s(g, p) {
    g.opacity.value = p.opacity;
    if (p.color) {
      g.diffuse.value.copy(p.color);
    }
    if (p.emissive) {
      g.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity);
    }
    if (p.map) {
      g.map.value = p.map;
      t(p.map, g.mapTransform);
    }
    if (p.alphaMap) {
      g.alphaMap.value = p.alphaMap;
      t(p.alphaMap, g.alphaMapTransform);
    }
    if (p.bumpMap) {
      g.bumpMap.value = p.bumpMap;
      t(p.bumpMap, g.bumpMapTransform);
      g.bumpScale.value = p.bumpScale;
      if (p.side === Pt) {
        g.bumpScale.value *= -1;
      }
    }
    if (p.normalMap) {
      g.normalMap.value = p.normalMap;
      t(p.normalMap, g.normalMapTransform);
      g.normalScale.value.copy(p.normalScale);
      if (p.side === Pt) {
        g.normalScale.value.negate();
      }
    }
    if (p.displacementMap) {
      g.displacementMap.value = p.displacementMap;
      t(p.displacementMap, g.displacementMapTransform);
      g.displacementScale.value = p.displacementScale;
      g.displacementBias.value = p.displacementBias;
    }
    if (p.emissiveMap) {
      g.emissiveMap.value = p.emissiveMap;
      t(p.emissiveMap, g.emissiveMapTransform);
    }
    if (p.specularMap) {
      g.specularMap.value = p.specularMap;
      t(p.specularMap, g.specularMapTransform);
    }
    if (p.alphaTest > 0) {
      g.alphaTest.value = p.alphaTest;
    }
    const v = e.get(p).envMap;
    if (v) {
      g.envMap.value = v;
      g.flipEnvMap.value = v.isCubeTexture && v.isRenderTargetTexture === false ? -1 : 1;
      g.reflectivity.value = p.reflectivity;
      g.ior.value = p.ior;
      g.refractionRatio.value = p.refractionRatio;
    }
    if (p.lightMap) {
      g.lightMap.value = p.lightMap;
      const x = r.useLegacyLights === true ? Math.PI : 1;
      g.lightMapIntensity.value = p.lightMapIntensity * x;
      t(p.lightMap, g.lightMapTransform);
    }
    if (p.aoMap) {
      g.aoMap.value = p.aoMap;
      g.aoMapIntensity.value = p.aoMapIntensity;
      t(p.aoMap, g.aoMapTransform);
    }
  }
  function a(g, p) {
    g.diffuse.value.copy(p.color);
    g.opacity.value = p.opacity;
    if (p.map) {
      g.map.value = p.map;
      t(p.map, g.mapTransform);
    }
  }
  function o(g, p) {
    g.dashSize.value = p.dashSize;
    g.totalSize.value = p.dashSize + p.gapSize;
    g.scale.value = p.scale;
  }
  function c(g, p, v, x) {
    g.diffuse.value.copy(p.color);
    g.opacity.value = p.opacity;
    g.size.value = p.size * v;
    g.scale.value = x * 0.5;
    if (p.map) {
      g.map.value = p.map;
      t(p.map, g.uvTransform);
    }
    if (p.alphaMap) {
      g.alphaMap.value = p.alphaMap;
    }
    if (p.alphaTest > 0) {
      g.alphaTest.value = p.alphaTest;
    }
  }
  function l(g, p) {
    g.diffuse.value.copy(p.color);
    g.opacity.value = p.opacity;
    g.rotation.value = p.rotation;
    if (p.map) {
      g.map.value = p.map;
      t(p.map, g.mapTransform);
    }
    if (p.alphaMap) {
      g.alphaMap.value = p.alphaMap;
    }
    if (p.alphaTest > 0) {
      g.alphaTest.value = p.alphaTest;
    }
  }
  function h(g, p) {
    g.specular.value.copy(p.specular);
    g.shininess.value = Math.max(p.shininess, 1e-4);
  }
  function u(g, p) {
    if (p.gradientMap) {
      g.gradientMap.value = p.gradientMap;
    }
  }
  function d(g, p) {
    g.metalness.value = p.metalness;
    if (p.metalnessMap) {
      g.metalnessMap.value = p.metalnessMap;
      t(p.metalnessMap, g.metalnessMapTransform);
    }
    g.roughness.value = p.roughness;
    if (p.roughnessMap) {
      g.roughnessMap.value = p.roughnessMap;
      t(p.roughnessMap, g.roughnessMapTransform);
    }
    const v = e.get(p).envMap;
    if (v) {
      g.envMapIntensity.value = p.envMapIntensity;
    }
  }
  function f(g, p, v) {
    g.ior.value = p.ior;
    if (p.sheen > 0) {
      g.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen);
      g.sheenRoughness.value = p.sheenRoughness;
      if (p.sheenColorMap) {
        g.sheenColorMap.value = p.sheenColorMap;
        t(p.sheenColorMap, g.sheenColorMapTransform);
      }
      if (p.sheenRoughnessMap) {
        g.sheenRoughnessMap.value = p.sheenRoughnessMap;
        t(p.sheenRoughnessMap, g.sheenRoughnessMapTransform);
      }
    }
    if (p.clearcoat > 0) {
      g.clearcoat.value = p.clearcoat;
      g.clearcoatRoughness.value = p.clearcoatRoughness;
      if (p.clearcoatMap) {
        g.clearcoatMap.value = p.clearcoatMap;
        t(p.clearcoatMap, g.clearcoatMapTransform);
      }
      if (p.clearcoatRoughnessMap) {
        g.clearcoatRoughnessMap.value = p.clearcoatRoughnessMap;
        t(p.clearcoatRoughnessMap, g.clearcoatRoughnessMapTransform);
      }
      if (p.clearcoatNormalMap) {
        g.clearcoatNormalMap.value = p.clearcoatNormalMap;
        t(p.clearcoatNormalMap, g.clearcoatNormalMapTransform);
        g.clearcoatNormalScale.value.copy(p.clearcoatNormalScale);
        if (p.side === Pt) {
          g.clearcoatNormalScale.value.negate();
        }
      }
    }
    if (p.iridescence > 0) {
      g.iridescence.value = p.iridescence;
      g.iridescenceIOR.value = p.iridescenceIOR;
      g.iridescenceThicknessMinimum.value = p.iridescenceThicknessRange[0];
      g.iridescenceThicknessMaximum.value = p.iridescenceThicknessRange[1];
      if (p.iridescenceMap) {
        g.iridescenceMap.value = p.iridescenceMap;
        t(p.iridescenceMap, g.iridescenceMapTransform);
      }
      if (p.iridescenceThicknessMap) {
        g.iridescenceThicknessMap.value = p.iridescenceThicknessMap;
        t(p.iridescenceThicknessMap, g.iridescenceThicknessMapTransform);
      }
    }
    if (p.transmission > 0) {
      g.transmission.value = p.transmission;
      g.transmissionSamplerMap.value = v.texture;
      g.transmissionSamplerSize.value.set(v.width, v.height);
      if (p.transmissionMap) {
        g.transmissionMap.value = p.transmissionMap;
        t(p.transmissionMap, g.transmissionMapTransform);
      }
      g.thickness.value = p.thickness;
      if (p.thicknessMap) {
        g.thicknessMap.value = p.thicknessMap;
        t(p.thicknessMap, g.thicknessMapTransform);
      }
      g.attenuationDistance.value = p.attenuationDistance;
      g.attenuationColor.value.copy(p.attenuationColor);
    }
    g.specularIntensity.value = p.specularIntensity;
    g.specularColor.value.copy(p.specularColor);
    if (p.specularColorMap) {
      g.specularColorMap.value = p.specularColorMap;
      t(p.specularColorMap, g.specularColorMapTransform);
    }
    if (p.specularIntensityMap) {
      g.specularIntensityMap.value = p.specularIntensityMap;
      t(p.specularIntensityMap, g.specularIntensityMapTransform);
    }
  }
  function m(g, p) {
    if (p.matcap) {
      g.matcap.value = p.matcap;
    }
  }
  function _(g, p) {
    const v = e.get(p).light;
    g.referencePosition.value.setFromMatrixPosition(v.matrixWorld);
    g.nearDistance.value = v.shadow.camera.near;
    g.farDistance.value = v.shadow.camera.far;
  }
  return {
    refreshFogUniforms: n,
    refreshMaterialUniforms: i
  };
}
function yx(r, e, t, n) {
  let i = {};
  let s = {};
  let a = [];
  const o = t.isWebGL2 ? r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
  function c(v, x) {
    const M = x.program;
    n.uniformBlockBinding(v, M);
  }
  function l(v, x) {
    let M = i[v.id];
    if (M === void 0) {
      m(v);
      M = h(v);
      i[v.id] = M;
      v.addEventListener("dispose", g);
    }
    const S = x.program;
    n.updateUBOMapping(v, S);
    const E = e.render.frame;
    if (s[v.id] !== E) {
      d(v);
      s[v.id] = E;
    }
  }
  function h(v) {
    const x = u();
    v.__bindingPointIndex = x;
    const M = r.createBuffer();
    const S = v.__size;
    const E = v.usage;
    r.bindBuffer(r.UNIFORM_BUFFER, M);
    r.bufferData(r.UNIFORM_BUFFER, S, E);
    r.bindBuffer(r.UNIFORM_BUFFER, null);
    r.bindBufferBase(r.UNIFORM_BUFFER, x, M);
    return M;
  }
  function u() {
    for (let v = 0; v < o; v++) {
      if (a.indexOf(v) === -1) {
        a.push(v);
        return v;
      }
    }
    console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
    return 0;
  }
  function d(v) {
    const x = i[v.id];
    const M = v.uniforms;
    const S = v.__cache;
    r.bindBuffer(r.UNIFORM_BUFFER, x);
    for (let E = 0, C = M.length; E < C; E++) {
      const P = M[E];
      if (f(P, E, S) === true) {
        const y = P.__offset;
        const A = Array.isArray(P.value) ? P.value : [P.value];
        let O = 0;
        for (let G = 0; G < A.length; G++) {
          const U = A[G];
          const F = _(U);
          if (typeof U === "number") {
            P.__data[0] = U;
            r.bufferSubData(r.UNIFORM_BUFFER, y + O, P.__data);
          } else if (U.isMatrix3) {
            P.__data[0] = U.elements[0];
            P.__data[1] = U.elements[1];
            P.__data[2] = U.elements[2];
            P.__data[3] = U.elements[0];
            P.__data[4] = U.elements[3];
            P.__data[5] = U.elements[4];
            P.__data[6] = U.elements[5];
            P.__data[7] = U.elements[0];
            P.__data[8] = U.elements[6];
            P.__data[9] = U.elements[7];
            P.__data[10] = U.elements[8];
            P.__data[11] = U.elements[0];
          } else {
            U.toArray(P.__data, O);
            O += F.storage / Float32Array.BYTES_PER_ELEMENT;
          }
        }
        r.bufferSubData(r.UNIFORM_BUFFER, y, P.__data);
      }
    }
    r.bindBuffer(r.UNIFORM_BUFFER, null);
  }
  function f(v, x, M) {
    const S = v.value;
    if (M[x] === void 0) {
      if (typeof S === "number") {
        M[x] = S;
      } else {
        const E = Array.isArray(S) ? S : [S];
        const C = [];
        for (let P = 0; P < E.length; P++) {
          C.push(E[P].clone());
        }
        M[x] = C;
      }
      return true;
    } else {
      if (typeof S === "number") {
        if (M[x] !== S) {
          M[x] = S;
          return true;
        }
      } else {
        const E = Array.isArray(M[x]) ? M[x] : [M[x]];
        const C = Array.isArray(S) ? S : [S];
        for (let P = 0; P < E.length; P++) {
          const y = E[P];
          if (y.equals(C[P]) === false) {
            y.copy(C[P]);
            return true;
          }
        }
      }
    }
    return false;
  }
  function m(v) {
    const x = v.uniforms;
    let M = 0;
    const S = 16;
    let E = 0;
    for (let C = 0, P = x.length; C < P; C++) {
      const y = x[C];
      const A = {
        boundary: 0,
        // bytes
        storage: 0
        // bytes
      };
      const O = Array.isArray(y.value) ? y.value : [y.value];
      for (let G = 0, U = O.length; G < U; G++) {
        const F = O[G];
        const z = _(F);
        A.boundary += z.boundary;
        A.storage += z.storage;
      }
      y.__data = new Float32Array(A.storage / Float32Array.BYTES_PER_ELEMENT);
      y.__offset = M;
      if (C > 0) {
        E = M % S;
        const G = S - E;
        if (E !== 0 && G - A.boundary < 0) {
          M += S - E;
          y.__offset = M;
        }
      }
      M += A.storage;
    }
    E = M % S;
    if (E > 0)
      M += S - E;
    v.__size = M;
    v.__cache = {};
    return this;
  }
  function _(v) {
    const x = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    if (typeof v === "number") {
      x.boundary = 4;
      x.storage = 4;
    } else if (v.isVector2) {
      x.boundary = 8;
      x.storage = 8;
    } else if (v.isVector3 || v.isColor) {
      x.boundary = 16;
      x.storage = 12;
    } else if (v.isVector4) {
      x.boundary = 16;
      x.storage = 16;
    } else if (v.isMatrix3) {
      x.boundary = 48;
      x.storage = 48;
    } else if (v.isMatrix4) {
      x.boundary = 64;
      x.storage = 64;
    } else if (v.isTexture) {
      console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
    } else {
      console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", v);
    }
    return x;
  }
  function g(v) {
    const x = v.target;
    x.removeEventListener("dispose", g);
    const M = a.indexOf(x.__bindingPointIndex);
    a.splice(M, 1);
    r.deleteBuffer(i[x.id]);
    delete i[x.id];
    delete s[x.id];
  }
  function p() {
    for (const v in i) {
      r.deleteBuffer(i[v]);
    }
    a = [];
    i = {};
    s = {};
  }
  return {
    bind: c,
    update: l,
    dispose: p
  };
}
function Mx() {
  const r = Js("canvas");
  r.style.display = "block";
  return r;
}
var Oa = class {
  constructor(e = {}) {
    const {
      canvas: t = Mx(),
      context: n = null,
      depth: i = true,
      stencil: s = true,
      alpha: a = false,
      antialias: o = false,
      premultipliedAlpha: c = true,
      preserveDrawingBuffer: l = false,
      powerPreference: h = "default",
      failIfMajorPerformanceCaveat: u = false
    } = e;
    this.isWebGLRenderer = true;
    let d;
    if (n !== null) {
      d = n.getContextAttributes().alpha;
    } else {
      d = a;
    }
    let f = null;
    let m = null;
    const _ = [];
    const g = [];
    this.domElement = t;
    this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: true,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    };
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    this.sortObjects = true;
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    this.outputColorSpace = De;
    this.useLegacyLights = true;
    this.toneMapping = hn;
    this.toneMappingExposure = 1;
    const p = this;
    let v = false;
    let x = 0;
    let M = 0;
    let S = null;
    let E = -1;
    let C = null;
    const P = new $e();
    const y = new $e();
    let A = null;
    let O = t.width;
    let G = t.height;
    let U = 1;
    let F = null;
    let z = null;
    const K = new $e(0, 0, O, G);
    const Z = new $e(0, 0, O, G);
    let Y = false;
    const j = new hs();
    let te = false;
    let pe = false;
    let he = null;
    const k = new Ne();
    const J = new w();
    const oe = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
    function ue() {
      return S === null ? U : 1;
    }
    let L = n;
    function Le(T, N) {
      for (let H = 0; H < T.length; H++) {
        const D = T[H];
        const q = t.getContext(D, N);
        if (q !== null)
          return q;
      }
      return null;
    }
    try {
      const T = {
        alpha: true,
        depth: i,
        stencil: s,
        antialias: o,
        premultipliedAlpha: c,
        preserveDrawingBuffer: l,
        powerPreference: h,
        failIfMajorPerformanceCaveat: u
      };
      if ("setAttribute" in t)
        t.setAttribute("data-engine", `three.js r${Co}`);
      t.addEventListener("webglcontextlost", Se, false);
      t.addEventListener("webglcontextrestored", Xe, false);
      t.addEventListener("webglcontextcreationerror", je, false);
      if (L === null) {
        const N = ["webgl2", "webgl", "experimental-webgl"];
        if (p.isWebGL1Renderer === true) {
          N.shift();
        }
        L = Le(N, T);
        if (L === null) {
          if (Le(N)) {
            throw new Error("Error creating WebGL context with your selected attributes.");
          } else {
            throw new Error("Error creating WebGL context.");
          }
        }
      }
      if (L.getShaderPrecisionFormat === void 0) {
        L.getShaderPrecisionFormat = function() {
          return { "rangeMin": 1, "rangeMax": 1, "precision": 1 };
        };
      }
    } catch (T) {
      console.error("THREE.WebGLRenderer: " + T.message);
      throw T;
    }
    let Ie, re, ye, Q;
    let X, ee, ge, ce, we, Ae, be;
    let ke, Ye, R, b, B, ne;
    let se, le, Pe, me;
    let W, ve, Ee;
    function Re() {
      Ie = new G_(L);
      re = new O_(L, Ie, e);
      Ie.init(re);
      W = new Tf(L, Ie, re);
      ye = new gx(L, Ie, re);
      Q = new q_(L);
      X = new sx();
      ee = new _x(L, Ie, ye, X, re, W, Q);
      ge = new z_(p);
      ce = new H_(p);
      we = new sm(L, re);
      ve = new N_(L, Ie, we, re);
      Ae = new W_(L, we, Q, ve);
      be = new $_(L, Ae, we, Q);
      le = new J_(L, re, ee);
      B = new B_(X);
      ke = new ix(p, ge, ce, Ie, re, ve, B);
      Ye = new vx(p, X);
      R = new ax();
      b = new dx(Ie, re);
      se = new D_(p, ge, ce, ye, be, d, c);
      ne = new mx(p, be, re);
      Ee = new yx(L, Q, re, ye);
      Pe = new F_(L, Ie, Q, re);
      me = new X_(L, Ie, Q, re);
      Q.programs = ke.programs;
      p.capabilities = re;
      p.extensions = Ie;
      p.properties = X;
      p.renderLists = R;
      p.shadowMap = ne;
      p.state = ye;
      p.info = Q;
    }
    Re();
    const _e = new ol(p, L);
    this.xr = _e;
    this.getContext = function() {
      return L;
    };
    this.getContextAttributes = function() {
      return L.getContextAttributes();
    };
    this.forceContextLoss = function() {
      const T = Ie.get("WEBGL_lose_context");
      if (T)
        T.loseContext();
    };
    this.forceContextRestore = function() {
      const T = Ie.get("WEBGL_lose_context");
      if (T)
        T.restoreContext();
    };
    this.getPixelRatio = function() {
      return U;
    };
    this.setPixelRatio = function(T) {
      if (T === void 0)
        return;
      U = T;
      this.setSize(O, G, false);
    };
    this.getSize = function(T) {
      return T.set(O, G);
    };
    this.setSize = function(T, N, H = true) {
      if (_e.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      O = T;
      G = N;
      t.width = Math.floor(T * U);
      t.height = Math.floor(N * U);
      if (H === true) {
        t.style.width = T + "px";
        t.style.height = N + "px";
      }
      this.setViewport(0, 0, T, N);
    };
    this.getDrawingBufferSize = function(T) {
      return T.set(O * U, G * U).floor();
    };
    this.setDrawingBufferSize = function(T, N, H) {
      O = T;
      G = N;
      U = H;
      t.width = Math.floor(T * H);
      t.height = Math.floor(N * H);
      this.setViewport(0, 0, T, N);
    };
    this.getCurrentViewport = function(T) {
      return T.copy(P);
    };
    this.getViewport = function(T) {
      return T.copy(K);
    };
    this.setViewport = function(T, N, H, D) {
      if (T.isVector4) {
        K.set(T.x, T.y, T.z, T.w);
      } else {
        K.set(T, N, H, D);
      }
      ye.viewport(P.copy(K).multiplyScalar(U).floor());
    };
    this.getScissor = function(T) {
      return T.copy(Z);
    };
    this.setScissor = function(T, N, H, D) {
      if (T.isVector4) {
        Z.set(T.x, T.y, T.z, T.w);
      } else {
        Z.set(T, N, H, D);
      }
      ye.scissor(y.copy(Z).multiplyScalar(U).floor());
    };
    this.getScissorTest = function() {
      return Y;
    };
    this.setScissorTest = function(T) {
      ye.setScissorTest(Y = T);
    };
    this.setOpaqueSort = function(T) {
      F = T;
    };
    this.setTransparentSort = function(T) {
      z = T;
    };
    this.getClearColor = function(T) {
      return T.copy(se.getClearColor());
    };
    this.setClearColor = function() {
      se.setClearColor.apply(se, arguments);
    };
    this.getClearAlpha = function() {
      return se.getClearAlpha();
    };
    this.setClearAlpha = function() {
      se.setClearAlpha.apply(se, arguments);
    };
    this.clear = function(T = true, N = true, H = true) {
      let D = 0;
      if (T)
        D |= L.COLOR_BUFFER_BIT;
      if (N)
        D |= L.DEPTH_BUFFER_BIT;
      if (H)
        D |= L.STENCIL_BUFFER_BIT;
      L.clear(D);
    };
    this.clearColor = function() {
      this.clear(true, false, false);
    };
    this.clearDepth = function() {
      this.clear(false, true, false);
    };
    this.clearStencil = function() {
      this.clear(false, false, true);
    };
    this.dispose = function() {
      t.removeEventListener("webglcontextlost", Se, false);
      t.removeEventListener("webglcontextrestored", Xe, false);
      t.removeEventListener("webglcontextcreationerror", je, false);
      R.dispose();
      b.dispose();
      X.dispose();
      ge.dispose();
      ce.dispose();
      be.dispose();
      ve.dispose();
      Ee.dispose();
      ke.dispose();
      _e.dispose();
      _e.removeEventListener("sessionstart", Me);
      _e.removeEventListener("sessionend", et);
      if (he) {
        he.dispose();
        he = null;
      }
      tt.stop();
    };
    function Se(T) {
      T.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      v = true;
    }
    function Xe() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      v = false;
      const T = Q.autoReset;
      const N = ne.enabled;
      const H = ne.autoUpdate;
      const D = ne.needsUpdate;
      const q = ne.type;
      Re();
      Q.autoReset = T;
      ne.enabled = N;
      ne.autoUpdate = H;
      ne.needsUpdate = D;
      ne.type = q;
    }
    function je(T) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", T.statusMessage);
    }
    function rt(T) {
      const N = T.target;
      N.removeEventListener("dispose", rt);
      I(N);
    }
    function I(T) {
      V(T);
      X.remove(T);
    }
    function V(T) {
      const N = X.get(T).programs;
      if (N !== void 0) {
        N.forEach(function(H) {
          ke.releaseProgram(H);
        });
        if (T.isShaderMaterial) {
          ke.releaseShaderCache(T);
        }
      }
    }
    this.renderBufferDirect = function(T, N, H, D, q, Te) {
      if (N === null)
        N = oe;
      const Ce = q.isMesh && q.matrixWorld.determinant() < 0;
      const Ue = Uf(T, N, H, D, q);
      ye.setMaterial(D, Ce);
      let Be = H.index;
      let Ve = 1;
      if (D.wireframe === true) {
        Be = Ae.getWireframeAttribute(H);
        Ve = 2;
      }
      const He = H.drawRange;
      const We = H.attributes.position;
      let Qe = He.start * Ve;
      let wt = (He.start + He.count) * Ve;
      if (Te !== null) {
        Qe = Math.max(Qe, Te.start * Ve);
        wt = Math.min(wt, (Te.start + Te.count) * Ve);
      }
      if (Be !== null) {
        Qe = Math.max(Qe, 0);
        wt = Math.min(wt, Be.count);
      } else if (We !== void 0 && We !== null) {
        Qe = Math.max(Qe, 0);
        wt = Math.min(wt, We.count);
      }
      const $t = wt - Qe;
      if ($t < 0 || $t === Infinity)
        return;
      ve.setup(q, D, Ue, H, Be);
      let jn;
      let ht = Pe;
      if (Be !== null) {
        jn = we.get(Be);
        ht = me;
        ht.setIndex(jn);
      }
      if (q.isMesh) {
        if (D.wireframe === true) {
          ye.setLineWidth(D.wireframeLinewidth * ue());
          ht.setMode(L.LINES);
        } else {
          ht.setMode(L.TRIANGLES);
        }
      } else if (q.isLine) {
        let qe = D.linewidth;
        if (qe === void 0)
          qe = 1;
        ye.setLineWidth(qe * ue());
        if (q.isLineSegments) {
          ht.setMode(L.LINES);
        } else if (q.isLineLoop) {
          ht.setMode(L.LINE_LOOP);
        } else {
          ht.setMode(L.LINE_STRIP);
        }
      } else if (q.isPoints) {
        ht.setMode(L.POINTS);
      } else if (q.isSprite) {
        ht.setMode(L.TRIANGLES);
      }
      if (q.isInstancedMesh) {
        ht.renderInstances(Qe, $t, q.count);
      } else if (H.isInstancedBufferGeometry) {
        const qe = H._maxInstanceCount !== void 0 ? H._maxInstanceCount : Infinity;
        const Do = Math.min(H.instanceCount, qe);
        ht.renderInstances(Qe, $t, Do);
      } else {
        ht.render(Qe, $t);
      }
    };
    this.compile = function(T, N) {
      function H(D, q, Te) {
        if (D.transparent === true && D.side === ln && D.forceSinglePass === false) {
          D.side = Pt;
          D.needsUpdate = true;
          Nr(D, q, Te);
          D.side = Rn;
          D.needsUpdate = true;
          Nr(D, q, Te);
          D.side = ln;
        } else {
          Nr(D, q, Te);
        }
      }
      m = b.get(T);
      m.init();
      g.push(m);
      T.traverseVisible(function(D) {
        if (D.isLight && D.layers.test(N.layers)) {
          m.pushLight(D);
          if (D.castShadow) {
            m.pushShadow(D);
          }
        }
      });
      m.setupLights(p.useLegacyLights);
      T.traverse(function(D) {
        const q = D.material;
        if (q) {
          if (Array.isArray(q)) {
            for (let Te = 0; Te < q.length; Te++) {
              const Ce = q[Te];
              H(Ce, T, D);
            }
          } else {
            H(q, T, D);
          }
        }
      });
      g.pop();
      m = null;
    };
    let ie = null;
    function fe(T) {
      if (ie)
        ie(T);
    }
    function Me() {
      tt.stop();
    }
    function et() {
      tt.start();
    }
    const tt = new yf();
    tt.setAnimationLoop(fe);
    if (typeof self !== "undefined")
      tt.setContext(self);
    this.setAnimationLoop = function(T) {
      ie = T;
      _e.setAnimationLoop(T);
      T === null ? tt.stop() : tt.start();
    };
    _e.addEventListener("sessionstart", Me);
    _e.addEventListener("sessionend", et);
    this.render = function(T, N) {
      if (N !== void 0 && N.isCamera !== true) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (v === true)
        return;
      if (T.matrixWorldAutoUpdate === true)
        T.updateMatrixWorld();
      if (N.parent === null && N.matrixWorldAutoUpdate === true)
        N.updateMatrixWorld();
      if (_e.enabled === true && _e.isPresenting === true) {
        if (_e.cameraAutoUpdate === true)
          _e.updateCamera(N);
        N = _e.getCamera();
      }
      if (T.isScene === true)
        T.onBeforeRender(p, T, N, S);
      m = b.get(T, g.length);
      m.init();
      g.push(m);
      k.multiplyMatrices(N.projectionMatrix, N.matrixWorldInverse);
      j.setFromProjectionMatrix(k);
      pe = this.localClippingEnabled;
      te = B.init(this.clippingPlanes, pe);
      f = R.get(T, _.length);
      f.init();
      _.push(f);
      Mt(T, N, 0, p.sortObjects);
      f.finish();
      if (p.sortObjects === true) {
        f.sort(F, z);
      }
      if (te === true)
        B.beginShadows();
      const H = m.state.shadowsArray;
      ne.render(H, T, N);
      if (te === true)
        B.endShadows();
      if (this.info.autoReset === true)
        this.info.reset();
      se.render(f, T);
      m.setupLights(p.useLegacyLights);
      if (N.isArrayCamera) {
        const D = N.cameras;
        for (let q = 0, Te = D.length; q < Te; q++) {
          const Ce = D[q];
          In(f, T, Ce, Ce.viewport);
        }
      } else {
        In(f, T, N);
      }
      if (S !== null) {
        ee.updateMultisampleRenderTarget(S);
        ee.updateRenderTargetMipmap(S);
      }
      if (T.isScene === true)
        T.onAfterRender(p, T, N);
      ve.resetDefaultState();
      E = -1;
      C = null;
      g.pop();
      if (g.length > 0) {
        m = g[g.length - 1];
      } else {
        m = null;
      }
      _.pop();
      if (_.length > 0) {
        f = _[_.length - 1];
      } else {
        f = null;
      }
    };
    function Mt(T, N, H, D) {
      if (T.visible === false)
        return;
      const q = T.layers.test(N.layers);
      if (q) {
        if (T.isGroup) {
          H = T.renderOrder;
        } else if (T.isLOD) {
          if (T.autoUpdate === true)
            T.update(N);
        } else if (T.isLight) {
          m.pushLight(T);
          if (T.castShadow) {
            m.pushShadow(T);
          }
        } else if (T.isSprite) {
          if (!T.frustumCulled || j.intersectsSprite(T)) {
            if (D) {
              J.setFromMatrixPosition(T.matrixWorld).applyMatrix4(k);
            }
            const Ce = be.update(T);
            const Ue = T.material;
            if (Ue.visible) {
              f.push(T, Ce, Ue, H, J.z, null);
            }
          }
        } else if (T.isMesh || T.isLine || T.isPoints) {
          if (!T.frustumCulled || j.intersectsObject(T)) {
            if (T.isSkinnedMesh) {
              if (T.skeleton.frame !== Q.render.frame) {
                T.skeleton.update();
                T.skeleton.frame = Q.render.frame;
              }
            }
            const Ce = be.update(T);
            const Ue = T.material;
            if (D) {
              if (Ce.boundingSphere === null)
                Ce.computeBoundingSphere();
              J.copy(Ce.boundingSphere.center).applyMatrix4(T.matrixWorld).applyMatrix4(k);
            }
            if (Array.isArray(Ue)) {
              const Be = Ce.groups;
              for (let Ve = 0, He = Be.length; Ve < He; Ve++) {
                const We = Be[Ve];
                const Qe = Ue[We.materialIndex];
                if (Qe && Qe.visible) {
                  f.push(T, Ce, Qe, H, J.z, We);
                }
              }
            } else if (Ue.visible) {
              f.push(T, Ce, Ue, H, J.z, null);
            }
          }
        }
      }
      const Te = T.children;
      for (let Ce = 0, Ue = Te.length; Ce < Ue; Ce++) {
        Mt(Te[Ce], N, H, D);
      }
    }
    function In(T, N, H, D) {
      const q = T.opaque;
      const Te = T.transmissive;
      const Ce = T.transparent;
      m.setupLightsView(H);
      if (te === true)
        B.setGlobalState(p.clippingPlanes, H);
      if (Te.length > 0)
        at(q, Te, N, H);
      if (D)
        ye.viewport(P.copy(D));
      if (q.length > 0)
        Ht(q, N, H);
      if (Te.length > 0)
        Ht(Te, N, H);
      if (Ce.length > 0)
        Ht(Ce, N, H);
      ye.buffers.depth.setTest(true);
      ye.buffers.depth.setMask(true);
      ye.buffers.color.setMask(true);
      ye.setPolygonOffset(false);
    }
    function at(T, N, H, D) {
      if (he === null) {
        const Ue = re.isWebGL2;
        he = new zt(1024, 1024, {
          generateMipmaps: true,
          type: Ie.has("EXT_color_buffer_half_float") ? ss : Yn,
          minFilter: qn,
          samples: Ue && o === true ? 4 : 0
        });
      }
      const q = p.getRenderTarget();
      p.setRenderTarget(he);
      p.clear();
      const Te = p.toneMapping;
      p.toneMapping = hn;
      Ht(T, H, D);
      ee.updateMultisampleRenderTarget(he);
      ee.updateRenderTargetMipmap(he);
      let Ce = false;
      for (let Ue = 0, Be = N.length; Ue < Be; Ue++) {
        const Ve = N[Ue];
        const He = Ve.object;
        const We = Ve.geometry;
        const Qe = Ve.material;
        const wt = Ve.group;
        if (Qe.side === ln && He.layers.test(D.layers)) {
          const $t = Qe.side;
          Qe.side = Pt;
          Qe.needsUpdate = true;
          rn(He, H, D, We, Qe, wt);
          Qe.side = $t;
          Qe.needsUpdate = true;
          Ce = true;
        }
      }
      if (Ce === true) {
        ee.updateMultisampleRenderTarget(he);
        ee.updateRenderTargetMipmap(he);
      }
      p.setRenderTarget(q);
      p.toneMapping = Te;
    }
    function Ht(T, N, H) {
      const D = N.isScene === true ? N.overrideMaterial : null;
      for (let q = 0, Te = T.length; q < Te; q++) {
        const Ce = T[q];
        const Ue = Ce.object;
        const Be = Ce.geometry;
        const Ve = D === null ? Ce.material : D;
        const He = Ce.group;
        if (Ue.layers.test(H.layers)) {
          rn(Ue, N, H, Be, Ve, He);
        }
      }
    }
    function rn(T, N, H, D, q, Te) {
      T.onBeforeRender(p, N, H, D, q, Te);
      T.modelViewMatrix.multiplyMatrices(H.matrixWorldInverse, T.matrixWorld);
      T.normalMatrix.getNormalMatrix(T.modelViewMatrix);
      q.onBeforeRender(p, N, H, D, T, Te);
      if (q.transparent === true && q.side === ln && q.forceSinglePass === false) {
        q.side = Pt;
        q.needsUpdate = true;
        p.renderBufferDirect(H, N, D, q, T, Te);
        q.side = Rn;
        q.needsUpdate = true;
        p.renderBufferDirect(H, N, D, q, T, Te);
        q.side = ln;
      } else {
        p.renderBufferDirect(H, N, D, q, T, Te);
      }
      T.onAfterRender(p, N, H, D, q, Te);
    }
    function Nr(T, N, H) {
      if (N.isScene !== true)
        N = oe;
      const D = X.get(T);
      const q = m.state.lights;
      const Te = m.state.shadowsArray;
      const Ce = q.state.version;
      const Ue = ke.getParameters(T, q.state, Te, N, H);
      const Be = ke.getProgramCacheKey(Ue);
      let Ve = D.programs;
      D.environment = T.isMeshStandardMaterial ? N.environment : null;
      D.fog = N.fog;
      D.envMap = (T.isMeshStandardMaterial ? ce : ge).get(T.envMap || D.environment);
      if (Ve === void 0) {
        T.addEventListener("dispose", rt);
        Ve = /* @__PURE__ */ new Map();
        D.programs = Ve;
      }
      let He = Ve.get(Be);
      if (He !== void 0) {
        if (D.currentProgram === He && D.lightsStateVersion === Ce) {
          Hh(T, Ue);
          return He;
        }
      } else {
        Ue.uniforms = ke.getUniforms(T);
        T.onBuild(H, Ue, p);
        T.onBeforeCompile(Ue, p);
        He = ke.acquireProgram(Ue, Be);
        Ve.set(Be, He);
        D.uniforms = Ue.uniforms;
      }
      const We = D.uniforms;
      if (!T.isShaderMaterial && !T.isRawShaderMaterial || T.clipping === true) {
        We.clippingPlanes = B.uniform;
      }
      Hh(T, Ue);
      D.needsLights = Nf(T);
      D.lightsStateVersion = Ce;
      if (D.needsLights) {
        We.ambientLightColor.value = q.state.ambient;
        We.lightProbe.value = q.state.probe;
        We.directionalLights.value = q.state.directional;
        We.directionalLightShadows.value = q.state.directionalShadow;
        We.spotLights.value = q.state.spot;
        We.spotLightShadows.value = q.state.spotShadow;
        We.rectAreaLights.value = q.state.rectArea;
        We.ltc_1.value = q.state.rectAreaLTC1;
        We.ltc_2.value = q.state.rectAreaLTC2;
        We.pointLights.value = q.state.point;
        We.pointLightShadows.value = q.state.pointShadow;
        We.hemisphereLights.value = q.state.hemi;
        We.directionalShadowMap.value = q.state.directionalShadowMap;
        We.directionalShadowMatrix.value = q.state.directionalShadowMatrix;
        We.spotShadowMap.value = q.state.spotShadowMap;
        We.spotLightMatrix.value = q.state.spotLightMatrix;
        We.spotLightMap.value = q.state.spotLightMap;
        We.pointShadowMap.value = q.state.pointShadowMap;
        We.pointShadowMatrix.value = q.state.pointShadowMatrix;
      }
      const Qe = He.getUniforms();
      const wt = is.seqWithValue(Qe.seq, We);
      D.currentProgram = He;
      D.uniformsList = wt;
      return He;
    }
    function Hh(T, N) {
      const H = X.get(T);
      H.outputColorSpace = N.outputColorSpace;
      H.instancing = N.instancing;
      H.skinning = N.skinning;
      H.morphTargets = N.morphTargets;
      H.morphNormals = N.morphNormals;
      H.morphColors = N.morphColors;
      H.morphTargetsCount = N.morphTargetsCount;
      H.numClippingPlanes = N.numClippingPlanes;
      H.numIntersection = N.numClipIntersection;
      H.vertexAlphas = N.vertexAlphas;
      H.vertexTangents = N.vertexTangents;
      H.toneMapping = N.toneMapping;
    }
    function Uf(T, N, H, D, q) {
      if (N.isScene !== true)
        N = oe;
      ee.resetTextureUnits();
      const Te = N.fog;
      const Ce = D.isMeshStandardMaterial ? N.environment : null;
      const Ue = S === null ? p.outputColorSpace : S.isXRRenderTarget === true ? S.texture.colorSpace : tn;
      const Be = (D.isMeshStandardMaterial ? ce : ge).get(D.envMap || Ce);
      const Ve = D.vertexColors === true && !!H.attributes.color && H.attributes.color.itemSize === 4;
      const He = !!D.normalMap && !!H.attributes.tangent;
      const We = !!H.morphAttributes.position;
      const Qe = !!H.morphAttributes.normal;
      const wt = !!H.morphAttributes.color;
      const $t = D.toneMapped ? p.toneMapping : hn;
      const jn = H.morphAttributes.position || H.morphAttributes.normal || H.morphAttributes.color;
      const ht = jn !== void 0 ? jn.length : 0;
      const qe = X.get(D);
      const Do = m.state.lights;
      if (te === true) {
        if (pe === true || T !== C) {
          const Ut = T === C && D.id === E;
          B.setState(D, T, Ut);
        }
      }
      let _t = false;
      if (D.version === qe.__version) {
        if (qe.needsLights && qe.lightsStateVersion !== Do.state.version) {
          _t = true;
        } else if (qe.outputColorSpace !== Ue) {
          _t = true;
        } else if (q.isInstancedMesh && qe.instancing === false) {
          _t = true;
        } else if (!q.isInstancedMesh && qe.instancing === true) {
          _t = true;
        } else if (q.isSkinnedMesh && qe.skinning === false) {
          _t = true;
        } else if (!q.isSkinnedMesh && qe.skinning === true) {
          _t = true;
        } else if (qe.envMap !== Be) {
          _t = true;
        } else if (D.fog === true && qe.fog !== Te) {
          _t = true;
        } else if (qe.numClippingPlanes !== void 0 && (qe.numClippingPlanes !== B.numPlanes || qe.numIntersection !== B.numIntersection)) {
          _t = true;
        } else if (qe.vertexAlphas !== Ve) {
          _t = true;
        } else if (qe.vertexTangents !== He) {
          _t = true;
        } else if (qe.morphTargets !== We) {
          _t = true;
        } else if (qe.morphNormals !== Qe) {
          _t = true;
        } else if (qe.morphColors !== wt) {
          _t = true;
        } else if (qe.toneMapping !== $t) {
          _t = true;
        } else if (re.isWebGL2 === true && qe.morphTargetsCount !== ht) {
          _t = true;
        }
      } else {
        _t = true;
        qe.__version = D.version;
      }
      let Qn = qe.currentProgram;
      if (_t === true) {
        Qn = Nr(D, N, q);
      }
      let Gh = false;
      let Ss = false;
      let No = false;
      const At = Qn.getUniforms(), ei = qe.uniforms;
      if (ye.useProgram(Qn.program)) {
        Gh = true;
        Ss = true;
        No = true;
      }
      if (D.id !== E) {
        E = D.id;
        Ss = true;
      }
      if (Gh || C !== T) {
        At.setValue(L, "projectionMatrix", T.projectionMatrix);
        if (re.logarithmicDepthBuffer) {
          At.setValue(
            L,
            "logDepthBufFC",
            2 / (Math.log(T.far + 1) / Math.LN2)
          );
        }
        if (C !== T) {
          C = T;
          Ss = true;
          No = true;
        }
        if (D.isShaderMaterial || D.isMeshPhongMaterial || D.isMeshToonMaterial || D.isMeshStandardMaterial || D.envMap) {
          const Ut = At.map.cameraPosition;
          if (Ut !== void 0) {
            Ut.setValue(
              L,
              J.setFromMatrixPosition(T.matrixWorld)
            );
          }
        }
        if (D.isMeshPhongMaterial || D.isMeshToonMaterial || D.isMeshLambertMaterial || D.isMeshBasicMaterial || D.isMeshStandardMaterial || D.isShaderMaterial) {
          At.setValue(L, "isOrthographic", T.isOrthographicCamera === true);
        }
        if (D.isMeshPhongMaterial || D.isMeshToonMaterial || D.isMeshLambertMaterial || D.isMeshBasicMaterial || D.isMeshStandardMaterial || D.isShaderMaterial || D.isShadowMaterial || q.isSkinnedMesh) {
          At.setValue(L, "viewMatrix", T.matrixWorldInverse);
        }
      }
      if (q.isSkinnedMesh) {
        At.setOptional(L, q, "bindMatrix");
        At.setOptional(L, q, "bindMatrixInverse");
        const Ut = q.skeleton;
        if (Ut) {
          if (re.floatVertexTextures) {
            if (Ut.boneTexture === null)
              Ut.computeBoneTexture();
            At.setValue(L, "boneTexture", Ut.boneTexture, ee);
            At.setValue(L, "boneTextureSize", Ut.boneTextureSize);
          } else {
            console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.");
          }
        }
      }
      const Fo = H.morphAttributes;
      if (Fo.position !== void 0 || Fo.normal !== void 0 || Fo.color !== void 0 && re.isWebGL2 === true) {
        le.update(q, H, Qn);
      }
      if (Ss || qe.receiveShadow !== q.receiveShadow) {
        qe.receiveShadow = q.receiveShadow;
        At.setValue(L, "receiveShadow", q.receiveShadow);
      }
      if (D.isMeshGouraudMaterial && D.envMap !== null) {
        ei.envMap.value = Be;
        ei.flipEnvMap.value = Be.isCubeTexture && Be.isRenderTargetTexture === false ? -1 : 1;
      }
      if (Ss) {
        At.setValue(L, "toneMappingExposure", p.toneMappingExposure);
        if (qe.needsLights) {
          Df(ei, No);
        }
        if (Te && D.fog === true) {
          Ye.refreshFogUniforms(ei, Te);
        }
        Ye.refreshMaterialUniforms(ei, D, U, G, he);
        is.upload(L, qe.uniformsList, ei, ee);
      }
      if (D.isShaderMaterial && D.uniformsNeedUpdate === true) {
        is.upload(L, qe.uniformsList, ei, ee);
        D.uniformsNeedUpdate = false;
      }
      if (D.isSpriteMaterial) {
        At.setValue(L, "center", q.center);
      }
      At.setValue(L, "modelViewMatrix", q.modelViewMatrix);
      At.setValue(L, "normalMatrix", q.normalMatrix);
      At.setValue(L, "modelMatrix", q.matrixWorld);
      if (D.isShaderMaterial || D.isRawShaderMaterial) {
        const Ut = D.uniformsGroups;
        for (let Oo = 0, Ff = Ut.length; Oo < Ff; Oo++) {
          if (re.isWebGL2) {
            const Wh = Ut[Oo];
            Ee.update(Wh, Qn);
            Ee.bind(Wh, Qn);
          } else {
            console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
          }
        }
      }
      return Qn;
    }
    function Df(T, N) {
      T.ambientLightColor.needsUpdate = N;
      T.lightProbe.needsUpdate = N;
      T.directionalLights.needsUpdate = N;
      T.directionalLightShadows.needsUpdate = N;
      T.pointLights.needsUpdate = N;
      T.pointLightShadows.needsUpdate = N;
      T.spotLights.needsUpdate = N;
      T.spotLightShadows.needsUpdate = N;
      T.rectAreaLights.needsUpdate = N;
      T.hemisphereLights.needsUpdate = N;
    }
    function Nf(T) {
      return T.isMeshLambertMaterial || T.isMeshToonMaterial || T.isMeshPhongMaterial || T.isMeshStandardMaterial || T.isShadowMaterial || T.isShaderMaterial && T.lights === true;
    }
    this.getActiveCubeFace = function() {
      return x;
    };
    this.getActiveMipmapLevel = function() {
      return M;
    };
    this.getRenderTarget = function() {
      return S;
    };
    this.setRenderTargetTextures = function(T, N, H) {
      X.get(T.texture).__webglTexture = N;
      X.get(T.depthTexture).__webglTexture = H;
      const D = X.get(T);
      D.__hasExternalTextures = true;
      if (D.__hasExternalTextures) {
        D.__autoAllocateDepthBuffer = H === void 0;
        if (!D.__autoAllocateDepthBuffer) {
          if (Ie.has("WEBGL_multisampled_render_to_texture") === true) {
            console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
            D.__useRenderToTexture = false;
          }
        }
      }
    };
    this.setRenderTargetFramebuffer = function(T, N) {
      const H = X.get(T);
      H.__webglFramebuffer = N;
      H.__useDefaultFramebuffer = N === void 0;
    };
    this.setRenderTarget = function(T, N = 0, H = 0) {
      S = T;
      x = N;
      M = H;
      let D = true;
      let q = null;
      let Te = false;
      let Ce = false;
      if (T) {
        const Be = X.get(T);
        if (Be.__useDefaultFramebuffer !== void 0) {
          ye.bindFramebuffer(L.FRAMEBUFFER, null);
          D = false;
        } else if (Be.__webglFramebuffer === void 0) {
          ee.setupRenderTarget(T);
        } else if (Be.__hasExternalTextures) {
          ee.rebindTextures(T, X.get(T.texture).__webglTexture, X.get(T.depthTexture).__webglTexture);
        }
        const Ve = T.texture;
        if (Ve.isData3DTexture || Ve.isDataArrayTexture || Ve.isCompressedArrayTexture) {
          Ce = true;
        }
        const He = X.get(T).__webglFramebuffer;
        if (T.isWebGLCubeRenderTarget) {
          q = He[N];
          Te = true;
        } else if (re.isWebGL2 && T.samples > 0 && ee.useMultisampledRTT(T) === false) {
          q = X.get(T).__webglMultisampledFramebuffer;
        } else {
          q = He;
        }
        P.copy(T.viewport);
        y.copy(T.scissor);
        A = T.scissorTest;
      } else {
        P.copy(K).multiplyScalar(U).floor();
        y.copy(Z).multiplyScalar(U).floor();
        A = Y;
      }
      const Ue = ye.bindFramebuffer(L.FRAMEBUFFER, q);
      if (Ue && re.drawBuffers && D) {
        ye.drawBuffers(T, q);
      }
      ye.viewport(P);
      ye.scissor(y);
      ye.setScissorTest(A);
      if (Te) {
        const Be = X.get(T.texture);
        L.framebufferTexture2D(L.FRAMEBUFFER, L.COLOR_ATTACHMENT0, L.TEXTURE_CUBE_MAP_POSITIVE_X + N, Be.__webglTexture, H);
      } else if (Ce) {
        const Be = X.get(T.texture);
        const Ve = N || 0;
        L.framebufferTextureLayer(L.FRAMEBUFFER, L.COLOR_ATTACHMENT0, Be.__webglTexture, H || 0, Ve);
      }
      E = -1;
    };
    this.readRenderTargetPixels = function(T, N, H, D, q, Te, Ce) {
      if (!(T && T.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let Ue = X.get(T).__webglFramebuffer;
      if (T.isWebGLCubeRenderTarget && Ce !== void 0) {
        Ue = Ue[Ce];
      }
      if (Ue) {
        ye.bindFramebuffer(L.FRAMEBUFFER, Ue);
        try {
          const Be = T.texture;
          const Ve = Be.format;
          const He = Be.type;
          if (Ve !== Ft && W.convert(Ve) !== L.getParameter(L.IMPLEMENTATION_COLOR_READ_FORMAT)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          const We = He === ss && (Ie.has("EXT_color_buffer_half_float") || re.isWebGL2 && Ie.has("EXT_color_buffer_float"));
          if (He !== Yn && W.convert(He) !== L.getParameter(L.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
          !(He === bn && (re.isWebGL2 || Ie.has("OES_texture_float") || Ie.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
          !We) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          if (N >= 0 && N <= T.width - D && (H >= 0 && H <= T.height - q)) {
            L.readPixels(N, H, D, q, W.convert(Ve), W.convert(He), Te);
          }
        } finally {
          const Be = S !== null ? X.get(S).__webglFramebuffer : null;
          ye.bindFramebuffer(L.FRAMEBUFFER, Be);
        }
      }
    };
    this.copyFramebufferToTexture = function(T, N, H = 0) {
      const D = Math.pow(2, -H);
      const q = Math.floor(N.image.width * D);
      const Te = Math.floor(N.image.height * D);
      ee.setTexture2D(N, 0);
      L.copyTexSubImage2D(L.TEXTURE_2D, H, 0, 0, T.x, T.y, q, Te);
      ye.unbindTexture();
    };
    this.copyTextureToTexture = function(T, N, H, D = 0) {
      const q = N.image.width;
      const Te = N.image.height;
      const Ce = W.convert(H.format);
      const Ue = W.convert(H.type);
      ee.setTexture2D(H, 0);
      L.pixelStorei(L.UNPACK_FLIP_Y_WEBGL, H.flipY);
      L.pixelStorei(L.UNPACK_PREMULTIPLY_ALPHA_WEBGL, H.premultiplyAlpha);
      L.pixelStorei(L.UNPACK_ALIGNMENT, H.unpackAlignment);
      if (N.isDataTexture) {
        L.texSubImage2D(L.TEXTURE_2D, D, T.x, T.y, q, Te, Ce, Ue, N.image.data);
      } else {
        if (N.isCompressedTexture) {
          L.compressedTexSubImage2D(L.TEXTURE_2D, D, T.x, T.y, N.mipmaps[0].width, N.mipmaps[0].height, Ce, N.mipmaps[0].data);
        } else {
          L.texSubImage2D(L.TEXTURE_2D, D, T.x, T.y, Ce, Ue, N.image);
        }
      }
      if (D === 0 && H.generateMipmaps)
        L.generateMipmap(L.TEXTURE_2D);
      ye.unbindTexture();
    };
    this.copyTextureToTexture3D = function(T, N, H, D, q = 0) {
      if (p.isWebGL1Renderer) {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        return;
      }
      const Te = T.max.x - T.min.x + 1;
      const Ce = T.max.y - T.min.y + 1;
      const Ue = T.max.z - T.min.z + 1;
      const Be = W.convert(D.format);
      const Ve = W.convert(D.type);
      let He;
      if (D.isData3DTexture) {
        ee.setTexture3D(D, 0);
        He = L.TEXTURE_3D;
      } else if (D.isDataArrayTexture) {
        ee.setTexture2DArray(D, 0);
        He = L.TEXTURE_2D_ARRAY;
      } else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      L.pixelStorei(L.UNPACK_FLIP_Y_WEBGL, D.flipY);
      L.pixelStorei(L.UNPACK_PREMULTIPLY_ALPHA_WEBGL, D.premultiplyAlpha);
      L.pixelStorei(L.UNPACK_ALIGNMENT, D.unpackAlignment);
      const We = L.getParameter(L.UNPACK_ROW_LENGTH);
      const Qe = L.getParameter(L.UNPACK_IMAGE_HEIGHT);
      const wt = L.getParameter(L.UNPACK_SKIP_PIXELS);
      const $t = L.getParameter(L.UNPACK_SKIP_ROWS);
      const jn = L.getParameter(L.UNPACK_SKIP_IMAGES);
      const ht = H.isCompressedTexture ? H.mipmaps[0] : H.image;
      L.pixelStorei(L.UNPACK_ROW_LENGTH, ht.width);
      L.pixelStorei(L.UNPACK_IMAGE_HEIGHT, ht.height);
      L.pixelStorei(L.UNPACK_SKIP_PIXELS, T.min.x);
      L.pixelStorei(L.UNPACK_SKIP_ROWS, T.min.y);
      L.pixelStorei(L.UNPACK_SKIP_IMAGES, T.min.z);
      if (H.isDataTexture || H.isData3DTexture) {
        L.texSubImage3D(He, q, N.x, N.y, N.z, Te, Ce, Ue, Be, Ve, ht.data);
      } else {
        if (H.isCompressedArrayTexture) {
          console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");
          L.compressedTexSubImage3D(He, q, N.x, N.y, N.z, Te, Ce, Ue, Be, ht.data);
        } else {
          L.texSubImage3D(He, q, N.x, N.y, N.z, Te, Ce, Ue, Be, Ve, ht);
        }
      }
      L.pixelStorei(L.UNPACK_ROW_LENGTH, We);
      L.pixelStorei(L.UNPACK_IMAGE_HEIGHT, Qe);
      L.pixelStorei(L.UNPACK_SKIP_PIXELS, wt);
      L.pixelStorei(L.UNPACK_SKIP_ROWS, $t);
      L.pixelStorei(L.UNPACK_SKIP_IMAGES, jn);
      if (q === 0 && D.generateMipmaps)
        L.generateMipmap(He);
      ye.unbindTexture();
    };
    this.initTexture = function(T) {
      if (T.isCubeTexture) {
        ee.setTextureCube(T, 0);
      } else if (T.isData3DTexture) {
        ee.setTexture3D(T, 0);
      } else if (T.isDataArrayTexture || T.isCompressedArrayTexture) {
        ee.setTexture2DArray(T, 0);
      } else {
        ee.setTexture2D(T, 0);
      }
      ye.unbindTexture();
    };
    this.resetState = function() {
      x = 0;
      M = 0;
      S = null;
      ye.reset();
      ve.reset();
    };
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  get physicallyCorrectLights() {
    console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
    return !this.useLegacyLights;
  }
  set physicallyCorrectLights(e) {
    console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
    this.useLegacyLights = !e;
  }
  get outputEncoding() {
    console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
    return this.outputColorSpace === De ? Vn : Ih;
  }
  set outputEncoding(e) {
    console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
    this.outputColorSpace = e === Vn ? De : tn;
  }
};
var Ba = class extends Oa {
};
Ba.prototype.isWebGL1Renderer = true;
var za = class r {
  constructor(e, t = 25e-5) {
    this.isFogExp2 = true;
    this.name = "";
    this.color = new de(e);
    this.density = t;
  }
  clone() {
    return new r(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      color: this.color.getHex(),
      density: this.density
    };
  }
};
var ka = class r {
  constructor(e, t = 1, n = 1e3) {
    this.isFog = true;
    this.name = "";
    this.color = new de(e);
    this.near = t;
    this.far = n;
  }
  clone() {
    return new r(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
};
var Va = class extends Ze {
  constructor() {
    super();
    this.isScene = true;
    this.type = "Scene";
    this.background = null;
    this.environment = null;
    this.fog = null;
    this.backgroundBlurriness = 0;
    this.backgroundIntensity = 1;
    this.overrideMaterial = null;
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  copy(e, t) {
    super.copy(e, t);
    if (e.background !== null)
      this.background = e.background.clone();
    if (e.environment !== null)
      this.environment = e.environment.clone();
    if (e.fog !== null)
      this.fog = e.fog.clone();
    this.backgroundBlurriness = e.backgroundBlurriness;
    this.backgroundIntensity = e.backgroundIntensity;
    if (e.overrideMaterial !== null)
      this.overrideMaterial = e.overrideMaterial.clone();
    this.matrixAutoUpdate = e.matrixAutoUpdate;
    return this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    if (this.fog !== null)
      t.object.fog = this.fog.toJSON();
    if (this.backgroundBlurriness > 0)
      t.object.backgroundBlurriness = this.backgroundBlurriness;
    if (this.backgroundIntensity !== 1)
      t.object.backgroundIntensity = this.backgroundIntensity;
    return t;
  }
  get autoUpdate() {
    console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.");
    return this.matrixWorldAutoUpdate;
  }
  set autoUpdate(e) {
    console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.");
    this.matrixWorldAutoUpdate = e;
  }
};
var fs = class {
  constructor(e, t) {
    this.isInterleavedBuffer = true;
    this.array = e;
    this.stride = t;
    this.count = e !== void 0 ? e.length / t : 0;
    this.usage = Zs;
    this.updateRange = { offset: 0, count: -1 };
    this.version = 0;
    this.uuid = Bt();
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    if (e === true)
      this.version++;
  }
  setUsage(e) {
    this.usage = e;
    return this;
  }
  copy(e) {
    this.array = new e.array.constructor(e.array);
    this.count = e.count;
    this.stride = e.stride;
    this.usage = e.usage;
    return this;
  }
  copyAt(e, t, n) {
    e *= this.stride;
    n *= t.stride;
    for (let i = 0, s = this.stride; i < s; i++) {
      this.array[e + i] = t.array[n + i];
    }
    return this;
  }
  set(e, t = 0) {
    this.array.set(e, t);
    return this;
  }
  clone(e) {
    if (e.arrayBuffers === void 0) {
      e.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = Bt();
    }
    if (e.arrayBuffers[this.array.buffer._uuid] === void 0) {
      e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
    }
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]);
    const n = new this.constructor(t, this.stride);
    n.setUsage(this.usage);
    return n;
  }
  onUpload(e) {
    this.onUploadCallback = e;
    return this;
  }
  toJSON(e) {
    if (e.arrayBuffers === void 0) {
      e.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = Bt();
    }
    if (e.arrayBuffers[this.array.buffer._uuid] === void 0) {
      e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
    }
    return {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
};
var Rt = new w();
var Mi = class r {
  constructor(e, t, n, i = false) {
    this.isInterleavedBufferAttribute = true;
    this.name = "";
    this.data = e;
    this.itemSize = t;
    this.offset = n;
    this.normalized = i;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.data.count; t < n; t++) {
      Rt.fromBufferAttribute(this, t);
      Rt.applyMatrix4(e);
      this.setXYZ(t, Rt.x, Rt.y, Rt.z);
    }
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++) {
      Rt.fromBufferAttribute(this, t);
      Rt.applyNormalMatrix(e);
      this.setXYZ(t, Rt.x, Rt.y, Rt.z);
    }
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++) {
      Rt.fromBufferAttribute(this, t);
      Rt.transformDirection(e);
      this.setXYZ(t, Rt.x, Rt.y, Rt.z);
    }
    return this;
  }
  setX(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.data.array[e * this.data.stride + this.offset] = t;
    return this;
  }
  setY(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.data.array[e * this.data.stride + this.offset + 1] = t;
    return this;
  }
  setZ(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.data.array[e * this.data.stride + this.offset + 2] = t;
    return this;
  }
  setW(e, t) {
    if (this.normalized)
      t = Oe(t, this.array);
    this.data.array[e * this.data.stride + this.offset + 3] = t;
    return this;
  }
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    if (this.normalized)
      t = Ot(t, this.array);
    return t;
  }
  setXY(e, t, n) {
    e = e * this.data.stride + this.offset;
    if (this.normalized) {
      t = Oe(t, this.array);
      n = Oe(n, this.array);
    }
    this.data.array[e + 0] = t;
    this.data.array[e + 1] = n;
    return this;
  }
  setXYZ(e, t, n, i) {
    e = e * this.data.stride + this.offset;
    if (this.normalized) {
      t = Oe(t, this.array);
      n = Oe(n, this.array);
      i = Oe(i, this.array);
    }
    this.data.array[e + 0] = t;
    this.data.array[e + 1] = n;
    this.data.array[e + 2] = i;
    return this;
  }
  setXYZW(e, t, n, i, s) {
    e = e * this.data.stride + this.offset;
    if (this.normalized) {
      t = Oe(t, this.array);
      n = Oe(n, this.array);
      i = Oe(i, this.array);
      s = Oe(s, this.array);
    }
    this.data.array[e + 0] = t;
    this.data.array[e + 1] = n;
    this.data.array[e + 2] = i;
    this.data.array[e + 3] = s;
    return this;
  }
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const i = n * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++) {
          t.push(this.data.array[i + s]);
        }
      }
      return new Ke(new this.array.constructor(t), this.itemSize, this.normalized);
    } else {
      if (e.interleavedBuffers === void 0) {
        e.interleavedBuffers = {};
      }
      if (e.interleavedBuffers[this.data.uuid] === void 0) {
        e.interleavedBuffers[this.data.uuid] = this.data.clone(e);
      }
      return new r(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
  }
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const i = n * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++) {
          t.push(this.data.array[i + s]);
        }
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: t,
        normalized: this.normalized
      };
    } else {
      if (e.interleavedBuffers === void 0) {
        e.interleavedBuffers = {};
      }
      if (e.interleavedBuffers[this.data.uuid] === void 0) {
        e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e);
      }
      return {
        isInterleavedBufferAttribute: true,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
    }
  }
};
var sr = class extends vt {
  constructor(e) {
    super();
    this.isSpriteMaterial = true;
    this.type = "SpriteMaterial";
    this.color = new de(16777215);
    this.map = null;
    this.alphaMap = null;
    this.rotation = 0;
    this.sizeAttenuation = true;
    this.transparent = true;
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.color.copy(e.color);
    this.map = e.map;
    this.alphaMap = e.alphaMap;
    this.rotation = e.rotation;
    this.sizeAttenuation = e.sizeAttenuation;
    this.fog = e.fog;
    return this;
  }
};
var Yi;
var As = new w();
var Zi = new w();
var Ji = new w();
var $i = new $();
var Rs = new $();
var wf = new Ne();
var na = new w();
var Cs = new w();
var ia = new w();
var Ru = new $();
var sc = new $();
var Cu = new $();
var Ha = class extends Ze {
  constructor(e) {
    super();
    this.isSprite = true;
    this.type = "Sprite";
    if (Yi === void 0) {
      Yi = new ze();
      const t = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]);
      const n = new fs(t, 5);
      Yi.setIndex([0, 1, 2, 0, 2, 3]);
      Yi.setAttribute("position", new Mi(n, 3, 0, false));
      Yi.setAttribute("uv", new Mi(n, 2, 3, false));
    }
    this.geometry = Yi;
    this.material = e !== void 0 ? e : new sr();
    this.center = new $(0.5, 0.5);
  }
  raycast(e, t) {
    if (e.camera === null) {
      console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
    }
    Zi.setFromMatrixScale(this.matrixWorld);
    wf.copy(e.camera.matrixWorld);
    this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld);
    Ji.setFromMatrixPosition(this.modelViewMatrix);
    if (e.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
      Zi.multiplyScalar(-Ji.z);
    }
    const n = this.material.rotation;
    let i, s;
    if (n !== 0) {
      s = Math.cos(n);
      i = Math.sin(n);
    }
    const a = this.center;
    sa(na.set(-0.5, -0.5, 0), Ji, a, Zi, i, s);
    sa(Cs.set(0.5, -0.5, 0), Ji, a, Zi, i, s);
    sa(ia.set(0.5, 0.5, 0), Ji, a, Zi, i, s);
    Ru.set(0, 0);
    sc.set(1, 0);
    Cu.set(1, 1);
    let o = e.ray.intersectTriangle(na, Cs, ia, false, As);
    if (o === null) {
      sa(Cs.set(-0.5, 0.5, 0), Ji, a, Zi, i, s);
      sc.set(0, 1);
      o = e.ray.intersectTriangle(na, ia, Cs, false, As);
      if (o === null) {
        return;
      }
    }
    const c = e.ray.origin.distanceTo(As);
    if (c < e.near || c > e.far)
      return;
    t.push({
      distance: c,
      point: As.clone(),
      uv: Tn.getInterpolation(As, na, Cs, ia, Ru, sc, Cu, new $()),
      face: null,
      object: this
    });
  }
  copy(e, t) {
    super.copy(e, t);
    if (e.center !== void 0)
      this.center.copy(e.center);
    this.material = e.material;
    return this;
  }
};
function sa(r, e, t, n, i, s) {
  $i.subVectors(r, t).addScalar(0.5).multiply(n);
  if (i !== void 0) {
    Rs.x = s * $i.x - i * $i.y;
    Rs.y = i * $i.x + s * $i.y;
  } else {
    Rs.copy($i);
  }
  r.copy(e);
  r.x += Rs.x;
  r.y += Rs.y;
  r.applyMatrix4(wf);
}
var ra = new w();
var Pu = new w();
var Ga = class extends Ze {
  constructor() {
    super();
    this._currentLevel = 0;
    this.type = "LOD";
    Object.defineProperties(this, {
      levels: {
        enumerable: true,
        value: []
      },
      isLOD: {
        value: true
      }
    });
    this.autoUpdate = true;
  }
  copy(e) {
    super.copy(e, false);
    const t = e.levels;
    for (let n = 0, i = t.length; n < i; n++) {
      const s = t[n];
      this.addLevel(s.object.clone(), s.distance, s.hysteresis);
    }
    this.autoUpdate = e.autoUpdate;
    return this;
  }
  addLevel(e, t = 0, n = 0) {
    t = Math.abs(t);
    const i = this.levels;
    let s;
    for (s = 0; s < i.length; s++) {
      if (t < i[s].distance) {
        break;
      }
    }
    i.splice(s, 0, { distance: t, hysteresis: n, object: e });
    this.add(e);
    return this;
  }
  getCurrentLevel() {
    return this._currentLevel;
  }
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let n, i;
      for (n = 1, i = t.length; n < i; n++) {
        let s = t[n].distance;
        if (t[n].object.visible) {
          s -= s * t[n].hysteresis;
        }
        if (e < s) {
          break;
        }
      }
      return t[n - 1].object;
    }
    return null;
  }
  raycast(e, t) {
    const n = this.levels;
    if (n.length > 0) {
      ra.setFromMatrixPosition(this.matrixWorld);
      const i = e.ray.origin.distanceTo(ra);
      this.getObjectForDistance(i).raycast(e, t);
    }
  }
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      ra.setFromMatrixPosition(e.matrixWorld);
      Pu.setFromMatrixPosition(this.matrixWorld);
      const n = ra.distanceTo(Pu) / e.zoom;
      t[0].object.visible = true;
      let i, s;
      for (i = 1, s = t.length; i < s; i++) {
        let a = t[i].distance;
        if (t[i].object.visible) {
          a -= a * t[i].hysteresis;
        }
        if (n >= a) {
          t[i - 1].object.visible = false;
          t[i].object.visible = true;
        } else {
          break;
        }
      }
      this._currentLevel = i - 1;
      for (; i < s; i++) {
        t[i].object.visible = false;
      }
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    if (this.autoUpdate === false)
      t.object.autoUpdate = false;
    t.object.levels = [];
    const n = this.levels;
    for (let i = 0, s = n.length; i < s; i++) {
      const a = n[i];
      t.object.levels.push({
        object: a.object.uuid,
        distance: a.distance,
        hysteresis: a.hysteresis
      });
    }
    return t;
  }
};
var Lu = new w();
var Iu = new $e();
var Uu = new $e();
var Sx = new w();
var Du = new Ne();
var Ki = new w();
var Wa = class extends ft {
  constructor(e, t) {
    super(e, t);
    this.isSkinnedMesh = true;
    this.type = "SkinnedMesh";
    this.bindMode = "attached";
    this.bindMatrix = new Ne();
    this.bindMatrixInverse = new Ne();
    this.boundingBox = null;
    this.boundingSphere = null;
  }
  computeBoundingBox() {
    const e = this.geometry;
    if (this.boundingBox === null) {
      this.boundingBox = new qt();
    }
    this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++) {
      Ki.fromBufferAttribute(t, n);
      this.applyBoneTransform(n, Ki);
      this.boundingBox.expandByPoint(Ki);
    }
  }
  computeBoundingSphere() {
    const e = this.geometry;
    if (this.boundingSphere === null) {
      this.boundingSphere = new Yt();
    }
    this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++) {
      Ki.fromBufferAttribute(t, n);
      this.applyBoneTransform(n, Ki);
      this.boundingSphere.expandByPoint(Ki);
    }
  }
  copy(e, t) {
    super.copy(e, t);
    this.bindMode = e.bindMode;
    this.bindMatrix.copy(e.bindMatrix);
    this.bindMatrixInverse.copy(e.bindMatrixInverse);
    this.skeleton = e.skeleton;
    return this;
  }
  // raycast( raycaster, intersects ) {
  // 	if ( this.boundingSphere === null ) this.computeBoundingSphere();
  // 	_sphere.copy( this.boundingSphere );
  // 	_sphere.applyMatrix4( this.matrixWorld );
  // 	if ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;
  // 	this._computeIntersections( raycaster, intersects );
  // }
  getVertexPosition(e, t) {
    super.getVertexPosition(e, t);
    this.applyBoneTransform(e, t);
    return t;
  }
  bind(e, t) {
    this.skeleton = e;
    if (t === void 0) {
      this.updateMatrixWorld(true);
      this.skeleton.calculateInverses();
      t = this.matrixWorld;
    }
    this.bindMatrix.copy(t);
    this.bindMatrixInverse.copy(t).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    const e = new $e();
    const t = this.geometry.attributes.skinWeight;
    for (let n = 0, i = t.count; n < i; n++) {
      e.fromBufferAttribute(t, n);
      const s = 1 / e.manhattanLength();
      if (s !== Infinity) {
        e.multiplyScalar(s);
      } else {
        e.set(1, 0, 0, 0);
      }
      t.setXYZW(n, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    if (this.bindMode === "attached") {
      this.bindMatrixInverse.copy(this.matrixWorld).invert();
    } else if (this.bindMode === "detached") {
      this.bindMatrixInverse.copy(this.bindMatrix).invert();
    } else {
      console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
  }
  applyBoneTransform(e, t) {
    const n = this.skeleton;
    const i = this.geometry;
    Iu.fromBufferAttribute(i.attributes.skinIndex, e);
    Uu.fromBufferAttribute(i.attributes.skinWeight, e);
    Lu.copy(t).applyMatrix4(this.bindMatrix);
    t.set(0, 0, 0);
    for (let s = 0; s < 4; s++) {
      const a = Uu.getComponent(s);
      if (a !== 0) {
        const o = Iu.getComponent(s);
        Du.multiplyMatrices(n.bones[o].matrixWorld, n.boneInverses[o]);
        t.addScaledVector(Sx.copy(Lu).applyMatrix4(Du), a);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
  boneTransform(e, t) {
    console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151.");
    return this.applyBoneTransform(e, t);
  }
};
var rr = class extends Ze {
  constructor() {
    super();
    this.isBone = true;
    this.type = "Bone";
  }
};
var Gn = class extends pt {
  constructor(e = null, t = 1, n = 1, i, s, a, o, c, l = ct, h = ct, u, d) {
    super(null, a, o, c, l, h, i, s, u, d);
    this.isDataTexture = true;
    this.image = { data: e, width: t, height: n };
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
  }
};
var Nu = new Ne();
var bx = new Ne();
var Xa = class r {
  constructor(e = [], t = []) {
    this.uuid = Bt();
    this.bones = e.slice(0);
    this.boneInverses = t;
    this.boneMatrices = null;
    this.boneTexture = null;
    this.boneTextureSize = 0;
    this.frame = -1;
    this.init();
  }
  init() {
    const e = this.bones;
    const t = this.boneInverses;
    this.boneMatrices = new Float32Array(e.length * 16);
    if (t.length === 0) {
      this.calculateInverses();
    } else {
      if (e.length !== t.length) {
        console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
        this.boneInverses = [];
        for (let n = 0, i = this.bones.length; n < i; n++) {
          this.boneInverses.push(new Ne());
        }
      }
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = new Ne();
      if (this.bones[e]) {
        n.copy(this.bones[e].matrixWorld).invert();
      }
      this.boneInverses.push(n);
    }
  }
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      if (n) {
        n.matrixWorld.copy(this.boneInverses[e]).invert();
      }
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      if (n) {
        if (n.parent && n.parent.isBone) {
          n.matrix.copy(n.parent.matrixWorld).invert();
          n.matrix.multiply(n.matrixWorld);
        } else {
          n.matrix.copy(n.matrixWorld);
        }
        n.matrix.decompose(n.position, n.quaternion, n.scale);
      }
    }
  }
  update() {
    const e = this.bones;
    const t = this.boneInverses;
    const n = this.boneMatrices;
    const i = this.boneTexture;
    for (let s = 0, a = e.length; s < a; s++) {
      const o = e[s] ? e[s].matrixWorld : bx;
      Nu.multiplyMatrices(o, t[s]);
      Nu.toArray(n, s * 16);
    }
    if (i !== null) {
      i.needsUpdate = true;
    }
  }
  clone() {
    return new r(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = pf(e);
    e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const n = new Gn(t, e, e, Ft, bn);
    n.needsUpdate = true;
    this.boneMatrices = t;
    this.boneTexture = n;
    this.boneTextureSize = e;
    return this;
  }
  getBoneByName(e) {
    for (let t = 0, n = this.bones.length; t < n; t++) {
      const i = this.bones[t];
      if (i.name === e) {
        return i;
      }
    }
    return void 0;
  }
  dispose() {
    if (this.boneTexture !== null) {
      this.boneTexture.dispose();
      this.boneTexture = null;
    }
  }
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let n = 0, i = e.bones.length; n < i; n++) {
      const s = e.bones[n];
      let a = t[s];
      if (a === void 0) {
        console.warn("THREE.Skeleton: No bone found with UUID:", s);
        a = new rr();
      }
      this.bones.push(a);
      this.boneInverses.push(new Ne().fromArray(e.boneInverses[n]));
    }
    this.init();
    return this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.5,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const t = this.bones;
    const n = this.boneInverses;
    for (let i = 0, s = t.length; i < s; i++) {
      const a = t[i];
      e.bones.push(a.uuid);
      const o = n[i];
      e.boneInverses.push(o.toArray());
    }
    return e;
  }
};
var Jn = class extends Ke {
  constructor(e, t, n, i = 1) {
    super(e, t, n);
    this.isInstancedBufferAttribute = true;
    this.meshPerAttribute = i;
  }
  copy(e) {
    super.copy(e);
    this.meshPerAttribute = e.meshPerAttribute;
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.meshPerAttribute = this.meshPerAttribute;
    e.isInstancedBufferAttribute = true;
    return e;
  }
};
var ji = new Ne();
var Fu = new Ne();
var aa = [];
var Ou = new qt();
var Ex = new Ne();
var Ps = new ft();
var Ls = new Yt();
var qa = class extends ft {
  constructor(e, t, n) {
    super(e, t);
    this.isInstancedMesh = true;
    this.instanceMatrix = new Jn(new Float32Array(n * 16), 16);
    this.instanceColor = null;
    this.count = n;
    this.boundingBox = null;
    this.boundingSphere = null;
    for (let i = 0; i < n; i++) {
      this.setMatrixAt(i, Ex);
    }
  }
  computeBoundingBox() {
    const e = this.geometry;
    const t = this.count;
    if (this.boundingBox === null) {
      this.boundingBox = new qt();
    }
    if (e.boundingBox === null) {
      e.computeBoundingBox();
    }
    this.boundingBox.makeEmpty();
    for (let n = 0; n < t; n++) {
      this.getMatrixAt(n, ji);
      Ou.copy(e.boundingBox).applyMatrix4(ji);
      this.boundingBox.union(Ou);
    }
  }
  computeBoundingSphere() {
    const e = this.geometry;
    const t = this.count;
    if (this.boundingSphere === null) {
      this.boundingSphere = new Yt();
    }
    if (e.boundingSphere === null) {
      e.computeBoundingSphere();
    }
    this.boundingSphere.makeEmpty();
    for (let n = 0; n < t; n++) {
      this.getMatrixAt(n, ji);
      Ls.copy(e.boundingSphere).applyMatrix4(ji);
      this.boundingSphere.union(Ls);
    }
  }
  copy(e, t) {
    super.copy(e, t);
    this.instanceMatrix.copy(e.instanceMatrix);
    if (e.instanceColor !== null)
      this.instanceColor = e.instanceColor.clone();
    this.count = e.count;
    return this;
  }
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  raycast(e, t) {
    const n = this.matrixWorld;
    const i = this.count;
    Ps.geometry = this.geometry;
    Ps.material = this.material;
    if (Ps.material === void 0)
      return;
    if (this.boundingSphere === null)
      this.computeBoundingSphere();
    Ls.copy(this.boundingSphere);
    Ls.applyMatrix4(n);
    if (e.ray.intersectsSphere(Ls) === false)
      return;
    for (let s = 0; s < i; s++) {
      this.getMatrixAt(s, ji);
      Fu.multiplyMatrices(n, ji);
      Ps.matrixWorld = Fu;
      Ps.raycast(e, aa);
      for (let a = 0, o = aa.length; a < o; a++) {
        const c = aa[a];
        c.instanceId = s;
        c.object = this;
        t.push(c);
      }
      aa.length = 0;
    }
  }
  setColorAt(e, t) {
    if (this.instanceColor === null) {
      this.instanceColor = new Jn(new Float32Array(this.instanceMatrix.count * 3), 3);
    }
    t.toArray(this.instanceColor.array, e * 3);
  }
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  updateMorphTargets() {
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
var yt = class extends vt {
  constructor(e) {
    super();
    this.isLineBasicMaterial = true;
    this.type = "LineBasicMaterial";
    this.color = new de(16777215);
    this.map = null;
    this.linewidth = 1;
    this.linecap = "round";
    this.linejoin = "round";
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.color.copy(e.color);
    this.map = e.map;
    this.linewidth = e.linewidth;
    this.linecap = e.linecap;
    this.linejoin = e.linejoin;
    this.fog = e.fog;
    return this;
  }
};
var Bu = new w();
var zu = new w();
var ku = new Ne();
var rc = new vi();
var oa = new Yt();
var fn = class extends Ze {
  constructor(e = new ze(), t = new yt()) {
    super();
    this.isLine = true;
    this.type = "Line";
    this.geometry = e;
    this.material = t;
    this.updateMorphTargets();
  }
  copy(e, t) {
    super.copy(e, t);
    this.material = e.material;
    this.geometry = e.geometry;
    return this;
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position;
      const n = [0];
      for (let i = 1, s = t.count; i < s; i++) {
        Bu.fromBufferAttribute(t, i - 1);
        zu.fromBufferAttribute(t, i);
        n[i] = n[i - 1];
        n[i] += Bu.distanceTo(zu);
      }
      e.setAttribute("lineDistance", new xe(n, 1));
    } else {
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    }
    return this;
  }
  raycast(e, t) {
    const n = this.geometry;
    const i = this.matrixWorld;
    const s = e.params.Line.threshold;
    const a = n.drawRange;
    if (n.boundingSphere === null)
      n.computeBoundingSphere();
    oa.copy(n.boundingSphere);
    oa.applyMatrix4(i);
    oa.radius += s;
    if (e.ray.intersectsSphere(oa) === false)
      return;
    ku.copy(i).invert();
    rc.copy(e.ray).applyMatrix4(ku);
    const o = s / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const c = o * o;
    const l = new w();
    const h = new w();
    const u = new w();
    const d = new w();
    const f = this.isLineSegments ? 2 : 1;
    const m = n.index;
    const _ = n.attributes;
    const g = _.position;
    if (m !== null) {
      const p = Math.max(0, a.start);
      const v = Math.min(m.count, a.start + a.count);
      for (let x = p, M = v - 1; x < M; x += f) {
        const S = m.getX(x);
        const E = m.getX(x + 1);
        l.fromBufferAttribute(g, S);
        h.fromBufferAttribute(g, E);
        const C = rc.distanceSqToSegment(l, h, d, u);
        if (C > c)
          continue;
        d.applyMatrix4(this.matrixWorld);
        const P = e.ray.origin.distanceTo(d);
        if (P < e.near || P > e.far)
          continue;
        t.push({
          distance: P,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: u.clone().applyMatrix4(this.matrixWorld),
          index: x,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    } else {
      const p = Math.max(0, a.start);
      const v = Math.min(g.count, a.start + a.count);
      for (let x = p, M = v - 1; x < M; x += f) {
        l.fromBufferAttribute(g, x);
        h.fromBufferAttribute(g, x + 1);
        const S = rc.distanceSqToSegment(l, h, d, u);
        if (S > c)
          continue;
        d.applyMatrix4(this.matrixWorld);
        const E = e.ray.origin.distanceTo(d);
        if (E < e.near || E > e.far)
          continue;
        t.push({
          distance: E,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: u.clone().applyMatrix4(this.matrixWorld),
          index: x,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    }
  }
  updateMorphTargets() {
    const e = this.geometry;
    const t = e.morphAttributes;
    const n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let s = 0, a = i.length; s < a; s++) {
          const o = i[s].name || String(s);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[o] = s;
        }
      }
    }
  }
};
var Vu = new w();
var Hu = new w();
var Jt = class extends fn {
  constructor(e, t) {
    super(e, t);
    this.isLineSegments = true;
    this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position;
      const n = [];
      for (let i = 0, s = t.count; i < s; i += 2) {
        Vu.fromBufferAttribute(t, i);
        Hu.fromBufferAttribute(t, i + 1);
        n[i] = i === 0 ? 0 : n[i - 1];
        n[i + 1] = n[i] + Vu.distanceTo(Hu);
      }
      e.setAttribute("lineDistance", new xe(n, 1));
    } else {
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    }
    return this;
  }
};
var Ya = class extends fn {
  constructor(e, t) {
    super(e, t);
    this.isLineLoop = true;
    this.type = "LineLoop";
  }
};
var ar = class extends vt {
  constructor(e) {
    super();
    this.isPointsMaterial = true;
    this.type = "PointsMaterial";
    this.color = new de(16777215);
    this.map = null;
    this.alphaMap = null;
    this.size = 1;
    this.sizeAttenuation = true;
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.color.copy(e.color);
    this.map = e.map;
    this.alphaMap = e.alphaMap;
    this.size = e.size;
    this.sizeAttenuation = e.sizeAttenuation;
    this.fog = e.fog;
    return this;
  }
};
var Gu = new Ne();
var cl = new vi();
var ca = new Yt();
var la = new w();
var Za = class extends Ze {
  constructor(e = new ze(), t = new ar()) {
    super();
    this.isPoints = true;
    this.type = "Points";
    this.geometry = e;
    this.material = t;
    this.updateMorphTargets();
  }
  copy(e, t) {
    super.copy(e, t);
    this.material = e.material;
    this.geometry = e.geometry;
    return this;
  }
  raycast(e, t) {
    const n = this.geometry;
    const i = this.matrixWorld;
    const s = e.params.Points.threshold;
    const a = n.drawRange;
    if (n.boundingSphere === null)
      n.computeBoundingSphere();
    ca.copy(n.boundingSphere);
    ca.applyMatrix4(i);
    ca.radius += s;
    if (e.ray.intersectsSphere(ca) === false)
      return;
    Gu.copy(i).invert();
    cl.copy(e.ray).applyMatrix4(Gu);
    const o = s / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const c = o * o;
    const l = n.index;
    const h = n.attributes;
    const u = h.position;
    if (l !== null) {
      const d = Math.max(0, a.start);
      const f = Math.min(l.count, a.start + a.count);
      for (let m = d, _ = f; m < _; m++) {
        const g = l.getX(m);
        la.fromBufferAttribute(u, g);
        Wu(la, g, c, i, e, t, this);
      }
    } else {
      const d = Math.max(0, a.start);
      const f = Math.min(u.count, a.start + a.count);
      for (let m = d, _ = f; m < _; m++) {
        la.fromBufferAttribute(u, m);
        Wu(la, m, c, i, e, t, this);
      }
    }
  }
  updateMorphTargets() {
    const e = this.geometry;
    const t = e.morphAttributes;
    const n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let s = 0, a = i.length; s < a; s++) {
          const o = i[s].name || String(s);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[o] = s;
        }
      }
    }
  }
};
function Wu(r, e, t, n, i, s, a) {
  const o = cl.distanceSqToPoint(r);
  if (o < t) {
    const c = new w();
    cl.closestPointToPoint(r, c);
    c.applyMatrix4(n);
    const l = i.ray.origin.distanceTo(c);
    if (l < i.near || l > i.far)
      return;
    s.push({
      distance: l,
      distanceToRay: Math.sqrt(o),
      point: c,
      index: e,
      face: null,
      object: a
    });
  }
}
var ll = class extends pt {
  constructor(e, t, n, i, s, a, o, c, l) {
    super(e, t, n, i, s, a, o, c, l);
    this.isVideoTexture = true;
    this.minFilter = a !== void 0 ? a : lt;
    this.magFilter = s !== void 0 ? s : lt;
    this.generateMipmaps = false;
    const h = this;
    function u() {
      h.needsUpdate = true;
      e.requestVideoFrameCallback(u);
    }
    if ("requestVideoFrameCallback" in e) {
      e.requestVideoFrameCallback(u);
    }
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  update() {
    const e = this.image;
    const t = "requestVideoFrameCallback" in e;
    if (t === false && e.readyState >= e.HAVE_CURRENT_DATA) {
      this.needsUpdate = true;
    }
  }
};
var hl = class extends pt {
  constructor(e, t, n) {
    super({ width: e, height: t });
    this.isFramebufferTexture = true;
    this.format = n;
    this.magFilter = ct;
    this.minFilter = ct;
    this.generateMipmaps = false;
    this.needsUpdate = true;
  }
};
var or = class extends pt {
  constructor(e, t, n, i, s, a, o, c, l, h, u, d) {
    super(null, a, o, c, l, h, i, s, u, d);
    this.isCompressedTexture = true;
    this.image = { width: t, height: n };
    this.mipmaps = e;
    this.flipY = false;
    this.generateMipmaps = false;
  }
};
var ul = class extends or {
  constructor(e, t, n, i, s, a) {
    super(e, t, n, s, a);
    this.isCompressedArrayTexture = true;
    this.image.depth = i;
    this.wrapR = Et;
  }
};
var dl = class extends pt {
  constructor(e, t, n, i, s, a, o, c, l) {
    super(e, t, n, i, s, a, o, c, l);
    this.isCanvasTexture = true;
    this.needsUpdate = true;
  }
};
var kt = class {
  constructor() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
    return null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getPoint(n, t);
  }
  // Get sequence of points using getPoint( t )
  getPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++) {
      t.push(this.getPoint(n / e));
    }
    return t;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++) {
      t.push(this.getPointAt(n / e));
    }
    return t;
  }
  // Get total curve arc length
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = false;
    const t = [];
    let n, i = this.getPoint(0);
    let s = 0;
    t.push(0);
    for (let a = 1; a <= e; a++) {
      n = this.getPoint(a / e);
      s += n.distanceTo(i);
      t.push(s);
      i = n;
    }
    this.cacheArcLengths = t;
    return t;
  }
  updateArcLengths() {
    this.needsUpdate = true;
    this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(e, t) {
    const n = this.getLengths();
    let i = 0;
    const s = n.length;
    let a;
    if (t) {
      a = t;
    } else {
      a = e * n[s - 1];
    }
    let o = 0, c = s - 1, l;
    while (o <= c) {
      i = Math.floor(o + (c - o) / 2);
      l = n[i] - a;
      if (l < 0) {
        o = i + 1;
      } else if (l > 0) {
        c = i - 1;
      } else {
        c = i;
        break;
      }
    }
    i = c;
    if (n[i] === a) {
      return i / (s - 1);
    }
    const h = n[i];
    const u = n[i + 1];
    const d = u - h;
    const f = (a - h) / d;
    const m = (i + f) / (s - 1);
    return m;
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(e, t) {
    const n = 1e-4;
    let i = e - n;
    let s = e + n;
    if (i < 0)
      i = 0;
    if (s > 1)
      s = 1;
    const a = this.getPoint(i);
    const o = this.getPoint(s);
    const c = t || (a.isVector2 ? new $() : new w());
    c.copy(o).sub(a).normalize();
    return c;
  }
  getTangentAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getTangent(n, t);
  }
  computeFrenetFrames(e, t) {
    const n = new w();
    const i = [];
    const s = [];
    const a = [];
    const o = new w();
    const c = new Ne();
    for (let f = 0; f <= e; f++) {
      const m = f / e;
      i[f] = this.getTangentAt(m, new w());
    }
    s[0] = new w();
    a[0] = new w();
    let l = Number.MAX_VALUE;
    const h = Math.abs(i[0].x);
    const u = Math.abs(i[0].y);
    const d = Math.abs(i[0].z);
    if (h <= l) {
      l = h;
      n.set(1, 0, 0);
    }
    if (u <= l) {
      l = u;
      n.set(0, 1, 0);
    }
    if (d <= l) {
      n.set(0, 0, 1);
    }
    o.crossVectors(i[0], n).normalize();
    s[0].crossVectors(i[0], o);
    a[0].crossVectors(i[0], s[0]);
    for (let f = 1; f <= e; f++) {
      s[f] = s[f - 1].clone();
      a[f] = a[f - 1].clone();
      o.crossVectors(i[f - 1], i[f]);
      if (o.length() > Number.EPSILON) {
        o.normalize();
        const m = Math.acos(st(i[f - 1].dot(i[f]), -1, 1));
        s[f].applyMatrix4(c.makeRotationAxis(o, m));
      }
      a[f].crossVectors(i[f], s[f]);
    }
    if (t === true) {
      let f = Math.acos(st(s[0].dot(s[e]), -1, 1));
      f /= e;
      if (i[0].dot(o.crossVectors(s[0], s[e])) > 0) {
        f = -f;
      }
      for (let m = 1; m <= e; m++) {
        s[m].applyMatrix4(c.makeRotationAxis(i[m], f * m));
        a[m].crossVectors(i[m], s[m]);
      }
    }
    return {
      tangents: i,
      normals: s,
      binormals: a
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.arcLengthDivisions = e.arcLengthDivisions;
    return this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.5,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    e.arcLengthDivisions = this.arcLengthDivisions;
    e.type = this.type;
    return e;
  }
  fromJSON(e) {
    this.arcLengthDivisions = e.arcLengthDivisions;
    return this;
  }
};
var ps = class extends kt {
  constructor(e = 0, t = 0, n = 1, i = 1, s = 0, a = Math.PI * 2, o = false, c = 0) {
    super();
    this.isEllipseCurve = true;
    this.type = "EllipseCurve";
    this.aX = e;
    this.aY = t;
    this.xRadius = n;
    this.yRadius = i;
    this.aStartAngle = s;
    this.aEndAngle = a;
    this.aClockwise = o;
    this.aRotation = c;
  }
  getPoint(e, t) {
    const n = t || new $();
    const i = Math.PI * 2;
    let s = this.aEndAngle - this.aStartAngle;
    const a = Math.abs(s) < Number.EPSILON;
    while (s < 0)
      s += i;
    while (s > i)
      s -= i;
    if (s < Number.EPSILON) {
      if (a) {
        s = 0;
      } else {
        s = i;
      }
    }
    if (this.aClockwise === true && !a) {
      if (s === i) {
        s = -i;
      } else {
        s = s - i;
      }
    }
    const o = this.aStartAngle + e * s;
    let c = this.aX + this.xRadius * Math.cos(o);
    let l = this.aY + this.yRadius * Math.sin(o);
    if (this.aRotation !== 0) {
      const h = Math.cos(this.aRotation);
      const u = Math.sin(this.aRotation);
      const d = c - this.aX;
      const f = l - this.aY;
      c = d * h - f * u + this.aX;
      l = d * u + f * h + this.aY;
    }
    return n.set(c, l);
  }
  copy(e) {
    super.copy(e);
    this.aX = e.aX;
    this.aY = e.aY;
    this.xRadius = e.xRadius;
    this.yRadius = e.yRadius;
    this.aStartAngle = e.aStartAngle;
    this.aEndAngle = e.aEndAngle;
    this.aClockwise = e.aClockwise;
    this.aRotation = e.aRotation;
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.aX = this.aX;
    e.aY = this.aY;
    e.xRadius = this.xRadius;
    e.yRadius = this.yRadius;
    e.aStartAngle = this.aStartAngle;
    e.aEndAngle = this.aEndAngle;
    e.aClockwise = this.aClockwise;
    e.aRotation = this.aRotation;
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.aX = e.aX;
    this.aY = e.aY;
    this.xRadius = e.xRadius;
    this.yRadius = e.yRadius;
    this.aStartAngle = e.aStartAngle;
    this.aEndAngle = e.aEndAngle;
    this.aClockwise = e.aClockwise;
    this.aRotation = e.aRotation;
    return this;
  }
};
var Ja = class extends ps {
  constructor(e, t, n, i, s, a) {
    super(e, t, n, n, i, s, a);
    this.isArcCurve = true;
    this.type = "ArcCurve";
  }
};
function Fh() {
  let r = 0, e = 0, t = 0, n = 0;
  function i(s, a, o, c) {
    r = s;
    e = o;
    t = -3 * s + 3 * a - 2 * o - c;
    n = 2 * s - 2 * a + o + c;
  }
  return {
    initCatmullRom: function(s, a, o, c, l) {
      i(a, o, l * (o - s), l * (c - a));
    },
    initNonuniformCatmullRom: function(s, a, o, c, l, h, u) {
      let d = (a - s) / l - (o - s) / (l + h) + (o - a) / h;
      let f = (o - a) / h - (c - a) / (h + u) + (c - o) / u;
      d *= h;
      f *= h;
      i(a, o, d, f);
    },
    calc: function(s) {
      const a = s * s;
      const o = a * s;
      return r + e * s + t * a + n * o;
    }
  };
}
var ha = new w();
var ac = new Fh();
var oc = new Fh();
var cc = new Fh();
var $a = class extends kt {
  constructor(e = [], t = false, n = "centripetal", i = 0.5) {
    super();
    this.isCatmullRomCurve3 = true;
    this.type = "CatmullRomCurve3";
    this.points = e;
    this.closed = t;
    this.curveType = n;
    this.tension = i;
  }
  getPoint(e, t = new w()) {
    const n = t;
    const i = this.points;
    const s = i.length;
    const a = (s - (this.closed ? 0 : 1)) * e;
    let o = Math.floor(a);
    let c = a - o;
    if (this.closed) {
      o += o > 0 ? 0 : (Math.floor(Math.abs(o) / s) + 1) * s;
    } else if (c === 0 && o === s - 1) {
      o = s - 2;
      c = 1;
    }
    let l, h;
    if (this.closed || o > 0) {
      l = i[(o - 1) % s];
    } else {
      ha.subVectors(i[0], i[1]).add(i[0]);
      l = ha;
    }
    const u = i[o % s];
    const d = i[(o + 1) % s];
    if (this.closed || o + 2 < s) {
      h = i[(o + 2) % s];
    } else {
      ha.subVectors(i[s - 1], i[s - 2]).add(i[s - 1]);
      h = ha;
    }
    if (this.curveType === "centripetal" || this.curveType === "chordal") {
      const f = this.curveType === "chordal" ? 0.5 : 0.25;
      let m = Math.pow(l.distanceToSquared(u), f);
      let _ = Math.pow(u.distanceToSquared(d), f);
      let g = Math.pow(d.distanceToSquared(h), f);
      if (_ < 1e-4)
        _ = 1;
      if (m < 1e-4)
        m = _;
      if (g < 1e-4)
        g = _;
      ac.initNonuniformCatmullRom(l.x, u.x, d.x, h.x, m, _, g);
      oc.initNonuniformCatmullRom(l.y, u.y, d.y, h.y, m, _, g);
      cc.initNonuniformCatmullRom(l.z, u.z, d.z, h.z, m, _, g);
    } else if (this.curveType === "catmullrom") {
      ac.initCatmullRom(l.x, u.x, d.x, h.x, this.tension);
      oc.initCatmullRom(l.y, u.y, d.y, h.y, this.tension);
      cc.initCatmullRom(l.z, u.z, d.z, h.z, this.tension);
    }
    n.set(
      ac.calc(c),
      oc.calc(c),
      cc.calc(c)
    );
    return n;
  }
  copy(e) {
    super.copy(e);
    this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(i.clone());
    }
    this.closed = e.closed;
    this.curveType = e.curveType;
    this.tension = e.tension;
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const i = this.points[t];
      e.points.push(i.toArray());
    }
    e.closed = this.closed;
    e.curveType = this.curveType;
    e.tension = this.tension;
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(new w().fromArray(i));
    }
    this.closed = e.closed;
    this.curveType = e.curveType;
    this.tension = e.tension;
    return this;
  }
};
function Xu(r, e, t, n, i) {
  const s = (n - e) * 0.5;
  const a = (i - t) * 0.5;
  const o = r * r;
  const c = r * o;
  return (2 * t - 2 * n + s + a) * c + (-3 * t + 3 * n - 2 * s - a) * o + s * r + t;
}
function Tx(r, e) {
  const t = 1 - r;
  return t * t * e;
}
function wx(r, e) {
  return 2 * (1 - r) * r * e;
}
function Ax(r, e) {
  return r * r * e;
}
function zs(r, e, t, n) {
  return Tx(r, e) + wx(r, t) + Ax(r, n);
}
function Rx(r, e) {
  const t = 1 - r;
  return t * t * t * e;
}
function Cx(r, e) {
  const t = 1 - r;
  return 3 * t * t * r * e;
}
function Px(r, e) {
  return 3 * (1 - r) * r * r * e;
}
function Lx(r, e) {
  return r * r * r * e;
}
function ks(r, e, t, n, i) {
  return Rx(r, e) + Cx(r, t) + Px(r, n) + Lx(r, i);
}
var cr = class extends kt {
  constructor(e = new $(), t = new $(), n = new $(), i = new $()) {
    super();
    this.isCubicBezierCurve = true;
    this.type = "CubicBezierCurve";
    this.v0 = e;
    this.v1 = t;
    this.v2 = n;
    this.v3 = i;
  }
  getPoint(e, t = new $()) {
    const n = t;
    const i = this.v0, s = this.v1, a = this.v2, o = this.v3;
    n.set(
      ks(e, i.x, s.x, a.x, o.x),
      ks(e, i.y, s.y, a.y, o.y)
    );
    return n;
  }
  copy(e) {
    super.copy(e);
    this.v0.copy(e.v0);
    this.v1.copy(e.v1);
    this.v2.copy(e.v2);
    this.v3.copy(e.v3);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.v0 = this.v0.toArray();
    e.v1 = this.v1.toArray();
    e.v2 = this.v2.toArray();
    e.v3 = this.v3.toArray();
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.v0.fromArray(e.v0);
    this.v1.fromArray(e.v1);
    this.v2.fromArray(e.v2);
    this.v3.fromArray(e.v3);
    return this;
  }
};
var Ka = class extends kt {
  constructor(e = new w(), t = new w(), n = new w(), i = new w()) {
    super();
    this.isCubicBezierCurve3 = true;
    this.type = "CubicBezierCurve3";
    this.v0 = e;
    this.v1 = t;
    this.v2 = n;
    this.v3 = i;
  }
  getPoint(e, t = new w()) {
    const n = t;
    const i = this.v0, s = this.v1, a = this.v2, o = this.v3;
    n.set(
      ks(e, i.x, s.x, a.x, o.x),
      ks(e, i.y, s.y, a.y, o.y),
      ks(e, i.z, s.z, a.z, o.z)
    );
    return n;
  }
  copy(e) {
    super.copy(e);
    this.v0.copy(e.v0);
    this.v1.copy(e.v1);
    this.v2.copy(e.v2);
    this.v3.copy(e.v3);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.v0 = this.v0.toArray();
    e.v1 = this.v1.toArray();
    e.v2 = this.v2.toArray();
    e.v3 = this.v3.toArray();
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.v0.fromArray(e.v0);
    this.v1.fromArray(e.v1);
    this.v2.fromArray(e.v2);
    this.v3.fromArray(e.v3);
    return this;
  }
};
var ms = class extends kt {
  constructor(e = new $(), t = new $()) {
    super();
    this.isLineCurve = true;
    this.type = "LineCurve";
    this.v1 = e;
    this.v2 = t;
  }
  getPoint(e, t = new $()) {
    const n = t;
    if (e === 1) {
      n.copy(this.v2);
    } else {
      n.copy(this.v2).sub(this.v1);
      n.multiplyScalar(e).add(this.v1);
    }
    return n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new $()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    super.copy(e);
    this.v1.copy(e.v1);
    this.v2.copy(e.v2);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.v1 = this.v1.toArray();
    e.v2 = this.v2.toArray();
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.v1.fromArray(e.v1);
    this.v2.fromArray(e.v2);
    return this;
  }
};
var ja = class extends kt {
  constructor(e = new w(), t = new w()) {
    super();
    this.isLineCurve3 = true;
    this.type = "LineCurve3";
    this.v1 = e;
    this.v2 = t;
  }
  getPoint(e, t = new w()) {
    const n = t;
    if (e === 1) {
      n.copy(this.v2);
    } else {
      n.copy(this.v2).sub(this.v1);
      n.multiplyScalar(e).add(this.v1);
    }
    return n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new w()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    super.copy(e);
    this.v1.copy(e.v1);
    this.v2.copy(e.v2);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.v1 = this.v1.toArray();
    e.v2 = this.v2.toArray();
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.v1.fromArray(e.v1);
    this.v2.fromArray(e.v2);
    return this;
  }
};
var lr = class extends kt {
  constructor(e = new $(), t = new $(), n = new $()) {
    super();
    this.isQuadraticBezierCurve = true;
    this.type = "QuadraticBezierCurve";
    this.v0 = e;
    this.v1 = t;
    this.v2 = n;
  }
  getPoint(e, t = new $()) {
    const n = t;
    const i = this.v0, s = this.v1, a = this.v2;
    n.set(
      zs(e, i.x, s.x, a.x),
      zs(e, i.y, s.y, a.y)
    );
    return n;
  }
  copy(e) {
    super.copy(e);
    this.v0.copy(e.v0);
    this.v1.copy(e.v1);
    this.v2.copy(e.v2);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.v0 = this.v0.toArray();
    e.v1 = this.v1.toArray();
    e.v2 = this.v2.toArray();
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.v0.fromArray(e.v0);
    this.v1.fromArray(e.v1);
    this.v2.fromArray(e.v2);
    return this;
  }
};
var hr = class extends kt {
  constructor(e = new w(), t = new w(), n = new w()) {
    super();
    this.isQuadraticBezierCurve3 = true;
    this.type = "QuadraticBezierCurve3";
    this.v0 = e;
    this.v1 = t;
    this.v2 = n;
  }
  getPoint(e, t = new w()) {
    const n = t;
    const i = this.v0, s = this.v1, a = this.v2;
    n.set(
      zs(e, i.x, s.x, a.x),
      zs(e, i.y, s.y, a.y),
      zs(e, i.z, s.z, a.z)
    );
    return n;
  }
  copy(e) {
    super.copy(e);
    this.v0.copy(e.v0);
    this.v1.copy(e.v1);
    this.v2.copy(e.v2);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.v0 = this.v0.toArray();
    e.v1 = this.v1.toArray();
    e.v2 = this.v2.toArray();
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.v0.fromArray(e.v0);
    this.v1.fromArray(e.v1);
    this.v2.fromArray(e.v2);
    return this;
  }
};
var ur = class extends kt {
  constructor(e = []) {
    super();
    this.isSplineCurve = true;
    this.type = "SplineCurve";
    this.points = e;
  }
  getPoint(e, t = new $()) {
    const n = t;
    const i = this.points;
    const s = (i.length - 1) * e;
    const a = Math.floor(s);
    const o = s - a;
    const c = i[a === 0 ? a : a - 1];
    const l = i[a];
    const h = i[a > i.length - 2 ? i.length - 1 : a + 1];
    const u = i[a > i.length - 3 ? i.length - 1 : a + 2];
    n.set(
      Xu(o, c.x, l.x, h.x, u.x),
      Xu(o, c.y, l.y, h.y, u.y)
    );
    return n;
  }
  copy(e) {
    super.copy(e);
    this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(i.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const i = this.points[t];
      e.points.push(i.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(new $().fromArray(i));
    }
    return this;
  }
};
var Oh = Object.freeze({
  __proto__: null,
  ArcCurve: Ja,
  CatmullRomCurve3: $a,
  CubicBezierCurve: cr,
  CubicBezierCurve3: Ka,
  EllipseCurve: ps,
  LineCurve: ms,
  LineCurve3: ja,
  QuadraticBezierCurve: lr,
  QuadraticBezierCurve3: hr,
  SplineCurve: ur
});
var Qa = class extends kt {
  constructor() {
    super();
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = false;
  }
  add(e) {
    this.curves.push(e);
  }
  closePath() {
    const e = this.curves[0].getPoint(0);
    const t = this.curves[this.curves.length - 1].getPoint(1);
    if (!e.equals(t)) {
      this.curves.push(new ms(t, e));
    }
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(e, t) {
    const n = e * this.getLength();
    const i = this.getCurveLengths();
    let s = 0;
    while (s < i.length) {
      if (i[s] >= n) {
        const a = i[s] - n;
        const o = this.curves[s];
        const c = o.getLength();
        const l = c === 0 ? 0 : 1 - a / c;
        return o.getPointAt(l, t);
      }
      s++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = true;
    this.cacheLengths = null;
    this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    const e = [];
    let t = 0;
    for (let n = 0, i = this.curves.length; n < i; n++) {
      t += this.curves[n].getLength();
      e.push(t);
    }
    this.cacheLengths = e;
    return e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let n = 0; n <= e; n++) {
      t.push(this.getPoint(n / e));
    }
    if (this.autoClose) {
      t.push(t[0]);
    }
    return t;
  }
  getPoints(e = 12) {
    const t = [];
    let n;
    for (let i = 0, s = this.curves; i < s.length; i++) {
      const a = s[i];
      const o = a.isEllipseCurve ? e * 2 : a.isLineCurve || a.isLineCurve3 ? 1 : a.isSplineCurve ? e * a.points.length : e;
      const c = a.getPoints(o);
      for (let l = 0; l < c.length; l++) {
        const h = c[l];
        if (n && n.equals(h))
          continue;
        t.push(h);
        n = h;
      }
    }
    if (this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0])) {
      t.push(t[0]);
    }
    return t;
  }
  copy(e) {
    super.copy(e);
    this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const i = e.curves[t];
      this.curves.push(i.clone());
    }
    this.autoClose = e.autoClose;
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose;
    e.curves = [];
    for (let t = 0, n = this.curves.length; t < n; t++) {
      const i = this.curves[t];
      e.curves.push(i.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.autoClose = e.autoClose;
    this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const i = e.curves[t];
      this.curves.push(new Oh[i.type]().fromJSON(i));
    }
    return this;
  }
};
var Si = class extends Qa {
  constructor(e) {
    super();
    this.type = "Path";
    this.currentPoint = new $();
    if (e) {
      this.setFromPoints(e);
    }
  }
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, n = e.length; t < n; t++) {
      this.lineTo(e[t].x, e[t].y);
    }
    return this;
  }
  moveTo(e, t) {
    this.currentPoint.set(e, t);
    return this;
  }
  lineTo(e, t) {
    const n = new ms(this.currentPoint.clone(), new $(e, t));
    this.curves.push(n);
    this.currentPoint.set(e, t);
    return this;
  }
  quadraticCurveTo(e, t, n, i) {
    const s = new lr(
      this.currentPoint.clone(),
      new $(e, t),
      new $(n, i)
    );
    this.curves.push(s);
    this.currentPoint.set(n, i);
    return this;
  }
  bezierCurveTo(e, t, n, i, s, a) {
    const o = new cr(
      this.currentPoint.clone(),
      new $(e, t),
      new $(n, i),
      new $(s, a)
    );
    this.curves.push(o);
    this.currentPoint.set(s, a);
    return this;
  }
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e);
    const n = new ur(t);
    this.curves.push(n);
    this.currentPoint.copy(e[e.length - 1]);
    return this;
  }
  arc(e, t, n, i, s, a) {
    const o = this.currentPoint.x;
    const c = this.currentPoint.y;
    this.absarc(
      e + o,
      t + c,
      n,
      i,
      s,
      a
    );
    return this;
  }
  absarc(e, t, n, i, s, a) {
    this.absellipse(e, t, n, n, i, s, a);
    return this;
  }
  ellipse(e, t, n, i, s, a, o, c) {
    const l = this.currentPoint.x;
    const h = this.currentPoint.y;
    this.absellipse(e + l, t + h, n, i, s, a, o, c);
    return this;
  }
  absellipse(e, t, n, i, s, a, o, c) {
    const l = new ps(e, t, n, i, s, a, o, c);
    if (this.curves.length > 0) {
      const u = l.getPoint(0);
      if (!u.equals(this.currentPoint)) {
        this.lineTo(u.x, u.y);
      }
    }
    this.curves.push(l);
    const h = l.getPoint(1);
    this.currentPoint.copy(h);
    return this;
  }
  copy(e) {
    super.copy(e);
    this.currentPoint.copy(e.currentPoint);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.currentPoint = this.currentPoint.toArray();
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.currentPoint.fromArray(e.currentPoint);
    return this;
  }
};
var gs = class r extends ze {
  constructor(e = [new $(0, -0.5), new $(0.5, 0), new $(0, 0.5)], t = 12, n = 0, i = Math.PI * 2) {
    super();
    this.type = "LatheGeometry";
    this.parameters = {
      points: e,
      segments: t,
      phiStart: n,
      phiLength: i
    };
    t = Math.floor(t);
    i = st(i, 0, Math.PI * 2);
    const s = [];
    const a = [];
    const o = [];
    const c = [];
    const l = [];
    const h = 1 / t;
    const u = new w();
    const d = new $();
    const f = new w();
    const m = new w();
    const _ = new w();
    let g = 0;
    let p = 0;
    for (let v = 0; v <= e.length - 1; v++) {
      switch (v) {
        case 0:
          g = e[v + 1].x - e[v].x;
          p = e[v + 1].y - e[v].y;
          f.x = p * 1;
          f.y = -g;
          f.z = p * 0;
          _.copy(f);
          f.normalize();
          c.push(f.x, f.y, f.z);
          break;
        case e.length - 1:
          c.push(_.x, _.y, _.z);
          break;
        default:
          g = e[v + 1].x - e[v].x;
          p = e[v + 1].y - e[v].y;
          f.x = p * 1;
          f.y = -g;
          f.z = p * 0;
          m.copy(f);
          f.x += _.x;
          f.y += _.y;
          f.z += _.z;
          f.normalize();
          c.push(f.x, f.y, f.z);
          _.copy(m);
      }
    }
    for (let v = 0; v <= t; v++) {
      const x = n + v * h * i;
      const M = Math.sin(x);
      const S = Math.cos(x);
      for (let E = 0; E <= e.length - 1; E++) {
        u.x = e[E].x * M;
        u.y = e[E].y;
        u.z = e[E].x * S;
        a.push(u.x, u.y, u.z);
        d.x = v / t;
        d.y = E / (e.length - 1);
        o.push(d.x, d.y);
        const C = c[3 * E + 0] * M;
        const P = c[3 * E + 1];
        const y = c[3 * E + 0] * S;
        l.push(C, P, y);
      }
    }
    for (let v = 0; v < t; v++) {
      for (let x = 0; x < e.length - 1; x++) {
        const M = x + v * e.length;
        const S = M;
        const E = M + e.length;
        const C = M + e.length + 1;
        const P = M + 1;
        s.push(S, E, P);
        s.push(C, P, E);
      }
    }
    this.setIndex(s);
    this.setAttribute("position", new xe(a, 3));
    this.setAttribute("uv", new xe(o, 2));
    this.setAttribute("normal", new xe(l, 3));
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.points, e.segments, e.phiStart, e.phiLength);
  }
};
var dr = class r extends gs {
  constructor(e = 1, t = 1, n = 4, i = 8) {
    const s = new Si();
    s.absarc(0, -t / 2, e, Math.PI * 1.5, 0);
    s.absarc(0, t / 2, e, 0, Math.PI * 0.5);
    super(s.getPoints(n), i);
    this.type = "CapsuleGeometry";
    this.parameters = {
      radius: e,
      height: t,
      capSegments: n,
      radialSegments: i
    };
  }
  static fromJSON(e) {
    return new r(e.radius, e.length, e.capSegments, e.radialSegments);
  }
};
var fr = class r extends ze {
  constructor(e = 1, t = 32, n = 0, i = Math.PI * 2) {
    super();
    this.type = "CircleGeometry";
    this.parameters = {
      radius: e,
      segments: t,
      thetaStart: n,
      thetaLength: i
    };
    t = Math.max(3, t);
    const s = [];
    const a = [];
    const o = [];
    const c = [];
    const l = new w();
    const h = new $();
    a.push(0, 0, 0);
    o.push(0, 0, 1);
    c.push(0.5, 0.5);
    for (let u = 0, d = 3; u <= t; u++, d += 3) {
      const f = n + u / t * i;
      l.x = e * Math.cos(f);
      l.y = e * Math.sin(f);
      a.push(l.x, l.y, l.z);
      o.push(0, 0, 1);
      h.x = (a[d] / e + 1) / 2;
      h.y = (a[d + 1] / e + 1) / 2;
      c.push(h.x, h.y);
    }
    for (let u = 1; u <= t; u++) {
      s.push(u, u + 1, 0);
    }
    this.setIndex(s);
    this.setAttribute("position", new xe(a, 3));
    this.setAttribute("normal", new xe(o, 3));
    this.setAttribute("uv", new xe(c, 2));
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
};
var bi = class r extends ze {
  constructor(e = 1, t = 1, n = 1, i = 32, s = 1, a = false, o = 0, c = Math.PI * 2) {
    super();
    this.type = "CylinderGeometry";
    this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: n,
      radialSegments: i,
      heightSegments: s,
      openEnded: a,
      thetaStart: o,
      thetaLength: c
    };
    const l = this;
    i = Math.floor(i);
    s = Math.floor(s);
    const h = [];
    const u = [];
    const d = [];
    const f = [];
    let m = 0;
    const _ = [];
    const g = n / 2;
    let p = 0;
    v();
    if (a === false) {
      if (e > 0)
        x(true);
      if (t > 0)
        x(false);
    }
    this.setIndex(h);
    this.setAttribute("position", new xe(u, 3));
    this.setAttribute("normal", new xe(d, 3));
    this.setAttribute("uv", new xe(f, 2));
    function v() {
      const M = new w();
      const S = new w();
      let E = 0;
      const C = (t - e) / n;
      for (let P = 0; P <= s; P++) {
        const y = [];
        const A = P / s;
        const O = A * (t - e) + e;
        for (let G = 0; G <= i; G++) {
          const U = G / i;
          const F = U * c + o;
          const z = Math.sin(F);
          const K = Math.cos(F);
          S.x = O * z;
          S.y = -A * n + g;
          S.z = O * K;
          u.push(S.x, S.y, S.z);
          M.set(z, C, K).normalize();
          d.push(M.x, M.y, M.z);
          f.push(U, 1 - A);
          y.push(m++);
        }
        _.push(y);
      }
      for (let P = 0; P < i; P++) {
        for (let y = 0; y < s; y++) {
          const A = _[y][P];
          const O = _[y + 1][P];
          const G = _[y + 1][P + 1];
          const U = _[y][P + 1];
          h.push(A, O, U);
          h.push(O, G, U);
          E += 6;
        }
      }
      l.addGroup(p, E, 0);
      p += E;
    }
    function x(M) {
      const S = m;
      const E = new $();
      const C = new w();
      let P = 0;
      const y = M === true ? e : t;
      const A = M === true ? 1 : -1;
      for (let G = 1; G <= i; G++) {
        u.push(0, g * A, 0);
        d.push(0, A, 0);
        f.push(0.5, 0.5);
        m++;
      }
      const O = m;
      for (let G = 0; G <= i; G++) {
        const U = G / i;
        const F = U * c + o;
        const z = Math.cos(F);
        const K = Math.sin(F);
        C.x = y * K;
        C.y = g * A;
        C.z = y * z;
        u.push(C.x, C.y, C.z);
        d.push(0, A, 0);
        E.x = z * 0.5 + 0.5;
        E.y = K * 0.5 * A + 0.5;
        f.push(E.x, E.y);
        m++;
      }
      for (let G = 0; G < i; G++) {
        const U = S + G;
        const F = O + G;
        if (M === true) {
          h.push(F, F + 1, U);
        } else {
          h.push(F + 1, F, U);
        }
        P += 3;
      }
      l.addGroup(p, P, M === true ? 1 : 2);
      p += P;
    }
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
};
var pr = class r extends bi {
  constructor(e = 1, t = 1, n = 32, i = 1, s = false, a = 0, o = Math.PI * 2) {
    super(0, e, t, n, i, s, a, o);
    this.type = "ConeGeometry";
    this.parameters = {
      radius: e,
      height: t,
      radialSegments: n,
      heightSegments: i,
      openEnded: s,
      thetaStart: a,
      thetaLength: o
    };
  }
  static fromJSON(e) {
    return new r(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
};
var Cn = class r extends ze {
  constructor(e = [], t = [], n = 1, i = 0) {
    super();
    this.type = "PolyhedronGeometry";
    this.parameters = {
      vertices: e,
      indices: t,
      radius: n,
      detail: i
    };
    const s = [];
    const a = [];
    o(i);
    l(n);
    h();
    this.setAttribute("position", new xe(s, 3));
    this.setAttribute("normal", new xe(s.slice(), 3));
    this.setAttribute("uv", new xe(a, 2));
    if (i === 0) {
      this.computeVertexNormals();
    } else {
      this.normalizeNormals();
    }
    function o(v) {
      const x = new w();
      const M = new w();
      const S = new w();
      for (let E = 0; E < t.length; E += 3) {
        f(t[E + 0], x);
        f(t[E + 1], M);
        f(t[E + 2], S);
        c(x, M, S, v);
      }
    }
    function c(v, x, M, S) {
      const E = S + 1;
      const C = [];
      for (let P = 0; P <= E; P++) {
        C[P] = [];
        const y = v.clone().lerp(M, P / E);
        const A = x.clone().lerp(M, P / E);
        const O = E - P;
        for (let G = 0; G <= O; G++) {
          if (G === 0 && P === E) {
            C[P][G] = y;
          } else {
            C[P][G] = y.clone().lerp(A, G / O);
          }
        }
      }
      for (let P = 0; P < E; P++) {
        for (let y = 0; y < 2 * (E - P) - 1; y++) {
          const A = Math.floor(y / 2);
          if (y % 2 === 0) {
            d(C[P][A + 1]);
            d(C[P + 1][A]);
            d(C[P][A]);
          } else {
            d(C[P][A + 1]);
            d(C[P + 1][A + 1]);
            d(C[P + 1][A]);
          }
        }
      }
    }
    function l(v) {
      const x = new w();
      for (let M = 0; M < s.length; M += 3) {
        x.x = s[M + 0];
        x.y = s[M + 1];
        x.z = s[M + 2];
        x.normalize().multiplyScalar(v);
        s[M + 0] = x.x;
        s[M + 1] = x.y;
        s[M + 2] = x.z;
      }
    }
    function h() {
      const v = new w();
      for (let x = 0; x < s.length; x += 3) {
        v.x = s[x + 0];
        v.y = s[x + 1];
        v.z = s[x + 2];
        const M = g(v) / 2 / Math.PI + 0.5;
        const S = p(v) / Math.PI + 0.5;
        a.push(M, 1 - S);
      }
      m();
      u();
    }
    function u() {
      for (let v = 0; v < a.length; v += 6) {
        const x = a[v + 0];
        const M = a[v + 2];
        const S = a[v + 4];
        const E = Math.max(x, M, S);
        const C = Math.min(x, M, S);
        if (E > 0.9 && C < 0.1) {
          if (x < 0.2)
            a[v + 0] += 1;
          if (M < 0.2)
            a[v + 2] += 1;
          if (S < 0.2)
            a[v + 4] += 1;
        }
      }
    }
    function d(v) {
      s.push(v.x, v.y, v.z);
    }
    function f(v, x) {
      const M = v * 3;
      x.x = e[M + 0];
      x.y = e[M + 1];
      x.z = e[M + 2];
    }
    function m() {
      const v = new w();
      const x = new w();
      const M = new w();
      const S = new w();
      const E = new $();
      const C = new $();
      const P = new $();
      for (let y = 0, A = 0; y < s.length; y += 9, A += 6) {
        v.set(s[y + 0], s[y + 1], s[y + 2]);
        x.set(s[y + 3], s[y + 4], s[y + 5]);
        M.set(s[y + 6], s[y + 7], s[y + 8]);
        E.set(a[A + 0], a[A + 1]);
        C.set(a[A + 2], a[A + 3]);
        P.set(a[A + 4], a[A + 5]);
        S.copy(v).add(x).add(M).divideScalar(3);
        const O = g(S);
        _(E, A + 0, v, O);
        _(C, A + 2, x, O);
        _(P, A + 4, M, O);
      }
    }
    function _(v, x, M, S) {
      if (S < 0 && v.x === 1) {
        a[x] = v.x - 1;
      }
      if (M.x === 0 && M.z === 0) {
        a[x] = S / 2 / Math.PI + 0.5;
      }
    }
    function g(v) {
      return Math.atan2(v.z, -v.x);
    }
    function p(v) {
      return Math.atan2(-v.y, Math.sqrt(v.x * v.x + v.z * v.z));
    }
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.vertices, e.indices, e.radius, e.details);
  }
};
var mr = class r extends Cn {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2;
    const i = 1 / n;
    const s = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -i,
      -n,
      0,
      -i,
      n,
      0,
      i,
      -n,
      0,
      i,
      n,
      // (±1/φ, ±φ, 0)
      -i,
      -n,
      0,
      -i,
      n,
      0,
      i,
      -n,
      0,
      i,
      n,
      0,
      // (±φ, 0, ±1/φ)
      -n,
      0,
      -i,
      n,
      0,
      -i,
      -n,
      0,
      i,
      n,
      0,
      i
    ];
    const a = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(s, a, e, t);
    this.type = "DodecahedronGeometry";
    this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new r(e.radius, e.detail);
  }
};
var ua = new w();
var da = new w();
var lc = new w();
var fa = new Tn();
var eo = class extends ze {
  constructor(e = null, t = 1) {
    super();
    this.type = "EdgesGeometry";
    this.parameters = {
      geometry: e,
      thresholdAngle: t
    };
    if (e !== null) {
      const n = 4;
      const i = Math.pow(10, n);
      const s = Math.cos(_i * t);
      const a = e.getIndex();
      const o = e.getAttribute("position");
      const c = a ? a.count : o.count;
      const l = [0, 0, 0];
      const h = ["a", "b", "c"];
      const u = new Array(3);
      const d = {};
      const f = [];
      for (let m = 0; m < c; m += 3) {
        if (a) {
          l[0] = a.getX(m);
          l[1] = a.getX(m + 1);
          l[2] = a.getX(m + 2);
        } else {
          l[0] = m;
          l[1] = m + 1;
          l[2] = m + 2;
        }
        const { a: _, b: g, c: p } = fa;
        _.fromBufferAttribute(o, l[0]);
        g.fromBufferAttribute(o, l[1]);
        p.fromBufferAttribute(o, l[2]);
        fa.getNormal(lc);
        u[0] = `${Math.round(_.x * i)},${Math.round(_.y * i)},${Math.round(_.z * i)}`;
        u[1] = `${Math.round(g.x * i)},${Math.round(g.y * i)},${Math.round(g.z * i)}`;
        u[2] = `${Math.round(p.x * i)},${Math.round(p.y * i)},${Math.round(p.z * i)}`;
        if (u[0] === u[1] || u[1] === u[2] || u[2] === u[0]) {
          continue;
        }
        for (let v = 0; v < 3; v++) {
          const x = (v + 1) % 3;
          const M = u[v];
          const S = u[x];
          const E = fa[h[v]];
          const C = fa[h[x]];
          const P = `${M}_${S}`;
          const y = `${S}_${M}`;
          if (y in d && d[y]) {
            if (lc.dot(d[y].normal) <= s) {
              f.push(E.x, E.y, E.z);
              f.push(C.x, C.y, C.z);
            }
            d[y] = null;
          } else if (!(P in d)) {
            d[P] = {
              index0: l[v],
              index1: l[x],
              normal: lc.clone()
            };
          }
        }
      }
      for (const m in d) {
        if (d[m]) {
          const { index0: _, index1: g } = d[m];
          ua.fromBufferAttribute(o, _);
          da.fromBufferAttribute(o, g);
          f.push(ua.x, ua.y, ua.z);
          f.push(da.x, da.y, da.z);
        }
      }
      this.setAttribute("position", new xe(f, 3));
    }
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
};
var An = class extends Si {
  constructor(e) {
    super(e);
    this.uuid = Bt();
    this.type = "Shape";
    this.holes = [];
  }
  getPointsHoles(e) {
    const t = [];
    for (let n = 0, i = this.holes.length; n < i; n++) {
      t[n] = this.holes[n].getPoints(e);
    }
    return t;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e);
    this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const i = e.holes[t];
      this.holes.push(i.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid;
    e.holes = [];
    for (let t = 0, n = this.holes.length; t < n; t++) {
      const i = this.holes[t];
      e.holes.push(i.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e);
    this.uuid = e.uuid;
    this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const i = e.holes[t];
      this.holes.push(new Si().fromJSON(i));
    }
    return this;
  }
};
var Ix = {
  triangulate: function(r, e, t = 2) {
    const n = e && e.length;
    const i = n ? e[0] * t : r.length;
    let s = Af(r, 0, i, t, true);
    const a = [];
    if (!s || s.next === s.prev)
      return a;
    let o, c, l, h, u, d, f;
    if (n)
      s = Ox(r, e, s, t);
    if (r.length > 80 * t) {
      o = l = r[0];
      c = h = r[1];
      for (let m = t; m < i; m += t) {
        u = r[m];
        d = r[m + 1];
        if (u < o)
          o = u;
        if (d < c)
          c = d;
        if (u > l)
          l = u;
        if (d > h)
          h = d;
      }
      f = Math.max(l - o, h - c);
      f = f !== 0 ? 32767 / f : 0;
    }
    gr(s, a, t, o, c, f, 0);
    return a;
  }
};
function Af(r, e, t, n, i) {
  let s, a;
  if (i === Zx(r, e, t, n) > 0) {
    for (s = e; s < t; s += n)
      a = qu(s, r[s], r[s + 1], a);
  } else {
    for (s = t - n; s >= e; s -= n)
      a = qu(s, r[s], r[s + 1], a);
  }
  if (a && Uo(a, a.next)) {
    xr(a);
    a = a.next;
  }
  return a;
}
function Ei(r, e) {
  if (!r)
    return r;
  if (!e)
    e = r;
  let t = r, n;
  do {
    n = false;
    if (!t.steiner && (Uo(t, t.next) || nt(t.prev, t, t.next) === 0)) {
      xr(t);
      t = e = t.prev;
      if (t === t.next)
        break;
      n = true;
    } else {
      t = t.next;
    }
  } while (n || t !== e);
  return e;
}
function gr(r, e, t, n, i, s, a) {
  if (!r)
    return;
  if (!a && s)
    Hx(r, n, i, s);
  let o = r, c, l;
  while (r.prev !== r.next) {
    c = r.prev;
    l = r.next;
    if (s ? Dx(r, n, i, s) : Ux(r)) {
      e.push(c.i / t | 0);
      e.push(r.i / t | 0);
      e.push(l.i / t | 0);
      xr(r);
      r = l.next;
      o = l.next;
      continue;
    }
    r = l;
    if (r === o) {
      if (!a) {
        gr(Ei(r), e, t, n, i, s, 1);
      } else if (a === 1) {
        r = Nx(Ei(r), e, t);
        gr(r, e, t, n, i, s, 2);
      } else if (a === 2) {
        Fx(r, e, t, n, i, s);
      }
      break;
    }
  }
}
function Ux(r) {
  const e = r.prev, t = r, n = r.next;
  if (nt(e, t, n) >= 0)
    return false;
  const i = e.x, s = t.x, a = n.x, o = e.y, c = t.y, l = n.y;
  const h = i < s ? i < a ? i : a : s < a ? s : a, u = o < c ? o < l ? o : l : c < l ? c : l, d = i > s ? i > a ? i : a : s > a ? s : a, f = o > c ? o > l ? o : l : c > l ? c : l;
  let m = n.next;
  while (m !== e) {
    if (m.x >= h && m.x <= d && m.y >= u && m.y <= f && ts(i, o, s, c, a, l, m.x, m.y) && nt(m.prev, m, m.next) >= 0)
      return false;
    m = m.next;
  }
  return true;
}
function Dx(r, e, t, n) {
  const i = r.prev, s = r, a = r.next;
  if (nt(i, s, a) >= 0)
    return false;
  const o = i.x, c = s.x, l = a.x, h = i.y, u = s.y, d = a.y;
  const f = o < c ? o < l ? o : l : c < l ? c : l, m = h < u ? h < d ? h : d : u < d ? u : d, _ = o > c ? o > l ? o : l : c > l ? c : l, g = h > u ? h > d ? h : d : u > d ? u : d;
  const p = fl(f, m, e, t, n), v = fl(_, g, e, t, n);
  let x = r.prevZ, M = r.nextZ;
  while (x && x.z >= p && M && M.z <= v) {
    if (x.x >= f && x.x <= _ && x.y >= m && x.y <= g && x !== i && x !== a && ts(o, h, c, u, l, d, x.x, x.y) && nt(x.prev, x, x.next) >= 0)
      return false;
    x = x.prevZ;
    if (M.x >= f && M.x <= _ && M.y >= m && M.y <= g && M !== i && M !== a && ts(o, h, c, u, l, d, M.x, M.y) && nt(M.prev, M, M.next) >= 0)
      return false;
    M = M.nextZ;
  }
  while (x && x.z >= p) {
    if (x.x >= f && x.x <= _ && x.y >= m && x.y <= g && x !== i && x !== a && ts(o, h, c, u, l, d, x.x, x.y) && nt(x.prev, x, x.next) >= 0)
      return false;
    x = x.prevZ;
  }
  while (M && M.z <= v) {
    if (M.x >= f && M.x <= _ && M.y >= m && M.y <= g && M !== i && M !== a && ts(o, h, c, u, l, d, M.x, M.y) && nt(M.prev, M, M.next) >= 0)
      return false;
    M = M.nextZ;
  }
  return true;
}
function Nx(r, e, t) {
  let n = r;
  do {
    const i = n.prev, s = n.next.next;
    if (!Uo(i, s) && Rf(i, n, n.next, s) && _r(i, s) && _r(s, i)) {
      e.push(i.i / t | 0);
      e.push(n.i / t | 0);
      e.push(s.i / t | 0);
      xr(n);
      xr(n.next);
      n = r = s;
    }
    n = n.next;
  } while (n !== r);
  return Ei(n);
}
function Fx(r, e, t, n, i, s) {
  let a = r;
  do {
    let o = a.next.next;
    while (o !== a.prev) {
      if (a.i !== o.i && Xx(a, o)) {
        let c = Cf(a, o);
        a = Ei(a, a.next);
        c = Ei(c, c.next);
        gr(a, e, t, n, i, s, 0);
        gr(c, e, t, n, i, s, 0);
        return;
      }
      o = o.next;
    }
    a = a.next;
  } while (a !== r);
}
function Ox(r, e, t, n) {
  const i = [];
  let s, a, o, c, l;
  for (s = 0, a = e.length; s < a; s++) {
    o = e[s] * n;
    c = s < a - 1 ? e[s + 1] * n : r.length;
    l = Af(r, o, c, n, false);
    if (l === l.next)
      l.steiner = true;
    i.push(Wx(l));
  }
  i.sort(Bx);
  for (s = 0; s < i.length; s++) {
    t = zx(i[s], t);
  }
  return t;
}
function Bx(r, e) {
  return r.x - e.x;
}
function zx(r, e) {
  const t = kx(r, e);
  if (!t) {
    return e;
  }
  const n = Cf(t, r);
  Ei(n, n.next);
  return Ei(t, t.next);
}
function kx(r, e) {
  let t = e, n = -Infinity, i;
  const s = r.x, a = r.y;
  do {
    if (a <= t.y && a >= t.next.y && t.next.y !== t.y) {
      const d = t.x + (a - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
      if (d <= s && d > n) {
        n = d;
        i = t.x < t.next.x ? t : t.next;
        if (d === s)
          return i;
      }
    }
    t = t.next;
  } while (t !== e);
  if (!i)
    return null;
  const o = i, c = i.x, l = i.y;
  let h = Infinity, u;
  t = i;
  do {
    if (s >= t.x && t.x >= c && s !== t.x && ts(a < l ? s : n, a, c, l, a < l ? n : s, a, t.x, t.y)) {
      u = Math.abs(a - t.y) / (s - t.x);
      if (_r(t, r) && (u < h || u === h && (t.x > i.x || t.x === i.x && Vx(i, t)))) {
        i = t;
        h = u;
      }
    }
    t = t.next;
  } while (t !== o);
  return i;
}
function Vx(r, e) {
  return nt(r.prev, r, e.prev) < 0 && nt(e.next, r, r.next) < 0;
}
function Hx(r, e, t, n) {
  let i = r;
  do {
    if (i.z === 0)
      i.z = fl(i.x, i.y, e, t, n);
    i.prevZ = i.prev;
    i.nextZ = i.next;
    i = i.next;
  } while (i !== r);
  i.prevZ.nextZ = null;
  i.prevZ = null;
  Gx(i);
}
function Gx(r) {
  let e, t, n, i, s, a, o, c, l = 1;
  do {
    t = r;
    r = null;
    s = null;
    a = 0;
    while (t) {
      a++;
      n = t;
      o = 0;
      for (e = 0; e < l; e++) {
        o++;
        n = n.nextZ;
        if (!n)
          break;
      }
      c = l;
      while (o > 0 || c > 0 && n) {
        if (o !== 0 && (c === 0 || !n || t.z <= n.z)) {
          i = t;
          t = t.nextZ;
          o--;
        } else {
          i = n;
          n = n.nextZ;
          c--;
        }
        if (s)
          s.nextZ = i;
        else
          r = i;
        i.prevZ = s;
        s = i;
      }
      t = n;
    }
    s.nextZ = null;
    l *= 2;
  } while (a > 1);
  return r;
}
function fl(r, e, t, n, i) {
  r = (r - t) * i | 0;
  e = (e - n) * i | 0;
  r = (r | r << 8) & 16711935;
  r = (r | r << 4) & 252645135;
  r = (r | r << 2) & 858993459;
  r = (r | r << 1) & 1431655765;
  e = (e | e << 8) & 16711935;
  e = (e | e << 4) & 252645135;
  e = (e | e << 2) & 858993459;
  e = (e | e << 1) & 1431655765;
  return r | e << 1;
}
function Wx(r) {
  let e = r, t = r;
  do {
    if (e.x < t.x || e.x === t.x && e.y < t.y)
      t = e;
    e = e.next;
  } while (e !== r);
  return t;
}
function ts(r, e, t, n, i, s, a, o) {
  return (i - a) * (e - o) >= (r - a) * (s - o) && (r - a) * (n - o) >= (t - a) * (e - o) && (t - a) * (s - o) >= (i - a) * (n - o);
}
function Xx(r, e) {
  return r.next.i !== e.i && r.prev.i !== e.i && !qx(r, e) && // dones't intersect other edges
  (_r(r, e) && _r(e, r) && Yx(r, e) && // locally visible
  (nt(r.prev, r, e.prev) || nt(r, e.prev, e)) || // does not create opposite-facing sectors
  Uo(r, e) && nt(r.prev, r, r.next) > 0 && nt(e.prev, e, e.next) > 0);
}
function nt(r, e, t) {
  return (e.y - r.y) * (t.x - e.x) - (e.x - r.x) * (t.y - e.y);
}
function Uo(r, e) {
  return r.x === e.x && r.y === e.y;
}
function Rf(r, e, t, n) {
  const i = ma(nt(r, e, t));
  const s = ma(nt(r, e, n));
  const a = ma(nt(t, n, r));
  const o = ma(nt(t, n, e));
  if (i !== s && a !== o)
    return true;
  if (i === 0 && pa(r, t, e))
    return true;
  if (s === 0 && pa(r, n, e))
    return true;
  if (a === 0 && pa(t, r, n))
    return true;
  if (o === 0 && pa(t, e, n))
    return true;
  return false;
}
function pa(r, e, t) {
  return e.x <= Math.max(r.x, t.x) && e.x >= Math.min(r.x, t.x) && e.y <= Math.max(r.y, t.y) && e.y >= Math.min(r.y, t.y);
}
function ma(r) {
  return r > 0 ? 1 : r < 0 ? -1 : 0;
}
function qx(r, e) {
  let t = r;
  do {
    if (t.i !== r.i && t.next.i !== r.i && t.i !== e.i && t.next.i !== e.i && Rf(t, t.next, r, e))
      return true;
    t = t.next;
  } while (t !== r);
  return false;
}
function _r(r, e) {
  return nt(r.prev, r, r.next) < 0 ? nt(r, e, r.next) >= 0 && nt(r, r.prev, e) >= 0 : nt(r, e, r.prev) < 0 || nt(r, r.next, e) < 0;
}
function Yx(r, e) {
  let t = r, n = false;
  const i = (r.x + e.x) / 2, s = (r.y + e.y) / 2;
  do {
    if (t.y > s !== t.next.y > s && t.next.y !== t.y && i < (t.next.x - t.x) * (s - t.y) / (t.next.y - t.y) + t.x)
      n = !n;
    t = t.next;
  } while (t !== r);
  return n;
}
function Cf(r, e) {
  const t = new pl(r.i, r.x, r.y), n = new pl(e.i, e.x, e.y), i = r.next, s = e.prev;
  r.next = e;
  e.prev = r;
  t.next = i;
  i.prev = t;
  n.next = t;
  t.prev = n;
  s.next = n;
  n.prev = s;
  return n;
}
function qu(r, e, t, n) {
  const i = new pl(r, e, t);
  if (!n) {
    i.prev = i;
    i.next = i;
  } else {
    i.next = n.next;
    i.prev = n;
    n.next.prev = i;
    n.next = i;
  }
  return i;
}
function xr(r) {
  r.next.prev = r.prev;
  r.prev.next = r.next;
  if (r.prevZ)
    r.prevZ.nextZ = r.nextZ;
  if (r.nextZ)
    r.nextZ.prevZ = r.prevZ;
}
function pl(r, e, t) {
  this.i = r;
  this.x = e;
  this.y = t;
  this.prev = null;
  this.next = null;
  this.z = 0;
  this.prevZ = null;
  this.nextZ = null;
  this.steiner = false;
}
function Zx(r, e, t, n) {
  let i = 0;
  for (let s = e, a = t - n; s < t; s += n) {
    i += (r[a] - r[s]) * (r[s + 1] + r[a + 1]);
    a = s;
  }
  return i;
}
var un = class r {
  // calculate area of the contour polygon
  static area(e) {
    const t = e.length;
    let n = 0;
    for (let i = t - 1, s = 0; s < t; i = s++) {
      n += e[i].x * e[s].y - e[s].x * e[i].y;
    }
    return n * 0.5;
  }
  static isClockWise(e) {
    return r.area(e) < 0;
  }
  static triangulateShape(e, t) {
    const n = [];
    const i = [];
    const s = [];
    Yu(e);
    Zu(n, e);
    let a = e.length;
    t.forEach(Yu);
    for (let c = 0; c < t.length; c++) {
      i.push(a);
      a += t[c].length;
      Zu(n, t[c]);
    }
    const o = Ix.triangulate(n, i);
    for (let c = 0; c < o.length; c += 3) {
      s.push(o.slice(c, c + 3));
    }
    return s;
  }
};
function Yu(r) {
  const e = r.length;
  if (e > 2 && r[e - 1].equals(r[0])) {
    r.pop();
  }
}
function Zu(r, e) {
  for (let t = 0; t < e.length; t++) {
    r.push(e[t].x);
    r.push(e[t].y);
  }
}
var vr = class r extends ze {
  constructor(e = new An([new $(0.5, 0.5), new $(-0.5, 0.5), new $(-0.5, -0.5), new $(0.5, -0.5)]), t = {}) {
    super();
    this.type = "ExtrudeGeometry";
    this.parameters = {
      shapes: e,
      options: t
    };
    e = Array.isArray(e) ? e : [e];
    const n = this;
    const i = [];
    const s = [];
    for (let o = 0, c = e.length; o < c; o++) {
      const l = e[o];
      a(l);
    }
    this.setAttribute("position", new xe(i, 3));
    this.setAttribute("uv", new xe(s, 2));
    this.computeVertexNormals();
    function a(o) {
      const c = [];
      const l = t.curveSegments !== void 0 ? t.curveSegments : 12;
      const h = t.steps !== void 0 ? t.steps : 1;
      const u = t.depth !== void 0 ? t.depth : 1;
      let d = t.bevelEnabled !== void 0 ? t.bevelEnabled : true;
      let f = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2;
      let m = t.bevelSize !== void 0 ? t.bevelSize : f - 0.1;
      let _ = t.bevelOffset !== void 0 ? t.bevelOffset : 0;
      let g = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const p = t.extrudePath;
      const v = t.UVGenerator !== void 0 ? t.UVGenerator : Jx;
      let x, M = false;
      let S, E, C, P;
      if (p) {
        x = p.getSpacedPoints(h);
        M = true;
        d = false;
        S = p.computeFrenetFrames(h, false);
        E = new w();
        C = new w();
        P = new w();
      }
      if (!d) {
        g = 0;
        f = 0;
        m = 0;
        _ = 0;
      }
      const y = o.extractPoints(l);
      let A = y.shape;
      const O = y.holes;
      const G = !un.isClockWise(A);
      if (G) {
        A = A.reverse();
        for (let Q = 0, X = O.length; Q < X; Q++) {
          const ee = O[Q];
          if (un.isClockWise(ee)) {
            O[Q] = ee.reverse();
          }
        }
      }
      const U = un.triangulateShape(A, O);
      const F = A;
      for (let Q = 0, X = O.length; Q < X; Q++) {
        const ee = O[Q];
        A = A.concat(ee);
      }
      function z(Q, X, ee) {
        if (!X)
          console.error("THREE.ExtrudeGeometry: vec does not exist");
        return Q.clone().addScaledVector(X, ee);
      }
      const K = A.length, Z = U.length;
      function Y(Q, X, ee) {
        let ge, ce, we;
        const Ae = Q.x - X.x, be = Q.y - X.y;
        const ke = ee.x - Q.x, Ye = ee.y - Q.y;
        const R = Ae * Ae + be * be;
        const b = Ae * Ye - be * ke;
        if (Math.abs(b) > Number.EPSILON) {
          const B = Math.sqrt(R);
          const ne = Math.sqrt(ke * ke + Ye * Ye);
          const se = X.x - be / B;
          const le = X.y + Ae / B;
          const Pe = ee.x - Ye / ne;
          const me = ee.y + ke / ne;
          const W = ((Pe - se) * Ye - (me - le) * ke) / (Ae * Ye - be * ke);
          ge = se + Ae * W - Q.x;
          ce = le + be * W - Q.y;
          const ve = ge * ge + ce * ce;
          if (ve <= 2) {
            return new $(ge, ce);
          } else {
            we = Math.sqrt(ve / 2);
          }
        } else {
          let B = false;
          if (Ae > Number.EPSILON) {
            if (ke > Number.EPSILON) {
              B = true;
            }
          } else {
            if (Ae < -Number.EPSILON) {
              if (ke < -Number.EPSILON) {
                B = true;
              }
            } else {
              if (Math.sign(be) === Math.sign(Ye)) {
                B = true;
              }
            }
          }
          if (B) {
            ge = -be;
            ce = Ae;
            we = Math.sqrt(R);
          } else {
            ge = Ae;
            ce = be;
            we = Math.sqrt(R / 2);
          }
        }
        return new $(ge / we, ce / we);
      }
      const j = [];
      for (let Q = 0, X = F.length, ee = X - 1, ge = Q + 1; Q < X; Q++, ee++, ge++) {
        if (ee === X)
          ee = 0;
        if (ge === X)
          ge = 0;
        j[Q] = Y(F[Q], F[ee], F[ge]);
      }
      const te = [];
      let pe, he = j.concat();
      for (let Q = 0, X = O.length; Q < X; Q++) {
        const ee = O[Q];
        pe = [];
        for (let ge = 0, ce = ee.length, we = ce - 1, Ae = ge + 1; ge < ce; ge++, we++, Ae++) {
          if (we === ce)
            we = 0;
          if (Ae === ce)
            Ae = 0;
          pe[ge] = Y(ee[ge], ee[we], ee[Ae]);
        }
        te.push(pe);
        he = he.concat(pe);
      }
      for (let Q = 0; Q < g; Q++) {
        const X = Q / g;
        const ee = f * Math.cos(X * Math.PI / 2);
        const ge = m * Math.sin(X * Math.PI / 2) + _;
        for (let ce = 0, we = F.length; ce < we; ce++) {
          const Ae = z(F[ce], j[ce], ge);
          L(Ae.x, Ae.y, -ee);
        }
        for (let ce = 0, we = O.length; ce < we; ce++) {
          const Ae = O[ce];
          pe = te[ce];
          for (let be = 0, ke = Ae.length; be < ke; be++) {
            const Ye = z(Ae[be], pe[be], ge);
            L(Ye.x, Ye.y, -ee);
          }
        }
      }
      const k = m + _;
      for (let Q = 0; Q < K; Q++) {
        const X = d ? z(A[Q], he[Q], k) : A[Q];
        if (!M) {
          L(X.x, X.y, 0);
        } else {
          C.copy(S.normals[0]).multiplyScalar(X.x);
          E.copy(S.binormals[0]).multiplyScalar(X.y);
          P.copy(x[0]).add(C).add(E);
          L(P.x, P.y, P.z);
        }
      }
      for (let Q = 1; Q <= h; Q++) {
        for (let X = 0; X < K; X++) {
          const ee = d ? z(A[X], he[X], k) : A[X];
          if (!M) {
            L(ee.x, ee.y, u / h * Q);
          } else {
            C.copy(S.normals[Q]).multiplyScalar(ee.x);
            E.copy(S.binormals[Q]).multiplyScalar(ee.y);
            P.copy(x[Q]).add(C).add(E);
            L(P.x, P.y, P.z);
          }
        }
      }
      for (let Q = g - 1; Q >= 0; Q--) {
        const X = Q / g;
        const ee = f * Math.cos(X * Math.PI / 2);
        const ge = m * Math.sin(X * Math.PI / 2) + _;
        for (let ce = 0, we = F.length; ce < we; ce++) {
          const Ae = z(F[ce], j[ce], ge);
          L(Ae.x, Ae.y, u + ee);
        }
        for (let ce = 0, we = O.length; ce < we; ce++) {
          const Ae = O[ce];
          pe = te[ce];
          for (let be = 0, ke = Ae.length; be < ke; be++) {
            const Ye = z(Ae[be], pe[be], ge);
            if (!M) {
              L(Ye.x, Ye.y, u + ee);
            } else {
              L(Ye.x, Ye.y + x[h - 1].y, x[h - 1].x + ee);
            }
          }
        }
      }
      J();
      oe();
      function J() {
        const Q = i.length / 3;
        if (d) {
          let X = 0;
          let ee = K * X;
          for (let ge = 0; ge < Z; ge++) {
            const ce = U[ge];
            Le(ce[2] + ee, ce[1] + ee, ce[0] + ee);
          }
          X = h + g * 2;
          ee = K * X;
          for (let ge = 0; ge < Z; ge++) {
            const ce = U[ge];
            Le(ce[0] + ee, ce[1] + ee, ce[2] + ee);
          }
        } else {
          for (let X = 0; X < Z; X++) {
            const ee = U[X];
            Le(ee[2], ee[1], ee[0]);
          }
          for (let X = 0; X < Z; X++) {
            const ee = U[X];
            Le(ee[0] + K * h, ee[1] + K * h, ee[2] + K * h);
          }
        }
        n.addGroup(Q, i.length / 3 - Q, 0);
      }
      function oe() {
        const Q = i.length / 3;
        let X = 0;
        ue(F, X);
        X += F.length;
        for (let ee = 0, ge = O.length; ee < ge; ee++) {
          const ce = O[ee];
          ue(ce, X);
          X += ce.length;
        }
        n.addGroup(Q, i.length / 3 - Q, 1);
      }
      function ue(Q, X) {
        let ee = Q.length;
        while (--ee >= 0) {
          const ge = ee;
          let ce = ee - 1;
          if (ce < 0)
            ce = Q.length - 1;
          for (let we = 0, Ae = h + g * 2; we < Ae; we++) {
            const be = K * we;
            const ke = K * (we + 1);
            const Ye = X + ge + be, R = X + ce + be, b = X + ce + ke, B = X + ge + ke;
            Ie(Ye, R, b, B);
          }
        }
      }
      function L(Q, X, ee) {
        c.push(Q);
        c.push(X);
        c.push(ee);
      }
      function Le(Q, X, ee) {
        re(Q);
        re(X);
        re(ee);
        const ge = i.length / 3;
        const ce = v.generateTopUV(n, i, ge - 3, ge - 2, ge - 1);
        ye(ce[0]);
        ye(ce[1]);
        ye(ce[2]);
      }
      function Ie(Q, X, ee, ge) {
        re(Q);
        re(X);
        re(ge);
        re(X);
        re(ee);
        re(ge);
        const ce = i.length / 3;
        const we = v.generateSideWallUV(n, i, ce - 6, ce - 3, ce - 2, ce - 1);
        ye(we[0]);
        ye(we[1]);
        ye(we[3]);
        ye(we[1]);
        ye(we[2]);
        ye(we[3]);
      }
      function re(Q) {
        i.push(c[Q * 3 + 0]);
        i.push(c[Q * 3 + 1]);
        i.push(c[Q * 3 + 2]);
      }
      function ye(Q) {
        s.push(Q.x);
        s.push(Q.y);
      }
    }
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    const t = this.parameters.shapes;
    const n = this.parameters.options;
    return $x(t, n, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let s = 0, a = e.shapes.length; s < a; s++) {
      const o = t[e.shapes[s]];
      n.push(o);
    }
    const i = e.options.extrudePath;
    if (i !== void 0) {
      e.options.extrudePath = new Oh[i.type]().fromJSON(i);
    }
    return new r(n, e.options);
  }
};
var Jx = {
  generateTopUV: function(r, e, t, n, i) {
    const s = e[t * 3];
    const a = e[t * 3 + 1];
    const o = e[n * 3];
    const c = e[n * 3 + 1];
    const l = e[i * 3];
    const h = e[i * 3 + 1];
    return [
      new $(s, a),
      new $(o, c),
      new $(l, h)
    ];
  },
  generateSideWallUV: function(r, e, t, n, i, s) {
    const a = e[t * 3];
    const o = e[t * 3 + 1];
    const c = e[t * 3 + 2];
    const l = e[n * 3];
    const h = e[n * 3 + 1];
    const u = e[n * 3 + 2];
    const d = e[i * 3];
    const f = e[i * 3 + 1];
    const m = e[i * 3 + 2];
    const _ = e[s * 3];
    const g = e[s * 3 + 1];
    const p = e[s * 3 + 2];
    if (Math.abs(o - h) < Math.abs(a - l)) {
      return [
        new $(a, 1 - c),
        new $(l, 1 - u),
        new $(d, 1 - m),
        new $(_, 1 - p)
      ];
    } else {
      return [
        new $(o, 1 - c),
        new $(h, 1 - u),
        new $(f, 1 - m),
        new $(g, 1 - p)
      ];
    }
  }
};
function $x(r, e, t) {
  t.shapes = [];
  if (Array.isArray(r)) {
    for (let n = 0, i = r.length; n < i; n++) {
      const s = r[n];
      t.shapes.push(s.uuid);
    }
  } else {
    t.shapes.push(r.uuid);
  }
  t.options = Object.assign({}, e);
  if (e.extrudePath !== void 0)
    t.options.extrudePath = e.extrudePath.toJSON();
  return t;
}
var yr = class r extends Cn {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2;
    const i = [
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      0,
      0,
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      n,
      0,
      -1,
      n,
      0,
      1,
      -n,
      0,
      -1,
      -n,
      0,
      1
    ];
    const s = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(i, s, e, t);
    this.type = "IcosahedronGeometry";
    this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new r(e.radius, e.detail);
  }
};
var _s = class r extends Cn {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ];
    const i = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(n, i, e, t);
    this.type = "OctahedronGeometry";
    this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new r(e.radius, e.detail);
  }
};
var Mr = class r extends ze {
  constructor(e = 0.5, t = 1, n = 32, i = 1, s = 0, a = Math.PI * 2) {
    super();
    this.type = "RingGeometry";
    this.parameters = {
      innerRadius: e,
      outerRadius: t,
      thetaSegments: n,
      phiSegments: i,
      thetaStart: s,
      thetaLength: a
    };
    n = Math.max(3, n);
    i = Math.max(1, i);
    const o = [];
    const c = [];
    const l = [];
    const h = [];
    let u = e;
    const d = (t - e) / i;
    const f = new w();
    const m = new $();
    for (let _ = 0; _ <= i; _++) {
      for (let g = 0; g <= n; g++) {
        const p = s + g / n * a;
        f.x = u * Math.cos(p);
        f.y = u * Math.sin(p);
        c.push(f.x, f.y, f.z);
        l.push(0, 0, 1);
        m.x = (f.x / t + 1) / 2;
        m.y = (f.y / t + 1) / 2;
        h.push(m.x, m.y);
      }
      u += d;
    }
    for (let _ = 0; _ < i; _++) {
      const g = _ * (n + 1);
      for (let p = 0; p < n; p++) {
        const v = p + g;
        const x = v;
        const M = v + n + 1;
        const S = v + n + 2;
        const E = v + 1;
        o.push(x, M, E);
        o.push(M, S, E);
      }
    }
    this.setIndex(o);
    this.setAttribute("position", new xe(c, 3));
    this.setAttribute("normal", new xe(l, 3));
    this.setAttribute("uv", new xe(h, 2));
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
};
var Sr = class r extends ze {
  constructor(e = new An([new $(0, 0.5), new $(-0.5, -0.5), new $(0.5, -0.5)]), t = 12) {
    super();
    this.type = "ShapeGeometry";
    this.parameters = {
      shapes: e,
      curveSegments: t
    };
    const n = [];
    const i = [];
    const s = [];
    const a = [];
    let o = 0;
    let c = 0;
    if (Array.isArray(e) === false) {
      l(e);
    } else {
      for (let h = 0; h < e.length; h++) {
        l(e[h]);
        this.addGroup(o, c, h);
        o += c;
        c = 0;
      }
    }
    this.setIndex(n);
    this.setAttribute("position", new xe(i, 3));
    this.setAttribute("normal", new xe(s, 3));
    this.setAttribute("uv", new xe(a, 2));
    function l(h) {
      const u = i.length / 3;
      const d = h.extractPoints(t);
      let f = d.shape;
      const m = d.holes;
      if (un.isClockWise(f) === false) {
        f = f.reverse();
      }
      for (let g = 0, p = m.length; g < p; g++) {
        const v = m[g];
        if (un.isClockWise(v) === true) {
          m[g] = v.reverse();
        }
      }
      const _ = un.triangulateShape(f, m);
      for (let g = 0, p = m.length; g < p; g++) {
        const v = m[g];
        f = f.concat(v);
      }
      for (let g = 0, p = f.length; g < p; g++) {
        const v = f[g];
        i.push(v.x, v.y, 0);
        s.push(0, 0, 1);
        a.push(v.x, v.y);
      }
      for (let g = 0, p = _.length; g < p; g++) {
        const v = _[g];
        const x = v[0] + u;
        const M = v[1] + u;
        const S = v[2] + u;
        n.push(x, M, S);
        c += 3;
      }
    }
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    const t = this.parameters.shapes;
    return Kx(t, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let i = 0, s = e.shapes.length; i < s; i++) {
      const a = t[e.shapes[i]];
      n.push(a);
    }
    return new r(n, e.curveSegments);
  }
};
function Kx(r, e) {
  e.shapes = [];
  if (Array.isArray(r)) {
    for (let t = 0, n = r.length; t < n; t++) {
      const i = r[t];
      e.shapes.push(i.uuid);
    }
  } else {
    e.shapes.push(r.uuid);
  }
  return e;
}
var xs = class r extends ze {
  constructor(e = 1, t = 32, n = 16, i = 0, s = Math.PI * 2, a = 0, o = Math.PI) {
    super();
    this.type = "SphereGeometry";
    this.parameters = {
      radius: e,
      widthSegments: t,
      heightSegments: n,
      phiStart: i,
      phiLength: s,
      thetaStart: a,
      thetaLength: o
    };
    t = Math.max(3, Math.floor(t));
    n = Math.max(2, Math.floor(n));
    const c = Math.min(a + o, Math.PI);
    let l = 0;
    const h = [];
    const u = new w();
    const d = new w();
    const f = [];
    const m = [];
    const _ = [];
    const g = [];
    for (let p = 0; p <= n; p++) {
      const v = [];
      const x = p / n;
      let M = 0;
      if (p === 0 && a === 0) {
        M = 0.5 / t;
      } else if (p === n && c === Math.PI) {
        M = -0.5 / t;
      }
      for (let S = 0; S <= t; S++) {
        const E = S / t;
        u.x = -e * Math.cos(i + E * s) * Math.sin(a + x * o);
        u.y = e * Math.cos(a + x * o);
        u.z = e * Math.sin(i + E * s) * Math.sin(a + x * o);
        m.push(u.x, u.y, u.z);
        d.copy(u).normalize();
        _.push(d.x, d.y, d.z);
        g.push(E + M, 1 - x);
        v.push(l++);
      }
      h.push(v);
    }
    for (let p = 0; p < n; p++) {
      for (let v = 0; v < t; v++) {
        const x = h[p][v + 1];
        const M = h[p][v];
        const S = h[p + 1][v];
        const E = h[p + 1][v + 1];
        if (p !== 0 || a > 0)
          f.push(x, M, E);
        if (p !== n - 1 || c < Math.PI)
          f.push(M, S, E);
      }
    }
    this.setIndex(f);
    this.setAttribute("position", new xe(m, 3));
    this.setAttribute("normal", new xe(_, 3));
    this.setAttribute("uv", new xe(g, 2));
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
};
var br = class r extends Cn {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ];
    const i = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(n, i, e, t);
    this.type = "TetrahedronGeometry";
    this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new r(e.radius, e.detail);
  }
};
var Er = class r extends ze {
  constructor(e = 1, t = 0.4, n = 12, i = 48, s = Math.PI * 2) {
    super();
    this.type = "TorusGeometry";
    this.parameters = {
      radius: e,
      tube: t,
      radialSegments: n,
      tubularSegments: i,
      arc: s
    };
    n = Math.floor(n);
    i = Math.floor(i);
    const a = [];
    const o = [];
    const c = [];
    const l = [];
    const h = new w();
    const u = new w();
    const d = new w();
    for (let f = 0; f <= n; f++) {
      for (let m = 0; m <= i; m++) {
        const _ = m / i * s;
        const g = f / n * Math.PI * 2;
        u.x = (e + t * Math.cos(g)) * Math.cos(_);
        u.y = (e + t * Math.cos(g)) * Math.sin(_);
        u.z = t * Math.sin(g);
        o.push(u.x, u.y, u.z);
        h.x = e * Math.cos(_);
        h.y = e * Math.sin(_);
        d.subVectors(u, h).normalize();
        c.push(d.x, d.y, d.z);
        l.push(m / i);
        l.push(f / n);
      }
    }
    for (let f = 1; f <= n; f++) {
      for (let m = 1; m <= i; m++) {
        const _ = (i + 1) * f + m - 1;
        const g = (i + 1) * (f - 1) + m - 1;
        const p = (i + 1) * (f - 1) + m;
        const v = (i + 1) * f + m;
        a.push(_, g, v);
        a.push(g, p, v);
      }
    }
    this.setIndex(a);
    this.setAttribute("position", new xe(o, 3));
    this.setAttribute("normal", new xe(c, 3));
    this.setAttribute("uv", new xe(l, 2));
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
};
var Tr = class r extends ze {
  constructor(e = 1, t = 0.4, n = 64, i = 8, s = 2, a = 3) {
    super();
    this.type = "TorusKnotGeometry";
    this.parameters = {
      radius: e,
      tube: t,
      tubularSegments: n,
      radialSegments: i,
      p: s,
      q: a
    };
    n = Math.floor(n);
    i = Math.floor(i);
    const o = [];
    const c = [];
    const l = [];
    const h = [];
    const u = new w();
    const d = new w();
    const f = new w();
    const m = new w();
    const _ = new w();
    const g = new w();
    const p = new w();
    for (let x = 0; x <= n; ++x) {
      const M = x / n * s * Math.PI * 2;
      v(M, s, a, e, f);
      v(M + 0.01, s, a, e, m);
      g.subVectors(m, f);
      p.addVectors(m, f);
      _.crossVectors(g, p);
      p.crossVectors(_, g);
      _.normalize();
      p.normalize();
      for (let S = 0; S <= i; ++S) {
        const E = S / i * Math.PI * 2;
        const C = -t * Math.cos(E);
        const P = t * Math.sin(E);
        u.x = f.x + (C * p.x + P * _.x);
        u.y = f.y + (C * p.y + P * _.y);
        u.z = f.z + (C * p.z + P * _.z);
        c.push(u.x, u.y, u.z);
        d.subVectors(u, f).normalize();
        l.push(d.x, d.y, d.z);
        h.push(x / n);
        h.push(S / i);
      }
    }
    for (let x = 1; x <= n; x++) {
      for (let M = 1; M <= i; M++) {
        const S = (i + 1) * (x - 1) + (M - 1);
        const E = (i + 1) * x + (M - 1);
        const C = (i + 1) * x + M;
        const P = (i + 1) * (x - 1) + M;
        o.push(S, E, P);
        o.push(E, C, P);
      }
    }
    this.setIndex(o);
    this.setAttribute("position", new xe(c, 3));
    this.setAttribute("normal", new xe(l, 3));
    this.setAttribute("uv", new xe(h, 2));
    function v(x, M, S, E, C) {
      const P = Math.cos(x);
      const y = Math.sin(x);
      const A = S / M * x;
      const O = Math.cos(A);
      C.x = E * (2 + O) * 0.5 * P;
      C.y = E * (2 + O) * y * 0.5;
      C.z = E * Math.sin(A) * 0.5;
    }
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  static fromJSON(e) {
    return new r(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
};
var wr = class r extends ze {
  constructor(e = new hr(new w(-1, -1, 0), new w(-1, 1, 0), new w(1, 1, 0)), t = 64, n = 1, i = 8, s = false) {
    super();
    this.type = "TubeGeometry";
    this.parameters = {
      path: e,
      tubularSegments: t,
      radius: n,
      radialSegments: i,
      closed: s
    };
    const a = e.computeFrenetFrames(t, s);
    this.tangents = a.tangents;
    this.normals = a.normals;
    this.binormals = a.binormals;
    const o = new w();
    const c = new w();
    const l = new $();
    let h = new w();
    const u = [];
    const d = [];
    const f = [];
    const m = [];
    _();
    this.setIndex(m);
    this.setAttribute("position", new xe(u, 3));
    this.setAttribute("normal", new xe(d, 3));
    this.setAttribute("uv", new xe(f, 2));
    function _() {
      for (let x = 0; x < t; x++) {
        g(x);
      }
      g(s === false ? t : 0);
      v();
      p();
    }
    function g(x) {
      h = e.getPointAt(x / t, h);
      const M = a.normals[x];
      const S = a.binormals[x];
      for (let E = 0; E <= i; E++) {
        const C = E / i * Math.PI * 2;
        const P = Math.sin(C);
        const y = -Math.cos(C);
        c.x = y * M.x + P * S.x;
        c.y = y * M.y + P * S.y;
        c.z = y * M.z + P * S.z;
        c.normalize();
        d.push(c.x, c.y, c.z);
        o.x = h.x + n * c.x;
        o.y = h.y + n * c.y;
        o.z = h.z + n * c.z;
        u.push(o.x, o.y, o.z);
      }
    }
    function p() {
      for (let x = 1; x <= t; x++) {
        for (let M = 1; M <= i; M++) {
          const S = (i + 1) * (x - 1) + (M - 1);
          const E = (i + 1) * x + (M - 1);
          const C = (i + 1) * x + M;
          const P = (i + 1) * (x - 1) + M;
          m.push(S, E, P);
          m.push(E, C, P);
        }
      }
    }
    function v() {
      for (let x = 0; x <= t; x++) {
        for (let M = 0; M <= i; M++) {
          l.x = x / t;
          l.y = M / i;
          f.push(l.x, l.y);
        }
      }
    }
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.path = this.parameters.path.toJSON();
    return e;
  }
  static fromJSON(e) {
    return new r(
      new Oh[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
};
var to = class extends ze {
  constructor(e = null) {
    super();
    this.type = "WireframeGeometry";
    this.parameters = {
      geometry: e
    };
    if (e !== null) {
      const t = [];
      const n = /* @__PURE__ */ new Set();
      const i = new w();
      const s = new w();
      if (e.index !== null) {
        const a = e.attributes.position;
        const o = e.index;
        let c = e.groups;
        if (c.length === 0) {
          c = [{ start: 0, count: o.count, materialIndex: 0 }];
        }
        for (let l = 0, h = c.length; l < h; ++l) {
          const u = c[l];
          const d = u.start;
          const f = u.count;
          for (let m = d, _ = d + f; m < _; m += 3) {
            for (let g = 0; g < 3; g++) {
              const p = o.getX(m + g);
              const v = o.getX(m + (g + 1) % 3);
              i.fromBufferAttribute(a, p);
              s.fromBufferAttribute(a, v);
              if (Ju(i, s, n) === true) {
                t.push(i.x, i.y, i.z);
                t.push(s.x, s.y, s.z);
              }
            }
          }
        }
      } else {
        const a = e.attributes.position;
        for (let o = 0, c = a.count / 3; o < c; o++) {
          for (let l = 0; l < 3; l++) {
            const h = 3 * o + l;
            const u = 3 * o + (l + 1) % 3;
            i.fromBufferAttribute(a, h);
            s.fromBufferAttribute(a, u);
            if (Ju(i, s, n) === true) {
              t.push(i.x, i.y, i.z);
              t.push(s.x, s.y, s.z);
            }
          }
        }
      }
      this.setAttribute("position", new xe(t, 3));
    }
  }
  copy(e) {
    super.copy(e);
    this.parameters = Object.assign({}, e.parameters);
    return this;
  }
};
function Ju(r, e, t) {
  const n = `${r.x},${r.y},${r.z}-${e.x},${e.y},${e.z}`;
  const i = `${e.x},${e.y},${e.z}-${r.x},${r.y},${r.z}`;
  if (t.has(n) === true || t.has(i) === true) {
    return false;
  } else {
    t.add(n);
    t.add(i);
    return true;
  }
}
var $u = Object.freeze({
  __proto__: null,
  BoxGeometry: Zn,
  CapsuleGeometry: dr,
  CircleGeometry: fr,
  ConeGeometry: pr,
  CylinderGeometry: bi,
  DodecahedronGeometry: mr,
  EdgesGeometry: eo,
  ExtrudeGeometry: vr,
  IcosahedronGeometry: yr,
  LatheGeometry: gs,
  OctahedronGeometry: _s,
  PlaneGeometry: us,
  PolyhedronGeometry: Cn,
  RingGeometry: Mr,
  ShapeGeometry: Sr,
  SphereGeometry: xs,
  TetrahedronGeometry: br,
  TorusGeometry: Er,
  TorusKnotGeometry: Tr,
  TubeGeometry: wr,
  WireframeGeometry: to
});
var no = class extends vt {
  constructor(e) {
    super();
    this.isShadowMaterial = true;
    this.type = "ShadowMaterial";
    this.color = new de(0);
    this.transparent = true;
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.color.copy(e.color);
    this.fog = e.fog;
    return this;
  }
};
var io = class extends Zt {
  constructor(e) {
    super(e);
    this.isRawShaderMaterial = true;
    this.type = "RawShaderMaterial";
  }
};
var Ar = class extends vt {
  constructor(e) {
    super();
    this.isMeshStandardMaterial = true;
    this.defines = { "STANDARD": "" };
    this.type = "MeshStandardMaterial";
    this.color = new de(16777215);
    this.roughness = 1;
    this.metalness = 0;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new de(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = Kn;
    this.normalScale = new $(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.roughnessMap = null;
    this.metalnessMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapIntensity = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.flatShading = false;
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.defines = { "STANDARD": "" };
    this.color.copy(e.color);
    this.roughness = e.roughness;
    this.metalness = e.metalness;
    this.map = e.map;
    this.lightMap = e.lightMap;
    this.lightMapIntensity = e.lightMapIntensity;
    this.aoMap = e.aoMap;
    this.aoMapIntensity = e.aoMapIntensity;
    this.emissive.copy(e.emissive);
    this.emissiveMap = e.emissiveMap;
    this.emissiveIntensity = e.emissiveIntensity;
    this.bumpMap = e.bumpMap;
    this.bumpScale = e.bumpScale;
    this.normalMap = e.normalMap;
    this.normalMapType = e.normalMapType;
    this.normalScale.copy(e.normalScale);
    this.displacementMap = e.displacementMap;
    this.displacementScale = e.displacementScale;
    this.displacementBias = e.displacementBias;
    this.roughnessMap = e.roughnessMap;
    this.metalnessMap = e.metalnessMap;
    this.alphaMap = e.alphaMap;
    this.envMap = e.envMap;
    this.envMapIntensity = e.envMapIntensity;
    this.wireframe = e.wireframe;
    this.wireframeLinewidth = e.wireframeLinewidth;
    this.wireframeLinecap = e.wireframeLinecap;
    this.wireframeLinejoin = e.wireframeLinejoin;
    this.flatShading = e.flatShading;
    this.fog = e.fog;
    return this;
  }
};
var so = class extends Ar {
  constructor(e) {
    super();
    this.isMeshPhysicalMaterial = true;
    this.defines = {
      "STANDARD": "",
      "PHYSICAL": ""
    };
    this.type = "MeshPhysicalMaterial";
    this.clearcoatMap = null;
    this.clearcoatRoughness = 0;
    this.clearcoatRoughnessMap = null;
    this.clearcoatNormalScale = new $(1, 1);
    this.clearcoatNormalMap = null;
    this.ior = 1.5;
    Object.defineProperty(this, "reflectivity", {
      get: function() {
        return st(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(t) {
        this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
      }
    });
    this.iridescenceMap = null;
    this.iridescenceIOR = 1.3;
    this.iridescenceThicknessRange = [100, 400];
    this.iridescenceThicknessMap = null;
    this.sheenColor = new de(0);
    this.sheenColorMap = null;
    this.sheenRoughness = 1;
    this.sheenRoughnessMap = null;
    this.transmissionMap = null;
    this.thickness = 0;
    this.thicknessMap = null;
    this.attenuationDistance = Infinity;
    this.attenuationColor = new de(1, 1, 1);
    this.specularIntensity = 1;
    this.specularIntensityMap = null;
    this.specularColor = new de(1, 1, 1);
    this.specularColorMap = null;
    this._sheen = 0;
    this._clearcoat = 0;
    this._iridescence = 0;
    this._transmission = 0;
    this.setValues(e);
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    if (this._sheen > 0 !== e > 0) {
      this.version++;
    }
    this._sheen = e;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    if (this._clearcoat > 0 !== e > 0) {
      this.version++;
    }
    this._clearcoat = e;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    if (this._iridescence > 0 !== e > 0) {
      this.version++;
    }
    this._iridescence = e;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    if (this._transmission > 0 !== e > 0) {
      this.version++;
    }
    this._transmission = e;
  }
  copy(e) {
    super.copy(e);
    this.defines = {
      "STANDARD": "",
      "PHYSICAL": ""
    };
    this.clearcoat = e.clearcoat;
    this.clearcoatMap = e.clearcoatMap;
    this.clearcoatRoughness = e.clearcoatRoughness;
    this.clearcoatRoughnessMap = e.clearcoatRoughnessMap;
    this.clearcoatNormalMap = e.clearcoatNormalMap;
    this.clearcoatNormalScale.copy(e.clearcoatNormalScale);
    this.ior = e.ior;
    this.iridescence = e.iridescence;
    this.iridescenceMap = e.iridescenceMap;
    this.iridescenceIOR = e.iridescenceIOR;
    this.iridescenceThicknessRange = [...e.iridescenceThicknessRange];
    this.iridescenceThicknessMap = e.iridescenceThicknessMap;
    this.sheen = e.sheen;
    this.sheenColor.copy(e.sheenColor);
    this.sheenColorMap = e.sheenColorMap;
    this.sheenRoughness = e.sheenRoughness;
    this.sheenRoughnessMap = e.sheenRoughnessMap;
    this.transmission = e.transmission;
    this.transmissionMap = e.transmissionMap;
    this.thickness = e.thickness;
    this.thicknessMap = e.thicknessMap;
    this.attenuationDistance = e.attenuationDistance;
    this.attenuationColor.copy(e.attenuationColor);
    this.specularIntensity = e.specularIntensity;
    this.specularIntensityMap = e.specularIntensityMap;
    this.specularColor.copy(e.specularColor);
    this.specularColorMap = e.specularColorMap;
    return this;
  }
};
var ro = class extends vt {
  constructor(e) {
    super();
    this.isMeshPhongMaterial = true;
    this.type = "MeshPhongMaterial";
    this.color = new de(16777215);
    this.specular = new de(1118481);
    this.shininess = 30;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new de(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = Kn;
    this.normalScale = new $(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.combine = Dr;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.flatShading = false;
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.color.copy(e.color);
    this.specular.copy(e.specular);
    this.shininess = e.shininess;
    this.map = e.map;
    this.lightMap = e.lightMap;
    this.lightMapIntensity = e.lightMapIntensity;
    this.aoMap = e.aoMap;
    this.aoMapIntensity = e.aoMapIntensity;
    this.emissive.copy(e.emissive);
    this.emissiveMap = e.emissiveMap;
    this.emissiveIntensity = e.emissiveIntensity;
    this.bumpMap = e.bumpMap;
    this.bumpScale = e.bumpScale;
    this.normalMap = e.normalMap;
    this.normalMapType = e.normalMapType;
    this.normalScale.copy(e.normalScale);
    this.displacementMap = e.displacementMap;
    this.displacementScale = e.displacementScale;
    this.displacementBias = e.displacementBias;
    this.specularMap = e.specularMap;
    this.alphaMap = e.alphaMap;
    this.envMap = e.envMap;
    this.combine = e.combine;
    this.reflectivity = e.reflectivity;
    this.refractionRatio = e.refractionRatio;
    this.wireframe = e.wireframe;
    this.wireframeLinewidth = e.wireframeLinewidth;
    this.wireframeLinecap = e.wireframeLinecap;
    this.wireframeLinejoin = e.wireframeLinejoin;
    this.flatShading = e.flatShading;
    this.fog = e.fog;
    return this;
  }
};
var ao = class extends vt {
  constructor(e) {
    super();
    this.isMeshToonMaterial = true;
    this.defines = { "TOON": "" };
    this.type = "MeshToonMaterial";
    this.color = new de(16777215);
    this.map = null;
    this.gradientMap = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new de(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = Kn;
    this.normalScale = new $(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.color.copy(e.color);
    this.map = e.map;
    this.gradientMap = e.gradientMap;
    this.lightMap = e.lightMap;
    this.lightMapIntensity = e.lightMapIntensity;
    this.aoMap = e.aoMap;
    this.aoMapIntensity = e.aoMapIntensity;
    this.emissive.copy(e.emissive);
    this.emissiveMap = e.emissiveMap;
    this.emissiveIntensity = e.emissiveIntensity;
    this.bumpMap = e.bumpMap;
    this.bumpScale = e.bumpScale;
    this.normalMap = e.normalMap;
    this.normalMapType = e.normalMapType;
    this.normalScale.copy(e.normalScale);
    this.displacementMap = e.displacementMap;
    this.displacementScale = e.displacementScale;
    this.displacementBias = e.displacementBias;
    this.alphaMap = e.alphaMap;
    this.wireframe = e.wireframe;
    this.wireframeLinewidth = e.wireframeLinewidth;
    this.wireframeLinecap = e.wireframeLinecap;
    this.wireframeLinejoin = e.wireframeLinejoin;
    this.fog = e.fog;
    return this;
  }
};
var oo = class extends vt {
  constructor(e) {
    super();
    this.isMeshNormalMaterial = true;
    this.type = "MeshNormalMaterial";
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = Kn;
    this.normalScale = new $(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.flatShading = false;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.bumpMap = e.bumpMap;
    this.bumpScale = e.bumpScale;
    this.normalMap = e.normalMap;
    this.normalMapType = e.normalMapType;
    this.normalScale.copy(e.normalScale);
    this.displacementMap = e.displacementMap;
    this.displacementScale = e.displacementScale;
    this.displacementBias = e.displacementBias;
    this.wireframe = e.wireframe;
    this.wireframeLinewidth = e.wireframeLinewidth;
    this.flatShading = e.flatShading;
    return this;
  }
};
var co = class extends vt {
  constructor(e) {
    super();
    this.isMeshLambertMaterial = true;
    this.type = "MeshLambertMaterial";
    this.color = new de(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new de(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = Kn;
    this.normalScale = new $(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.combine = Dr;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.flatShading = false;
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.color.copy(e.color);
    this.map = e.map;
    this.lightMap = e.lightMap;
    this.lightMapIntensity = e.lightMapIntensity;
    this.aoMap = e.aoMap;
    this.aoMapIntensity = e.aoMapIntensity;
    this.emissive.copy(e.emissive);
    this.emissiveMap = e.emissiveMap;
    this.emissiveIntensity = e.emissiveIntensity;
    this.bumpMap = e.bumpMap;
    this.bumpScale = e.bumpScale;
    this.normalMap = e.normalMap;
    this.normalMapType = e.normalMapType;
    this.normalScale.copy(e.normalScale);
    this.displacementMap = e.displacementMap;
    this.displacementScale = e.displacementScale;
    this.displacementBias = e.displacementBias;
    this.specularMap = e.specularMap;
    this.alphaMap = e.alphaMap;
    this.envMap = e.envMap;
    this.combine = e.combine;
    this.reflectivity = e.reflectivity;
    this.refractionRatio = e.refractionRatio;
    this.wireframe = e.wireframe;
    this.wireframeLinewidth = e.wireframeLinewidth;
    this.wireframeLinecap = e.wireframeLinecap;
    this.wireframeLinejoin = e.wireframeLinejoin;
    this.flatShading = e.flatShading;
    this.fog = e.fog;
    return this;
  }
};
var lo = class extends vt {
  constructor(e) {
    super();
    this.isMeshMatcapMaterial = true;
    this.defines = { "MATCAP": "" };
    this.type = "MeshMatcapMaterial";
    this.color = new de(16777215);
    this.matcap = null;
    this.map = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = Kn;
    this.normalScale = new $(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.flatShading = false;
    this.fog = true;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.defines = { "MATCAP": "" };
    this.color.copy(e.color);
    this.matcap = e.matcap;
    this.map = e.map;
    this.bumpMap = e.bumpMap;
    this.bumpScale = e.bumpScale;
    this.normalMap = e.normalMap;
    this.normalMapType = e.normalMapType;
    this.normalScale.copy(e.normalScale);
    this.displacementMap = e.displacementMap;
    this.displacementScale = e.displacementScale;
    this.displacementBias = e.displacementBias;
    this.alphaMap = e.alphaMap;
    this.flatShading = e.flatShading;
    this.fog = e.fog;
    return this;
  }
};
var ho = class extends yt {
  constructor(e) {
    super();
    this.isLineDashedMaterial = true;
    this.type = "LineDashedMaterial";
    this.scale = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.setValues(e);
  }
  copy(e) {
    super.copy(e);
    this.scale = e.scale;
    this.dashSize = e.dashSize;
    this.gapSize = e.gapSize;
    return this;
  }
};
function Xt(r, e, t) {
  if (Bh(r)) {
    return new r.constructor(r.subarray(e, t !== void 0 ? t : r.length));
  }
  return r.slice(e, t);
}
function pi(r, e, t) {
  if (!r || // let 'undefined' and 'null' pass
  !t && r.constructor === e)
    return r;
  if (typeof e.BYTES_PER_ELEMENT === "number") {
    return new e(r);
  }
  return Array.prototype.slice.call(r);
}
function Bh(r) {
  return ArrayBuffer.isView(r) && !(r instanceof DataView);
}
function Pf(r) {
  function e(i, s) {
    return r[i] - r[s];
  }
  const t = r.length;
  const n = new Array(t);
  for (let i = 0; i !== t; ++i)
    n[i] = i;
  n.sort(e);
  return n;
}
function ml(r, e, t) {
  const n = r.length;
  const i = new r.constructor(n);
  for (let s = 0, a = 0; a !== n; ++s) {
    const o = t[s] * e;
    for (let c = 0; c !== e; ++c) {
      i[a++] = r[o + c];
    }
  }
  return i;
}
function zh(r, e, t, n) {
  let i = 1, s = r[0];
  while (s !== void 0 && s[n] === void 0) {
    s = r[i++];
  }
  if (s === void 0)
    return;
  let a = s[n];
  if (a === void 0)
    return;
  if (Array.isArray(a)) {
    do {
      a = s[n];
      if (a !== void 0) {
        e.push(s.time);
        t.push.apply(t, a);
      }
      s = r[i++];
    } while (s !== void 0);
  } else if (a.toArray !== void 0) {
    do {
      a = s[n];
      if (a !== void 0) {
        e.push(s.time);
        a.toArray(t, t.length);
      }
      s = r[i++];
    } while (s !== void 0);
  } else {
    do {
      a = s[n];
      if (a !== void 0) {
        e.push(s.time);
        t.push(a);
      }
      s = r[i++];
    } while (s !== void 0);
  }
}
function jx(r, e, t, n, i = 30) {
  const s = r.clone();
  s.name = e;
  const a = [];
  for (let c = 0; c < s.tracks.length; ++c) {
    const l = s.tracks[c];
    const h = l.getValueSize();
    const u = [];
    const d = [];
    for (let f = 0; f < l.times.length; ++f) {
      const m = l.times[f] * i;
      if (m < t || m >= n)
        continue;
      u.push(l.times[f]);
      for (let _ = 0; _ < h; ++_) {
        d.push(l.values[f * h + _]);
      }
    }
    if (u.length === 0)
      continue;
    l.times = pi(u, l.times.constructor);
    l.values = pi(d, l.values.constructor);
    a.push(l);
  }
  s.tracks = a;
  let o = Infinity;
  for (let c = 0; c < s.tracks.length; ++c) {
    if (o > s.tracks[c].times[0]) {
      o = s.tracks[c].times[0];
    }
  }
  for (let c = 0; c < s.tracks.length; ++c) {
    s.tracks[c].shift(-1 * o);
  }
  s.resetDuration();
  return s;
}
function Qx(r, e = 0, t = r, n = 30) {
  if (n <= 0)
    n = 30;
  const i = t.tracks.length;
  const s = e / n;
  for (let a = 0; a < i; ++a) {
    const o = t.tracks[a];
    const c = o.ValueTypeName;
    if (c === "bool" || c === "string")
      continue;
    const l = r.tracks.find(function(p) {
      return p.name === o.name && p.ValueTypeName === c;
    });
    if (l === void 0)
      continue;
    let h = 0;
    const u = o.getValueSize();
    if (o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
      h = u / 3;
    }
    let d = 0;
    const f = l.getValueSize();
    if (l.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
      d = f / 3;
    }
    const m = o.times.length - 1;
    let _;
    if (s <= o.times[0]) {
      const p = h;
      const v = u - h;
      _ = Xt(o.values, p, v);
    } else if (s >= o.times[m]) {
      const p = m * u + h;
      const v = p + u - h;
      _ = Xt(o.values, p, v);
    } else {
      const p = o.createInterpolant();
      const v = h;
      const x = u - h;
      p.evaluate(s);
      _ = Xt(p.resultBuffer, v, x);
    }
    if (c === "quaternion") {
      const p = new Tt().fromArray(_).normalize().conjugate();
      p.toArray(_);
    }
    const g = l.times.length;
    for (let p = 0; p < g; ++p) {
      const v = p * f + d;
      if (c === "quaternion") {
        Tt.multiplyQuaternionsFlat(
          l.values,
          v,
          _,
          0,
          l.values,
          v
        );
      } else {
        const x = f - d * 2;
        for (let M = 0; M < x; ++M) {
          l.values[v + M] -= _[M];
        }
      }
    }
  }
  r.blendMode = Lh;
  return r;
}
var ev = {
  arraySlice: Xt,
  convertArray: pi,
  isTypedArray: Bh,
  getKeyframeOrder: Pf,
  sortedArray: ml,
  flattenJSON: zh,
  subclip: jx,
  makeClipAdditive: Qx
};
var Ti = class {
  constructor(e, t, n, i) {
    this.parameterPositions = e;
    this._cachedIndex = 0;
    this.resultBuffer = i !== void 0 ? i : new t.constructor(n);
    this.sampleValues = t;
    this.valueSize = n;
    this.settings = null;
    this.DefaultSettings_ = {};
  }
  evaluate(e) {
    const t = this.parameterPositions;
    let n = this._cachedIndex, i = t[n], s = t[n - 1];
    e: {
      t: {
        let a;
        n: {
          i:
            if (!(e < i)) {
              for (let o = n + 2; ; ) {
                if (i === void 0) {
                  if (e < s)
                    break i;
                  n = t.length;
                  this._cachedIndex = n;
                  return this.copySampleValue_(n - 1);
                }
                if (n === o)
                  break;
                s = i;
                i = t[++n];
                if (e < i) {
                  break t;
                }
              }
              a = t.length;
              break n;
            }
          if (!(e >= s)) {
            const o = t[1];
            if (e < o) {
              n = 2;
              s = o;
            }
            for (let c = n - 2; ; ) {
              if (s === void 0) {
                this._cachedIndex = 0;
                return this.copySampleValue_(0);
              }
              if (n === c)
                break;
              i = s;
              s = t[--n - 1];
              if (e >= s) {
                break t;
              }
            }
            a = n;
            n = 0;
            break n;
          }
          break e;
        }
        while (n < a) {
          const o = n + a >>> 1;
          if (e < t[o]) {
            a = o;
          } else {
            n = o + 1;
          }
        }
        i = t[n];
        s = t[n - 1];
        if (s === void 0) {
          this._cachedIndex = 0;
          return this.copySampleValue_(0);
        }
        if (i === void 0) {
          n = t.length;
          this._cachedIndex = n;
          return this.copySampleValue_(n - 1);
        }
      }
      this._cachedIndex = n;
      this.intervalChanged_(n, s, i);
    }
    return this.interpolate_(n, s, e, i);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(e) {
    const t = this.resultBuffer, n = this.sampleValues, i = this.valueSize, s = e * i;
    for (let a = 0; a !== i; ++a) {
      t[a] = n[s + a];
    }
    return t;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
};
var uo = class extends Ti {
  constructor(e, t, n, i) {
    super(e, t, n, i);
    this._weightPrev = -0;
    this._offsetPrev = -0;
    this._weightNext = -0;
    this._offsetNext = -0;
    this.DefaultSettings_ = {
      endingStart: di,
      endingEnd: di
    };
  }
  intervalChanged_(e, t, n) {
    const i = this.parameterPositions;
    let s = e - 2, a = e + 1, o = i[s], c = i[a];
    if (o === void 0) {
      switch (this.getSettings_().endingStart) {
        case fi:
          s = e;
          o = 2 * t - n;
          break;
        case Ys:
          s = i.length - 2;
          o = t + i[s] - i[s + 1];
          break;
        default:
          s = e;
          o = n;
      }
    }
    if (c === void 0) {
      switch (this.getSettings_().endingEnd) {
        case fi:
          a = e;
          c = 2 * n - t;
          break;
        case Ys:
          a = 1;
          c = n + i[1] - i[0];
          break;
        default:
          a = e - 1;
          c = t;
      }
    }
    const l = (n - t) * 0.5, h = this.valueSize;
    this._weightPrev = l / (t - o);
    this._weightNext = l / (c - n);
    this._offsetPrev = s * h;
    this._offsetNext = a * h;
  }
  interpolate_(e, t, n, i) {
    const s = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = e * o, l = c - o, h = this._offsetPrev, u = this._offsetNext, d = this._weightPrev, f = this._weightNext, m = (n - t) / (i - t), _ = m * m, g = _ * m;
    const p = -d * g + 2 * d * _ - d * m;
    const v = (1 + d) * g + (-1.5 - 2 * d) * _ + (-0.5 + d) * m + 1;
    const x = (-1 - f) * g + (1.5 + f) * _ + 0.5 * m;
    const M = f * g - f * _;
    for (let S = 0; S !== o; ++S) {
      s[S] = p * a[h + S] + v * a[l + S] + x * a[c + S] + M * a[u + S];
    }
    return s;
  }
};
var Rr = class extends Ti {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e, t, n, i) {
    const s = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = e * o, l = c - o, h = (n - t) / (i - t), u = 1 - h;
    for (let d = 0; d !== o; ++d) {
      s[d] = a[l + d] * u + a[c + d] * h;
    }
    return s;
  }
};
var fo = class extends Ti {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
};
var Vt = class {
  constructor(e, t, n, i) {
    if (e === void 0)
      throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0)
      throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e;
    this.times = pi(t, this.TimeBufferType);
    this.values = pi(n, this.ValueBufferType);
    this.setInterpolation(i || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(e) {
    const t = e.constructor;
    let n;
    if (t.toJSON !== this.toJSON) {
      n = t.toJSON(e);
    } else {
      n = {
        "name": e.name,
        "times": pi(e.times, Array),
        "values": pi(e.values, Array)
      };
      const i = e.getInterpolation();
      if (i !== e.DefaultInterpolation) {
        n.interpolation = i;
      }
    }
    n.type = e.ValueTypeName;
    return n;
  }
  InterpolantFactoryMethodDiscrete(e) {
    return new fo(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodLinear(e) {
    return new Rr(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodSmooth(e) {
    return new uo(this.times, this.values, this.getValueSize(), e);
  }
  setInterpolation(e) {
    let t;
    switch (e) {
      case Xs:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case qs:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case Ra:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0) {
        if (e !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw new Error(n);
        }
      }
      console.warn("THREE.KeyframeTrack:", n);
      return this;
    }
    this.createInterpolant = t;
    return this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return Xs;
      case this.InterpolantFactoryMethodLinear:
        return qs;
      case this.InterpolantFactoryMethodSmooth:
        return Ra;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let n = 0, i = t.length; n !== i; ++n) {
        t[n] += e;
      }
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let n = 0, i = t.length; n !== i; ++n) {
        t[n] *= e;
      }
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(e, t) {
    const n = this.times, i = n.length;
    let s = 0, a = i - 1;
    while (s !== i && n[s] < e) {
      ++s;
    }
    while (a !== -1 && n[a] > t) {
      --a;
    }
    ++a;
    if (s !== 0 || a !== i) {
      if (s >= a) {
        a = Math.max(a, 1);
        s = a - 1;
      }
      const o = this.getValueSize();
      this.times = Xt(n, s, a);
      this.values = Xt(this.values, s * o, a * o);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let e = true;
    const t = this.getValueSize();
    if (t - Math.floor(t) !== 0) {
      console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
      e = false;
    }
    const n = this.times, i = this.values, s = n.length;
    if (s === 0) {
      console.error("THREE.KeyframeTrack: Track is empty.", this);
      e = false;
    }
    let a = null;
    for (let o = 0; o !== s; o++) {
      const c = n[o];
      if (typeof c === "number" && isNaN(c)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, o, c);
        e = false;
        break;
      }
      if (a !== null && a > c) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, o, c, a);
        e = false;
        break;
      }
      a = c;
    }
    if (i !== void 0) {
      if (Bh(i)) {
        for (let o = 0, c = i.length; o !== c; ++o) {
          const l = i[o];
          if (isNaN(l)) {
            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, o, l);
            e = false;
            break;
          }
        }
      }
    }
    return e;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const e = Xt(this.times), t = Xt(this.values), n = this.getValueSize(), i = this.getInterpolation() === Ra, s = e.length - 1;
    let a = 1;
    for (let o = 1; o < s; ++o) {
      let c = false;
      const l = e[o];
      const h = e[o + 1];
      if (l !== h && (o !== 1 || l !== e[0])) {
        if (!i) {
          const u = o * n, d = u - n, f = u + n;
          for (let m = 0; m !== n; ++m) {
            const _ = t[u + m];
            if (_ !== t[d + m] || _ !== t[f + m]) {
              c = true;
              break;
            }
          }
        } else {
          c = true;
        }
      }
      if (c) {
        if (o !== a) {
          e[a] = e[o];
          const u = o * n, d = a * n;
          for (let f = 0; f !== n; ++f) {
            t[d + f] = t[u + f];
          }
        }
        ++a;
      }
    }
    if (s > 0) {
      e[a] = e[s];
      for (let o = s * n, c = a * n, l = 0; l !== n; ++l) {
        t[c + l] = t[o + l];
      }
      ++a;
    }
    if (a !== e.length) {
      this.times = Xt(e, 0, a);
      this.values = Xt(t, 0, a * n);
    } else {
      this.times = e;
      this.values = t;
    }
    return this;
  }
  clone() {
    const e = Xt(this.times, 0);
    const t = Xt(this.values, 0);
    const n = this.constructor;
    const i = new n(this.name, e, t);
    i.createInterpolant = this.createInterpolant;
    return i;
  }
};
Vt.prototype.TimeBufferType = Float32Array;
Vt.prototype.ValueBufferType = Float32Array;
Vt.prototype.DefaultInterpolation = qs;
var Pn = class extends Vt {
};
Pn.prototype.ValueTypeName = "bool";
Pn.prototype.ValueBufferType = Array;
Pn.prototype.DefaultInterpolation = Xs;
Pn.prototype.InterpolantFactoryMethodLinear = void 0;
Pn.prototype.InterpolantFactoryMethodSmooth = void 0;
var Cr = class extends Vt {
};
Cr.prototype.ValueTypeName = "color";
var wi = class extends Vt {
};
wi.prototype.ValueTypeName = "number";
var po = class extends Ti {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e, t, n, i) {
    const s = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = (n - t) / (i - t);
    let l = e * o;
    for (let h = l + o; l !== h; l += 4) {
      Tt.slerpFlat(s, 0, a, l - o, a, l, c);
    }
    return s;
  }
};
var $n = class extends Vt {
  InterpolantFactoryMethodLinear(e) {
    return new po(this.times, this.values, this.getValueSize(), e);
  }
};
$n.prototype.ValueTypeName = "quaternion";
$n.prototype.DefaultInterpolation = qs;
$n.prototype.InterpolantFactoryMethodSmooth = void 0;
var Ln = class extends Vt {
};
Ln.prototype.ValueTypeName = "string";
Ln.prototype.ValueBufferType = Array;
Ln.prototype.DefaultInterpolation = Xs;
Ln.prototype.InterpolantFactoryMethodLinear = void 0;
Ln.prototype.InterpolantFactoryMethodSmooth = void 0;
var Ai = class extends Vt {
};
Ai.prototype.ValueTypeName = "vector";
var Ri = class {
  constructor(e, t = -1, n, i = Lo) {
    this.name = e;
    this.tracks = n;
    this.duration = t;
    this.blendMode = i;
    this.uuid = Bt();
    if (this.duration < 0) {
      this.resetDuration();
    }
  }
  static parse(e) {
    const t = [], n = e.tracks, i = 1 / (e.fps || 1);
    for (let a = 0, o = n.length; a !== o; ++a) {
      t.push(nv(n[a]).scale(i));
    }
    const s = new this(e.name, e.duration, t, e.blendMode);
    s.uuid = e.uuid;
    return s;
  }
  static toJSON(e) {
    const t = [], n = e.tracks;
    const i = {
      "name": e.name,
      "duration": e.duration,
      "tracks": t,
      "uuid": e.uuid,
      "blendMode": e.blendMode
    };
    for (let s = 0, a = n.length; s !== a; ++s) {
      t.push(Vt.toJSON(n[s]));
    }
    return i;
  }
  static CreateFromMorphTargetSequence(e, t, n, i) {
    const s = t.length;
    const a = [];
    for (let o = 0; o < s; o++) {
      let c = [];
      let l = [];
      c.push(
        (o + s - 1) % s,
        o,
        (o + 1) % s
      );
      l.push(0, 1, 0);
      const h = Pf(c);
      c = ml(c, 1, h);
      l = ml(l, 1, h);
      if (!i && c[0] === 0) {
        c.push(s);
        l.push(l[0]);
      }
      a.push(
        new wi(
          ".morphTargetInfluences[" + t[o].name + "]",
          c,
          l
        ).scale(1 / n)
      );
    }
    return new this(e, -1, a);
  }
  static findByName(e, t) {
    let n = e;
    if (!Array.isArray(e)) {
      const i = e;
      n = i.geometry && i.geometry.animations || i.animations;
    }
    for (let i = 0; i < n.length; i++) {
      if (n[i].name === t) {
        return n[i];
      }
    }
    return null;
  }
  static CreateClipsFromMorphTargetSequences(e, t, n) {
    const i = {};
    const s = /^([\w-]*?)([\d]+)$/;
    for (let o = 0, c = e.length; o < c; o++) {
      const l = e[o];
      const h = l.name.match(s);
      if (h && h.length > 1) {
        const u = h[1];
        let d = i[u];
        if (!d) {
          i[u] = d = [];
        }
        d.push(l);
      }
    }
    const a = [];
    for (const o in i) {
      a.push(this.CreateFromMorphTargetSequence(o, i[o], t, n));
    }
    return a;
  }
  // parse the animation.hierarchy format
  static parseAnimation(e, t) {
    if (!e) {
      console.error("THREE.AnimationClip: No animation in JSONLoader data.");
      return null;
    }
    const n = function(u, d, f, m, _) {
      if (f.length !== 0) {
        const g = [];
        const p = [];
        zh(f, g, p, m);
        if (g.length !== 0) {
          _.push(new u(d, g, p));
        }
      }
    };
    const i = [];
    const s = e.name || "default";
    const a = e.fps || 30;
    const o = e.blendMode;
    let c = e.length || -1;
    const l = e.hierarchy || [];
    for (let u = 0; u < l.length; u++) {
      const d = l[u].keys;
      if (!d || d.length === 0)
        continue;
      if (d[0].morphTargets) {
        const f = {};
        let m;
        for (m = 0; m < d.length; m++) {
          if (d[m].morphTargets) {
            for (let _ = 0; _ < d[m].morphTargets.length; _++) {
              f[d[m].morphTargets[_]] = -1;
            }
          }
        }
        for (const _ in f) {
          const g = [];
          const p = [];
          for (let v = 0; v !== d[m].morphTargets.length; ++v) {
            const x = d[m];
            g.push(x.time);
            p.push(x.morphTarget === _ ? 1 : 0);
          }
          i.push(new wi(".morphTargetInfluence[" + _ + "]", g, p));
        }
        c = f.length * a;
      } else {
        const f = ".bones[" + t[u].name + "]";
        n(
          Ai,
          f + ".position",
          d,
          "pos",
          i
        );
        n(
          $n,
          f + ".quaternion",
          d,
          "rot",
          i
        );
        n(
          Ai,
          f + ".scale",
          d,
          "scl",
          i
        );
      }
    }
    if (i.length === 0) {
      return null;
    }
    const h = new this(s, c, i, o);
    return h;
  }
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let n = 0, i = e.length; n !== i; ++n) {
      const s = this.tracks[n];
      t = Math.max(t, s.times[s.times.length - 1]);
    }
    this.duration = t;
    return this;
  }
  trim() {
    for (let e = 0; e < this.tracks.length; e++) {
      this.tracks[e].trim(0, this.duration);
    }
    return this;
  }
  validate() {
    let e = true;
    for (let t = 0; t < this.tracks.length; t++) {
      e = e && this.tracks[t].validate();
    }
    return e;
  }
  optimize() {
    for (let e = 0; e < this.tracks.length; e++) {
      this.tracks[e].optimize();
    }
    return this;
  }
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++) {
      e.push(this.tracks[t].clone());
    }
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
};
function tv(r) {
  switch (r.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return wi;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return Ai;
    case "color":
      return Cr;
    case "quaternion":
      return $n;
    case "bool":
    case "boolean":
      return Pn;
    case "string":
      return Ln;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + r);
}
function nv(r) {
  if (r.type === void 0) {
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  }
  const e = tv(r.type);
  if (r.times === void 0) {
    const t = [], n = [];
    zh(r.keys, t, n, "value");
    r.times = t;
    r.values = n;
  }
  if (e.parse !== void 0) {
    return e.parse(r);
  } else {
    return new e(r.name, r.times, r.values, r.interpolation);
  }
}
var Ci = {
  enabled: false,
  files: {},
  add: function(r, e) {
    if (this.enabled === false)
      return;
    this.files[r] = e;
  },
  get: function(r) {
    if (this.enabled === false)
      return;
    return this.files[r];
  },
  remove: function(r) {
    delete this.files[r];
  },
  clear: function() {
    this.files = {};
  }
};
var Pr = class {
  constructor(e, t, n) {
    const i = this;
    let s = false;
    let a = 0;
    let o = 0;
    let c = void 0;
    const l = [];
    this.onStart = void 0;
    this.onLoad = e;
    this.onProgress = t;
    this.onError = n;
    this.itemStart = function(h) {
      o++;
      if (s === false) {
        if (i.onStart !== void 0) {
          i.onStart(h, a, o);
        }
      }
      s = true;
    };
    this.itemEnd = function(h) {
      a++;
      if (i.onProgress !== void 0) {
        i.onProgress(h, a, o);
      }
      if (a === o) {
        s = false;
        if (i.onLoad !== void 0) {
          i.onLoad();
        }
      }
    };
    this.itemError = function(h) {
      if (i.onError !== void 0) {
        i.onError(h);
      }
    };
    this.resolveURL = function(h) {
      if (c) {
        return c(h);
      }
      return h;
    };
    this.setURLModifier = function(h) {
      c = h;
      return this;
    };
    this.addHandler = function(h, u) {
      l.push(h, u);
      return this;
    };
    this.removeHandler = function(h) {
      const u = l.indexOf(h);
      if (u !== -1) {
        l.splice(u, 2);
      }
      return this;
    };
    this.getHandler = function(h) {
      for (let u = 0, d = l.length; u < d; u += 2) {
        const f = l[u];
        const m = l[u + 1];
        if (f.global)
          f.lastIndex = 0;
        if (f.test(h)) {
          return m;
        }
      }
      return null;
    };
  }
};
var Lf = new Pr();
var Lt = class {
  constructor(e) {
    this.manager = e !== void 0 ? e : Lf;
    this.crossOrigin = "anonymous";
    this.withCredentials = false;
    this.path = "";
    this.resourcePath = "";
    this.requestHeader = {};
  }
  load() {
  }
  loadAsync(e, t) {
    const n = this;
    return new Promise(function(i, s) {
      n.load(e, i, t, s);
    });
  }
  parse() {
  }
  setCrossOrigin(e) {
    this.crossOrigin = e;
    return this;
  }
  setWithCredentials(e) {
    this.withCredentials = e;
    return this;
  }
  setPath(e) {
    this.path = e;
    return this;
  }
  setResourcePath(e) {
    this.resourcePath = e;
    return this;
  }
  setRequestHeader(e) {
    this.requestHeader = e;
    return this;
  }
};
var Mn = {};
var gl = class extends Error {
  constructor(e, t) {
    super(e);
    this.response = t;
  }
};
var sn = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    if (e === void 0)
      e = "";
    if (this.path !== void 0)
      e = this.path + e;
    e = this.manager.resolveURL(e);
    const s = Ci.get(e);
    if (s !== void 0) {
      this.manager.itemStart(e);
      setTimeout(() => {
        if (t)
          t(s);
        this.manager.itemEnd(e);
      }, 0);
      return s;
    }
    if (Mn[e] !== void 0) {
      Mn[e].push({
        onLoad: t,
        onProgress: n,
        onError: i
      });
      return;
    }
    Mn[e] = [];
    Mn[e].push({
      onLoad: t,
      onProgress: n,
      onError: i
    });
    const a = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    });
    const o = this.mimeType;
    const c = this.responseType;
    fetch(a).then((l) => {
      if (l.status === 200 || l.status === 0) {
        if (l.status === 0) {
          console.warn("THREE.FileLoader: HTTP Status 0 received.");
        }
        if (typeof ReadableStream === "undefined" || l.body === void 0 || l.body.getReader === void 0) {
          return l;
        }
        const h = Mn[e];
        const u = l.body.getReader();
        const d = l.headers.get("Content-Length") || l.headers.get("X-File-Size");
        const f = d ? parseInt(d) : 0;
        const m = f !== 0;
        let _ = 0;
        const g = new ReadableStream({
          start(p) {
            v();
            function v() {
              u.read().then(({ done: x, value: M }) => {
                if (x) {
                  p.close();
                } else {
                  _ += M.byteLength;
                  const S = new ProgressEvent("progress", { lengthComputable: m, loaded: _, total: f });
                  for (let E = 0, C = h.length; E < C; E++) {
                    const P = h[E];
                    if (P.onProgress)
                      P.onProgress(S);
                  }
                  p.enqueue(M);
                  v();
                }
              });
            }
          }
        });
        return new Response(g);
      } else {
        throw new gl(`fetch for "${l.url}" responded with ${l.status}: ${l.statusText}`, l);
      }
    }).then((l) => {
      switch (c) {
        case "arraybuffer":
          return l.arrayBuffer();
        case "blob":
          return l.blob();
        case "document":
          return l.text().then((h) => {
            const u = new DOMParser();
            return u.parseFromString(h, o);
          });
        case "json":
          return l.json();
        default:
          if (o === void 0) {
            return l.text();
          } else {
            const h = /charset="?([^;"\s]*)"?/i;
            const u = h.exec(o);
            const d = u && u[1] ? u[1].toLowerCase() : void 0;
            const f = new TextDecoder(d);
            return l.arrayBuffer().then((m) => f.decode(m));
          }
      }
    }).then((l) => {
      Ci.add(e, l);
      const h = Mn[e];
      delete Mn[e];
      for (let u = 0, d = h.length; u < d; u++) {
        const f = h[u];
        if (f.onLoad)
          f.onLoad(l);
      }
    }).catch((l) => {
      const h = Mn[e];
      if (h === void 0) {
        this.manager.itemError(e);
        throw l;
      }
      delete Mn[e];
      for (let u = 0, d = h.length; u < d; u++) {
        const f = h[u];
        if (f.onError)
          f.onError(l);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    });
    this.manager.itemStart(e);
  }
  setResponseType(e) {
    this.responseType = e;
    return this;
  }
  setMimeType(e) {
    this.mimeType = e;
    return this;
  }
};
var _l = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this;
    const a = new sn(this.manager);
    a.setPath(this.path);
    a.setRequestHeader(this.requestHeader);
    a.setWithCredentials(this.withCredentials);
    a.load(e, function(o) {
      try {
        t(s.parse(JSON.parse(o)));
      } catch (c) {
        if (i) {
          i(c);
        } else {
          console.error(c);
        }
        s.manager.itemError(e);
      }
    }, n, i);
  }
  parse(e) {
    const t = [];
    for (let n = 0; n < e.length; n++) {
      const i = Ri.parse(e[n]);
      t.push(i);
    }
    return t;
  }
};
var xl = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this;
    const a = [];
    const o = new or();
    const c = new sn(this.manager);
    c.setPath(this.path);
    c.setResponseType("arraybuffer");
    c.setRequestHeader(this.requestHeader);
    c.setWithCredentials(s.withCredentials);
    let l = 0;
    function h(u) {
      c.load(e[u], function(d) {
        const f = s.parse(d, true);
        a[u] = {
          width: f.width,
          height: f.height,
          format: f.format,
          mipmaps: f.mipmaps
        };
        l += 1;
        if (l === 6) {
          if (f.mipmapCount === 1)
            o.minFilter = lt;
          o.image = a;
          o.format = f.format;
          o.needsUpdate = true;
          if (t)
            t(o);
        }
      }, n, i);
    }
    if (Array.isArray(e)) {
      for (let u = 0, d = e.length; u < d; ++u) {
        h(u);
      }
    } else {
      c.load(e, function(u) {
        const d = s.parse(u, true);
        if (d.isCubemap) {
          const f = d.mipmaps.length / d.mipmapCount;
          for (let m = 0; m < f; m++) {
            a[m] = { mipmaps: [] };
            for (let _ = 0; _ < d.mipmapCount; _++) {
              a[m].mipmaps.push(d.mipmaps[m * d.mipmapCount + _]);
              a[m].format = d.format;
              a[m].width = d.width;
              a[m].height = d.height;
            }
          }
          o.image = a;
        } else {
          o.image.width = d.width;
          o.image.height = d.height;
          o.mipmaps = d.mipmaps;
        }
        if (d.mipmapCount === 1) {
          o.minFilter = lt;
        }
        o.format = d.format;
        o.needsUpdate = true;
        if (t)
          t(o);
      }, n, i);
    }
    return o;
  }
};
var Pi = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    if (this.path !== void 0)
      e = this.path + e;
    e = this.manager.resolveURL(e);
    const s = this;
    const a = Ci.get(e);
    if (a !== void 0) {
      s.manager.itemStart(e);
      setTimeout(function() {
        if (t)
          t(a);
        s.manager.itemEnd(e);
      }, 0);
      return a;
    }
    const o = Js("img");
    function c() {
      h();
      Ci.add(e, this);
      if (t)
        t(this);
      s.manager.itemEnd(e);
    }
    function l(u) {
      h();
      if (i)
        i(u);
      s.manager.itemError(e);
      s.manager.itemEnd(e);
    }
    function h() {
      o.removeEventListener("load", c, false);
      o.removeEventListener("error", l, false);
    }
    o.addEventListener("load", c, false);
    o.addEventListener("error", l, false);
    if (e.slice(0, 5) !== "data:") {
      if (this.crossOrigin !== void 0)
        o.crossOrigin = this.crossOrigin;
    }
    s.manager.itemStart(e);
    o.src = e;
    return o;
  }
};
var vl = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = new yi();
    const a = new Pi(this.manager);
    a.setCrossOrigin(this.crossOrigin);
    a.setPath(this.path);
    let o = 0;
    function c(l) {
      a.load(e[l], function(h) {
        s.images[l] = h;
        o++;
        if (o === 6) {
          s.needsUpdate = true;
          if (t)
            t(s);
        }
      }, void 0, i);
    }
    for (let l = 0; l < e.length; ++l) {
      c(l);
    }
    return s;
  }
};
var yl = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this;
    const a = new Gn();
    const o = new sn(this.manager);
    o.setResponseType("arraybuffer");
    o.setRequestHeader(this.requestHeader);
    o.setPath(this.path);
    o.setWithCredentials(s.withCredentials);
    o.load(e, function(c) {
      const l = s.parse(c);
      if (!l)
        return;
      if (l.image !== void 0) {
        a.image = l.image;
      } else if (l.data !== void 0) {
        a.image.width = l.width;
        a.image.height = l.height;
        a.image.data = l.data;
      }
      a.wrapS = l.wrapS !== void 0 ? l.wrapS : Et;
      a.wrapT = l.wrapT !== void 0 ? l.wrapT : Et;
      a.magFilter = l.magFilter !== void 0 ? l.magFilter : lt;
      a.minFilter = l.minFilter !== void 0 ? l.minFilter : lt;
      a.anisotropy = l.anisotropy !== void 0 ? l.anisotropy : 1;
      if (l.colorSpace !== void 0) {
        a.colorSpace = l.colorSpace;
      } else if (l.encoding !== void 0) {
        a.encoding = l.encoding;
      }
      if (l.flipY !== void 0) {
        a.flipY = l.flipY;
      }
      if (l.format !== void 0) {
        a.format = l.format;
      }
      if (l.type !== void 0) {
        a.type = l.type;
      }
      if (l.mipmaps !== void 0) {
        a.mipmaps = l.mipmaps;
        a.minFilter = qn;
      }
      if (l.mipmapCount === 1) {
        a.minFilter = lt;
      }
      if (l.generateMipmaps !== void 0) {
        a.generateMipmaps = l.generateMipmaps;
      }
      a.needsUpdate = true;
      if (t)
        t(a, l);
    }, n, i);
    return a;
  }
};
var Ml = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = new pt();
    const a = new Pi(this.manager);
    a.setCrossOrigin(this.crossOrigin);
    a.setPath(this.path);
    a.load(e, function(o) {
      s.image = o;
      s.needsUpdate = true;
      if (t !== void 0) {
        t(s);
      }
    }, n, i);
    return s;
  }
};
var pn = class extends Ze {
  constructor(e, t = 1) {
    super();
    this.isLight = true;
    this.type = "Light";
    this.color = new de(e);
    this.intensity = t;
  }
  dispose() {
  }
  copy(e, t) {
    super.copy(e, t);
    this.color.copy(e.color);
    this.intensity = e.intensity;
    return this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.object.color = this.color.getHex();
    t.object.intensity = this.intensity;
    if (this.groundColor !== void 0)
      t.object.groundColor = this.groundColor.getHex();
    if (this.distance !== void 0)
      t.object.distance = this.distance;
    if (this.angle !== void 0)
      t.object.angle = this.angle;
    if (this.decay !== void 0)
      t.object.decay = this.decay;
    if (this.penumbra !== void 0)
      t.object.penumbra = this.penumbra;
    if (this.shadow !== void 0)
      t.object.shadow = this.shadow.toJSON();
    return t;
  }
};
var mo = class extends pn {
  constructor(e, t, n) {
    super(e, n);
    this.isHemisphereLight = true;
    this.type = "HemisphereLight";
    this.position.copy(Ze.DEFAULT_UP);
    this.updateMatrix();
    this.groundColor = new de(t);
  }
  copy(e, t) {
    super.copy(e, t);
    this.groundColor.copy(e.groundColor);
    return this;
  }
};
var hc = new Ne();
var Ku = new w();
var ju = new w();
var Lr = class {
  constructor(e) {
    this.camera = e;
    this.bias = 0;
    this.normalBias = 0;
    this.radius = 1;
    this.blurSamples = 8;
    this.mapSize = new $(512, 512);
    this.map = null;
    this.mapPass = null;
    this.matrix = new Ne();
    this.autoUpdate = true;
    this.needsUpdate = false;
    this._frustum = new hs();
    this._frameExtents = new $(1, 1);
    this._viewportCount = 1;
    this._viewports = [
      new $e(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera;
    const n = this.matrix;
    Ku.setFromMatrixPosition(e.matrixWorld);
    t.position.copy(Ku);
    ju.setFromMatrixPosition(e.target.matrixWorld);
    t.lookAt(ju);
    t.updateMatrixWorld();
    hc.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(hc);
    n.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    );
    n.multiply(hc);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    if (this.map) {
      this.map.dispose();
    }
    if (this.mapPass) {
      this.mapPass.dispose();
    }
  }
  copy(e) {
    this.camera = e.camera.clone();
    this.bias = e.bias;
    this.radius = e.radius;
    this.mapSize.copy(e.mapSize);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    if (this.bias !== 0)
      e.bias = this.bias;
    if (this.normalBias !== 0)
      e.normalBias = this.normalBias;
    if (this.radius !== 1)
      e.radius = this.radius;
    if (this.mapSize.x !== 512 || this.mapSize.y !== 512)
      e.mapSize = this.mapSize.toArray();
    e.camera = this.camera.toJSON(false).object;
    delete e.camera.matrix;
    return e;
  }
};
var Sl = class extends Lr {
  constructor() {
    super(new dt(50, 1, 0.5, 500));
    this.isSpotLightShadow = true;
    this.focus = 1;
  }
  updateMatrices(e) {
    const t = this.camera;
    const n = rs * 2 * e.angle * this.focus;
    const i = this.mapSize.width / this.mapSize.height;
    const s = e.distance || t.far;
    if (n !== t.fov || i !== t.aspect || s !== t.far) {
      t.fov = n;
      t.aspect = i;
      t.far = s;
      t.updateProjectionMatrix();
    }
    super.updateMatrices(e);
  }
  copy(e) {
    super.copy(e);
    this.focus = e.focus;
    return this;
  }
};
var go = class extends pn {
  constructor(e, t, n = 0, i = Math.PI / 3, s = 0, a = 2) {
    super(e, t);
    this.isSpotLight = true;
    this.type = "SpotLight";
    this.position.copy(Ze.DEFAULT_UP);
    this.updateMatrix();
    this.target = new Ze();
    this.distance = n;
    this.angle = i;
    this.penumbra = s;
    this.decay = a;
    this.map = null;
    this.shadow = new Sl();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    super.copy(e, t);
    this.distance = e.distance;
    this.angle = e.angle;
    this.penumbra = e.penumbra;
    this.decay = e.decay;
    this.target = e.target.clone();
    this.shadow = e.shadow.clone();
    return this;
  }
};
var Qu = new Ne();
var Is = new w();
var uc = new w();
var bl = class extends Lr {
  constructor() {
    super(new dt(90, 1, 0.5, 500));
    this.isPointLightShadow = true;
    this._frameExtents = new $(4, 2);
    this._viewportCount = 6;
    this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new $e(2, 1, 1, 1),
      // negative X
      new $e(0, 1, 1, 1),
      // positive Z
      new $e(3, 1, 1, 1),
      // negative Z
      new $e(1, 1, 1, 1),
      // positive Y
      new $e(3, 0, 1, 1),
      // negative Y
      new $e(1, 0, 1, 1)
    ];
    this._cubeDirections = [
      new w(1, 0, 0),
      new w(-1, 0, 0),
      new w(0, 0, 1),
      new w(0, 0, -1),
      new w(0, 1, 0),
      new w(0, -1, 0)
    ];
    this._cubeUps = [
      new w(0, 1, 0),
      new w(0, 1, 0),
      new w(0, 1, 0),
      new w(0, 1, 0),
      new w(0, 0, 1),
      new w(0, 0, -1)
    ];
  }
  updateMatrices(e, t = 0) {
    const n = this.camera;
    const i = this.matrix;
    const s = e.distance || n.far;
    if (s !== n.far) {
      n.far = s;
      n.updateProjectionMatrix();
    }
    Is.setFromMatrixPosition(e.matrixWorld);
    n.position.copy(Is);
    uc.copy(n.position);
    uc.add(this._cubeDirections[t]);
    n.up.copy(this._cubeUps[t]);
    n.lookAt(uc);
    n.updateMatrixWorld();
    i.makeTranslation(-Is.x, -Is.y, -Is.z);
    Qu.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(Qu);
  }
};
var _o = class extends pn {
  constructor(e, t, n = 0, i = 2) {
    super(e, t);
    this.isPointLight = true;
    this.type = "PointLight";
    this.distance = n;
    this.decay = i;
    this.shadow = new bl();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    super.copy(e, t);
    this.distance = e.distance;
    this.decay = e.decay;
    this.shadow = e.shadow.clone();
    return this;
  }
};
var El = class extends Lr {
  constructor() {
    super(new ds(-5, 5, 5, -5, 0.5, 500));
    this.isDirectionalLightShadow = true;
  }
};
var xo = class extends pn {
  constructor(e, t) {
    super(e, t);
    this.isDirectionalLight = true;
    this.type = "DirectionalLight";
    this.position.copy(Ze.DEFAULT_UP);
    this.updateMatrix();
    this.target = new Ze();
    this.shadow = new El();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    super.copy(e);
    this.target = e.target.clone();
    this.shadow = e.shadow.clone();
    return this;
  }
};
var vo = class extends pn {
  constructor(e, t) {
    super(e, t);
    this.isAmbientLight = true;
    this.type = "AmbientLight";
  }
};
var yo = class extends pn {
  constructor(e, t, n = 10, i = 10) {
    super(e, t);
    this.isRectAreaLight = true;
    this.type = "RectAreaLight";
    this.width = n;
    this.height = i;
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    super.copy(e);
    this.width = e.width;
    this.height = e.height;
    return this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.object.width = this.width;
    t.object.height = this.height;
    return t;
  }
};
var Mo = class {
  constructor() {
    this.isSphericalHarmonics3 = true;
    this.coefficients = [];
    for (let e = 0; e < 9; e++) {
      this.coefficients.push(new w());
    }
  }
  set(e) {
    for (let t = 0; t < 9; t++) {
      this.coefficients[t].copy(e[t]);
    }
    return this;
  }
  zero() {
    for (let e = 0; e < 9; e++) {
      this.coefficients[e].set(0, 0, 0);
    }
    return this;
  }
  // get the radiance in the direction of the normal
  // target is a Vector3
  getAt(e, t) {
    const n = e.x, i = e.y, s = e.z;
    const a = this.coefficients;
    t.copy(a[0]).multiplyScalar(0.282095);
    t.addScaledVector(a[1], 0.488603 * i);
    t.addScaledVector(a[2], 0.488603 * s);
    t.addScaledVector(a[3], 0.488603 * n);
    t.addScaledVector(a[4], 1.092548 * (n * i));
    t.addScaledVector(a[5], 1.092548 * (i * s));
    t.addScaledVector(a[6], 0.315392 * (3 * s * s - 1));
    t.addScaledVector(a[7], 1.092548 * (n * s));
    t.addScaledVector(a[8], 0.546274 * (n * n - i * i));
    return t;
  }
  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  // target is a Vector3
  // https://graphics.stanford.edu/papers/envmap/envmap.pdf
  getIrradianceAt(e, t) {
    const n = e.x, i = e.y, s = e.z;
    const a = this.coefficients;
    t.copy(a[0]).multiplyScalar(0.886227);
    t.addScaledVector(a[1], 2 * 0.511664 * i);
    t.addScaledVector(a[2], 2 * 0.511664 * s);
    t.addScaledVector(a[3], 2 * 0.511664 * n);
    t.addScaledVector(a[4], 2 * 0.429043 * n * i);
    t.addScaledVector(a[5], 2 * 0.429043 * i * s);
    t.addScaledVector(a[6], 0.743125 * s * s - 0.247708);
    t.addScaledVector(a[7], 2 * 0.429043 * n * s);
    t.addScaledVector(a[8], 0.429043 * (n * n - i * i));
    return t;
  }
  add(e) {
    for (let t = 0; t < 9; t++) {
      this.coefficients[t].add(e.coefficients[t]);
    }
    return this;
  }
  addScaledSH(e, t) {
    for (let n = 0; n < 9; n++) {
      this.coefficients[n].addScaledVector(e.coefficients[n], t);
    }
    return this;
  }
  scale(e) {
    for (let t = 0; t < 9; t++) {
      this.coefficients[t].multiplyScalar(e);
    }
    return this;
  }
  lerp(e, t) {
    for (let n = 0; n < 9; n++) {
      this.coefficients[n].lerp(e.coefficients[n], t);
    }
    return this;
  }
  equals(e) {
    for (let t = 0; t < 9; t++) {
      if (!this.coefficients[t].equals(e.coefficients[t])) {
        return false;
      }
    }
    return true;
  }
  copy(e) {
    return this.set(e.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(e, t = 0) {
    const n = this.coefficients;
    for (let i = 0; i < 9; i++) {
      n[i].fromArray(e, t + i * 3);
    }
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.coefficients;
    for (let i = 0; i < 9; i++) {
      n[i].toArray(e, t + i * 3);
    }
    return e;
  }
  // evaluate the basis functions
  // shBasis is an Array[ 9 ]
  static getBasisAt(e, t) {
    const n = e.x, i = e.y, s = e.z;
    t[0] = 0.282095;
    t[1] = 0.488603 * i;
    t[2] = 0.488603 * s;
    t[3] = 0.488603 * n;
    t[4] = 1.092548 * n * i;
    t[5] = 1.092548 * i * s;
    t[6] = 0.315392 * (3 * s * s - 1);
    t[7] = 1.092548 * n * s;
    t[8] = 0.546274 * (n * n - i * i);
  }
};
var vs = class extends pn {
  constructor(e = new Mo(), t = 1) {
    super(void 0, t);
    this.isLightProbe = true;
    this.sh = e;
  }
  copy(e) {
    super.copy(e);
    this.sh.copy(e.sh);
    return this;
  }
  fromJSON(e) {
    this.intensity = e.intensity;
    this.sh.fromArray(e.sh);
    return this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.object.sh = this.sh.toArray();
    return t;
  }
};
var So = class r extends Lt {
  constructor(e) {
    super(e);
    this.textures = {};
  }
  load(e, t, n, i) {
    const s = this;
    const a = new sn(s.manager);
    a.setPath(s.path);
    a.setRequestHeader(s.requestHeader);
    a.setWithCredentials(s.withCredentials);
    a.load(e, function(o) {
      try {
        t(s.parse(JSON.parse(o)));
      } catch (c) {
        if (i) {
          i(c);
        } else {
          console.error(c);
        }
        s.manager.itemError(e);
      }
    }, n, i);
  }
  parse(e) {
    const t = this.textures;
    function n(s) {
      if (t[s] === void 0) {
        console.warn("THREE.MaterialLoader: Undefined texture", s);
      }
      return t[s];
    }
    const i = r.createMaterialFromType(e.type);
    if (e.uuid !== void 0)
      i.uuid = e.uuid;
    if (e.name !== void 0)
      i.name = e.name;
    if (e.color !== void 0 && i.color !== void 0)
      i.color.setHex(e.color);
    if (e.roughness !== void 0)
      i.roughness = e.roughness;
    if (e.metalness !== void 0)
      i.metalness = e.metalness;
    if (e.sheen !== void 0)
      i.sheen = e.sheen;
    if (e.sheenColor !== void 0)
      i.sheenColor = new de().setHex(e.sheenColor);
    if (e.sheenRoughness !== void 0)
      i.sheenRoughness = e.sheenRoughness;
    if (e.emissive !== void 0 && i.emissive !== void 0)
      i.emissive.setHex(e.emissive);
    if (e.specular !== void 0 && i.specular !== void 0)
      i.specular.setHex(e.specular);
    if (e.specularIntensity !== void 0)
      i.specularIntensity = e.specularIntensity;
    if (e.specularColor !== void 0 && i.specularColor !== void 0)
      i.specularColor.setHex(e.specularColor);
    if (e.shininess !== void 0)
      i.shininess = e.shininess;
    if (e.clearcoat !== void 0)
      i.clearcoat = e.clearcoat;
    if (e.clearcoatRoughness !== void 0)
      i.clearcoatRoughness = e.clearcoatRoughness;
    if (e.iridescence !== void 0)
      i.iridescence = e.iridescence;
    if (e.iridescenceIOR !== void 0)
      i.iridescenceIOR = e.iridescenceIOR;
    if (e.iridescenceThicknessRange !== void 0)
      i.iridescenceThicknessRange = e.iridescenceThicknessRange;
    if (e.transmission !== void 0)
      i.transmission = e.transmission;
    if (e.thickness !== void 0)
      i.thickness = e.thickness;
    if (e.attenuationDistance !== void 0)
      i.attenuationDistance = e.attenuationDistance;
    if (e.attenuationColor !== void 0 && i.attenuationColor !== void 0)
      i.attenuationColor.setHex(e.attenuationColor);
    if (e.fog !== void 0)
      i.fog = e.fog;
    if (e.flatShading !== void 0)
      i.flatShading = e.flatShading;
    if (e.blending !== void 0)
      i.blending = e.blending;
    if (e.combine !== void 0)
      i.combine = e.combine;
    if (e.side !== void 0)
      i.side = e.side;
    if (e.shadowSide !== void 0)
      i.shadowSide = e.shadowSide;
    if (e.opacity !== void 0)
      i.opacity = e.opacity;
    if (e.transparent !== void 0)
      i.transparent = e.transparent;
    if (e.alphaTest !== void 0)
      i.alphaTest = e.alphaTest;
    if (e.depthTest !== void 0)
      i.depthTest = e.depthTest;
    if (e.depthWrite !== void 0)
      i.depthWrite = e.depthWrite;
    if (e.colorWrite !== void 0)
      i.colorWrite = e.colorWrite;
    if (e.stencilWrite !== void 0)
      i.stencilWrite = e.stencilWrite;
    if (e.stencilWriteMask !== void 0)
      i.stencilWriteMask = e.stencilWriteMask;
    if (e.stencilFunc !== void 0)
      i.stencilFunc = e.stencilFunc;
    if (e.stencilRef !== void 0)
      i.stencilRef = e.stencilRef;
    if (e.stencilFuncMask !== void 0)
      i.stencilFuncMask = e.stencilFuncMask;
    if (e.stencilFail !== void 0)
      i.stencilFail = e.stencilFail;
    if (e.stencilZFail !== void 0)
      i.stencilZFail = e.stencilZFail;
    if (e.stencilZPass !== void 0)
      i.stencilZPass = e.stencilZPass;
    if (e.wireframe !== void 0)
      i.wireframe = e.wireframe;
    if (e.wireframeLinewidth !== void 0)
      i.wireframeLinewidth = e.wireframeLinewidth;
    if (e.wireframeLinecap !== void 0)
      i.wireframeLinecap = e.wireframeLinecap;
    if (e.wireframeLinejoin !== void 0)
      i.wireframeLinejoin = e.wireframeLinejoin;
    if (e.rotation !== void 0)
      i.rotation = e.rotation;
    if (e.linewidth !== 1)
      i.linewidth = e.linewidth;
    if (e.dashSize !== void 0)
      i.dashSize = e.dashSize;
    if (e.gapSize !== void 0)
      i.gapSize = e.gapSize;
    if (e.scale !== void 0)
      i.scale = e.scale;
    if (e.polygonOffset !== void 0)
      i.polygonOffset = e.polygonOffset;
    if (e.polygonOffsetFactor !== void 0)
      i.polygonOffsetFactor = e.polygonOffsetFactor;
    if (e.polygonOffsetUnits !== void 0)
      i.polygonOffsetUnits = e.polygonOffsetUnits;
    if (e.dithering !== void 0)
      i.dithering = e.dithering;
    if (e.alphaToCoverage !== void 0)
      i.alphaToCoverage = e.alphaToCoverage;
    if (e.premultipliedAlpha !== void 0)
      i.premultipliedAlpha = e.premultipliedAlpha;
    if (e.forceSinglePass !== void 0)
      i.forceSinglePass = e.forceSinglePass;
    if (e.visible !== void 0)
      i.visible = e.visible;
    if (e.toneMapped !== void 0)
      i.toneMapped = e.toneMapped;
    if (e.userData !== void 0)
      i.userData = e.userData;
    if (e.vertexColors !== void 0) {
      if (typeof e.vertexColors === "number") {
        i.vertexColors = e.vertexColors > 0 ? true : false;
      } else {
        i.vertexColors = e.vertexColors;
      }
    }
    if (e.uniforms !== void 0) {
      for (const s in e.uniforms) {
        const a = e.uniforms[s];
        i.uniforms[s] = {};
        switch (a.type) {
          case "t":
            i.uniforms[s].value = n(a.value);
            break;
          case "c":
            i.uniforms[s].value = new de().setHex(a.value);
            break;
          case "v2":
            i.uniforms[s].value = new $().fromArray(a.value);
            break;
          case "v3":
            i.uniforms[s].value = new w().fromArray(a.value);
            break;
          case "v4":
            i.uniforms[s].value = new $e().fromArray(a.value);
            break;
          case "m3":
            i.uniforms[s].value = new Ge().fromArray(a.value);
            break;
          case "m4":
            i.uniforms[s].value = new Ne().fromArray(a.value);
            break;
          default:
            i.uniforms[s].value = a.value;
        }
      }
    }
    if (e.defines !== void 0)
      i.defines = e.defines;
    if (e.vertexShader !== void 0)
      i.vertexShader = e.vertexShader;
    if (e.fragmentShader !== void 0)
      i.fragmentShader = e.fragmentShader;
    if (e.glslVersion !== void 0)
      i.glslVersion = e.glslVersion;
    if (e.extensions !== void 0) {
      for (const s in e.extensions) {
        i.extensions[s] = e.extensions[s];
      }
    }
    if (e.lights !== void 0)
      i.lights = e.lights;
    if (e.clipping !== void 0)
      i.clipping = e.clipping;
    if (e.size !== void 0)
      i.size = e.size;
    if (e.sizeAttenuation !== void 0)
      i.sizeAttenuation = e.sizeAttenuation;
    if (e.map !== void 0)
      i.map = n(e.map);
    if (e.matcap !== void 0)
      i.matcap = n(e.matcap);
    if (e.alphaMap !== void 0)
      i.alphaMap = n(e.alphaMap);
    if (e.bumpMap !== void 0)
      i.bumpMap = n(e.bumpMap);
    if (e.bumpScale !== void 0)
      i.bumpScale = e.bumpScale;
    if (e.normalMap !== void 0)
      i.normalMap = n(e.normalMap);
    if (e.normalMapType !== void 0)
      i.normalMapType = e.normalMapType;
    if (e.normalScale !== void 0) {
      let s = e.normalScale;
      if (Array.isArray(s) === false) {
        s = [s, s];
      }
      i.normalScale = new $().fromArray(s);
    }
    if (e.displacementMap !== void 0)
      i.displacementMap = n(e.displacementMap);
    if (e.displacementScale !== void 0)
      i.displacementScale = e.displacementScale;
    if (e.displacementBias !== void 0)
      i.displacementBias = e.displacementBias;
    if (e.roughnessMap !== void 0)
      i.roughnessMap = n(e.roughnessMap);
    if (e.metalnessMap !== void 0)
      i.metalnessMap = n(e.metalnessMap);
    if (e.emissiveMap !== void 0)
      i.emissiveMap = n(e.emissiveMap);
    if (e.emissiveIntensity !== void 0)
      i.emissiveIntensity = e.emissiveIntensity;
    if (e.specularMap !== void 0)
      i.specularMap = n(e.specularMap);
    if (e.specularIntensityMap !== void 0)
      i.specularIntensityMap = n(e.specularIntensityMap);
    if (e.specularColorMap !== void 0)
      i.specularColorMap = n(e.specularColorMap);
    if (e.envMap !== void 0)
      i.envMap = n(e.envMap);
    if (e.envMapIntensity !== void 0)
      i.envMapIntensity = e.envMapIntensity;
    if (e.reflectivity !== void 0)
      i.reflectivity = e.reflectivity;
    if (e.refractionRatio !== void 0)
      i.refractionRatio = e.refractionRatio;
    if (e.lightMap !== void 0)
      i.lightMap = n(e.lightMap);
    if (e.lightMapIntensity !== void 0)
      i.lightMapIntensity = e.lightMapIntensity;
    if (e.aoMap !== void 0)
      i.aoMap = n(e.aoMap);
    if (e.aoMapIntensity !== void 0)
      i.aoMapIntensity = e.aoMapIntensity;
    if (e.gradientMap !== void 0)
      i.gradientMap = n(e.gradientMap);
    if (e.clearcoatMap !== void 0)
      i.clearcoatMap = n(e.clearcoatMap);
    if (e.clearcoatRoughnessMap !== void 0)
      i.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap);
    if (e.clearcoatNormalMap !== void 0)
      i.clearcoatNormalMap = n(e.clearcoatNormalMap);
    if (e.clearcoatNormalScale !== void 0)
      i.clearcoatNormalScale = new $().fromArray(e.clearcoatNormalScale);
    if (e.iridescenceMap !== void 0)
      i.iridescenceMap = n(e.iridescenceMap);
    if (e.iridescenceThicknessMap !== void 0)
      i.iridescenceThicknessMap = n(e.iridescenceThicknessMap);
    if (e.transmissionMap !== void 0)
      i.transmissionMap = n(e.transmissionMap);
    if (e.thicknessMap !== void 0)
      i.thicknessMap = n(e.thicknessMap);
    if (e.sheenColorMap !== void 0)
      i.sheenColorMap = n(e.sheenColorMap);
    if (e.sheenRoughnessMap !== void 0)
      i.sheenRoughnessMap = n(e.sheenRoughnessMap);
    return i;
  }
  setTextures(e) {
    this.textures = e;
    return this;
  }
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: no,
      SpriteMaterial: sr,
      RawShaderMaterial: io,
      ShaderMaterial: Zt,
      PointsMaterial: ar,
      MeshPhysicalMaterial: so,
      MeshStandardMaterial: Ar,
      MeshPhongMaterial: ro,
      MeshToonMaterial: ao,
      MeshNormalMaterial: oo,
      MeshLambertMaterial: co,
      MeshDepthMaterial: nr,
      MeshDistanceMaterial: ir,
      MeshBasicMaterial: dn,
      MeshMatcapMaterial: lo,
      LineDashedMaterial: ho,
      LineBasicMaterial: yt,
      Material: vt
    };
    return new t[e]();
  }
};
var Ir = class {
  static decodeText(e) {
    if (typeof TextDecoder !== "undefined") {
      return new TextDecoder().decode(e);
    }
    let t = "";
    for (let n = 0, i = e.length; n < i; n++) {
      t += String.fromCharCode(e[n]);
    }
    try {
      return decodeURIComponent(escape(t));
    } catch (n) {
      return t;
    }
  }
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    if (t === -1)
      return "./";
    return e.slice(0, t + 1);
  }
  static resolveURL(e, t) {
    if (typeof e !== "string" || e === "")
      return "";
    if (/^https?:\/\//i.test(t) && /^\//.test(e)) {
      t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
    }
    if (/^(https?:)?\/\//i.test(e))
      return e;
    if (/^data:.*,.*$/i.test(e))
      return e;
    if (/^blob:.*$/i.test(e))
      return e;
    return t + e;
  }
};
var bo = class extends ze {
  constructor() {
    super();
    this.isInstancedBufferGeometry = true;
    this.type = "InstancedBufferGeometry";
    this.instanceCount = Infinity;
  }
  copy(e) {
    super.copy(e);
    this.instanceCount = e.instanceCount;
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.instanceCount = this.instanceCount;
    e.isInstancedBufferGeometry = true;
    return e;
  }
};
var Eo = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this;
    const a = new sn(s.manager);
    a.setPath(s.path);
    a.setRequestHeader(s.requestHeader);
    a.setWithCredentials(s.withCredentials);
    a.load(e, function(o) {
      try {
        t(s.parse(JSON.parse(o)));
      } catch (c) {
        if (i) {
          i(c);
        } else {
          console.error(c);
        }
        s.manager.itemError(e);
      }
    }, n, i);
  }
  parse(e) {
    const t = {};
    const n = {};
    function i(f, m) {
      if (t[m] !== void 0)
        return t[m];
      const _ = f.interleavedBuffers;
      const g = _[m];
      const p = s(f, g.buffer);
      const v = Qi(g.type, p);
      const x = new fs(v, g.stride);
      x.uuid = g.uuid;
      t[m] = x;
      return x;
    }
    function s(f, m) {
      if (n[m] !== void 0)
        return n[m];
      const _ = f.arrayBuffers;
      const g = _[m];
      const p = new Uint32Array(g).buffer;
      n[m] = p;
      return p;
    }
    const a = e.isInstancedBufferGeometry ? new bo() : new ze();
    const o = e.data.index;
    if (o !== void 0) {
      const f = Qi(o.type, o.array);
      a.setIndex(new Ke(f, 1));
    }
    const c = e.data.attributes;
    for (const f in c) {
      const m = c[f];
      let _;
      if (m.isInterleavedBufferAttribute) {
        const g = i(e.data, m.data);
        _ = new Mi(g, m.itemSize, m.offset, m.normalized);
      } else {
        const g = Qi(m.type, m.array);
        const p = m.isInstancedBufferAttribute ? Jn : Ke;
        _ = new p(g, m.itemSize, m.normalized);
      }
      if (m.name !== void 0)
        _.name = m.name;
      if (m.usage !== void 0)
        _.setUsage(m.usage);
      if (m.updateRange !== void 0) {
        _.updateRange.offset = m.updateRange.offset;
        _.updateRange.count = m.updateRange.count;
      }
      a.setAttribute(f, _);
    }
    const l = e.data.morphAttributes;
    if (l) {
      for (const f in l) {
        const m = l[f];
        const _ = [];
        for (let g = 0, p = m.length; g < p; g++) {
          const v = m[g];
          let x;
          if (v.isInterleavedBufferAttribute) {
            const M = i(e.data, v.data);
            x = new Mi(M, v.itemSize, v.offset, v.normalized);
          } else {
            const M = Qi(v.type, v.array);
            x = new Ke(M, v.itemSize, v.normalized);
          }
          if (v.name !== void 0)
            x.name = v.name;
          _.push(x);
        }
        a.morphAttributes[f] = _;
      }
    }
    const h = e.data.morphTargetsRelative;
    if (h) {
      a.morphTargetsRelative = true;
    }
    const u = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (u !== void 0) {
      for (let f = 0, m = u.length; f !== m; ++f) {
        const _ = u[f];
        a.addGroup(_.start, _.count, _.materialIndex);
      }
    }
    const d = e.data.boundingSphere;
    if (d !== void 0) {
      const f = new w();
      if (d.center !== void 0) {
        f.fromArray(d.center);
      }
      a.boundingSphere = new Yt(f, d.radius);
    }
    if (e.name)
      a.name = e.name;
    if (e.userData)
      a.userData = e.userData;
    return a;
  }
};
var Tl = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this;
    const a = this.path === "" ? Ir.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || a;
    const o = new sn(this.manager);
    o.setPath(this.path);
    o.setRequestHeader(this.requestHeader);
    o.setWithCredentials(this.withCredentials);
    o.load(e, function(c) {
      let l = null;
      try {
        l = JSON.parse(c);
      } catch (u) {
        if (i !== void 0)
          i(u);
        console.error("THREE:ObjectLoader: Can't parse " + e + ".", u.message);
        return;
      }
      const h = l.metadata;
      if (h === void 0 || h.type === void 0 || h.type.toLowerCase() === "geometry") {
        if (i !== void 0)
          i(new Error("THREE.ObjectLoader: Can't load " + e));
        console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      s.parse(l, t);
    }, n, i);
  }
  async loadAsync(e, t) {
    const n = this;
    const i = this.path === "" ? Ir.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || i;
    const s = new sn(this.manager);
    s.setPath(this.path);
    s.setRequestHeader(this.requestHeader);
    s.setWithCredentials(this.withCredentials);
    const a = await s.loadAsync(e, t);
    const o = JSON.parse(a);
    const c = o.metadata;
    if (c === void 0 || c.type === void 0 || c.type.toLowerCase() === "geometry") {
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    }
    return await n.parseAsync(o);
  }
  parse(e, t) {
    const n = this.parseAnimations(e.animations);
    const i = this.parseShapes(e.shapes);
    const s = this.parseGeometries(e.geometries, i);
    const a = this.parseImages(e.images, function() {
      if (t !== void 0)
        t(l);
    });
    const o = this.parseTextures(e.textures, a);
    const c = this.parseMaterials(e.materials, o);
    const l = this.parseObject(e.object, s, c, o, n);
    const h = this.parseSkeletons(e.skeletons, l);
    this.bindSkeletons(l, h);
    if (t !== void 0) {
      let u = false;
      for (const d in a) {
        if (a[d].data instanceof HTMLImageElement) {
          u = true;
          break;
        }
      }
      if (u === false)
        t(l);
    }
    return l;
  }
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations);
    const n = this.parseShapes(e.shapes);
    const i = this.parseGeometries(e.geometries, n);
    const s = await this.parseImagesAsync(e.images);
    const a = this.parseTextures(e.textures, s);
    const o = this.parseMaterials(e.materials, a);
    const c = this.parseObject(e.object, i, o, a, t);
    const l = this.parseSkeletons(e.skeletons, c);
    this.bindSkeletons(c, l);
    return c;
  }
  parseShapes(e) {
    const t = {};
    if (e !== void 0) {
      for (let n = 0, i = e.length; n < i; n++) {
        const s = new An().fromJSON(e[n]);
        t[s.uuid] = s;
      }
    }
    return t;
  }
  parseSkeletons(e, t) {
    const n = {};
    const i = {};
    t.traverse(function(s) {
      if (s.isBone)
        i[s.uuid] = s;
    });
    if (e !== void 0) {
      for (let s = 0, a = e.length; s < a; s++) {
        const o = new Xa().fromJSON(e[s], i);
        n[o.uuid] = o;
      }
    }
    return n;
  }
  parseGeometries(e, t) {
    const n = {};
    if (e !== void 0) {
      const i = new Eo();
      for (let s = 0, a = e.length; s < a; s++) {
        let o;
        const c = e[s];
        switch (c.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            o = i.parse(c);
            break;
          default:
            if (c.type in $u) {
              o = $u[c.type].fromJSON(c, t);
            } else {
              console.warn(`THREE.ObjectLoader: Unsupported geometry type "${c.type}"`);
            }
        }
        o.uuid = c.uuid;
        if (c.name !== void 0)
          o.name = c.name;
        if (c.userData !== void 0)
          o.userData = c.userData;
        n[c.uuid] = o;
      }
    }
    return n;
  }
  parseMaterials(e, t) {
    const n = {};
    const i = {};
    if (e !== void 0) {
      const s = new So();
      s.setTextures(t);
      for (let a = 0, o = e.length; a < o; a++) {
        const c = e[a];
        if (n[c.uuid] === void 0) {
          n[c.uuid] = s.parse(c);
        }
        i[c.uuid] = n[c.uuid];
      }
    }
    return i;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0) {
      for (let n = 0; n < e.length; n++) {
        const i = e[n];
        const s = Ri.parse(i);
        t[s.uuid] = s;
      }
    }
    return t;
  }
  parseImages(e, t) {
    const n = this;
    const i = {};
    let s;
    function a(c) {
      n.manager.itemStart(c);
      return s.load(c, function() {
        n.manager.itemEnd(c);
      }, void 0, function() {
        n.manager.itemError(c);
        n.manager.itemEnd(c);
      });
    }
    function o(c) {
      if (typeof c === "string") {
        const l = c;
        const h = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(l) ? l : n.resourcePath + l;
        return a(h);
      } else {
        if (c.data) {
          return {
            data: Qi(c.type, c.data),
            width: c.width,
            height: c.height
          };
        } else {
          return null;
        }
      }
    }
    if (e !== void 0 && e.length > 0) {
      const c = new Pr(t);
      s = new Pi(c);
      s.setCrossOrigin(this.crossOrigin);
      for (let l = 0, h = e.length; l < h; l++) {
        const u = e[l];
        const d = u.url;
        if (Array.isArray(d)) {
          const f = [];
          for (let m = 0, _ = d.length; m < _; m++) {
            const g = d[m];
            const p = o(g);
            if (p !== null) {
              if (p instanceof HTMLImageElement) {
                f.push(p);
              } else {
                f.push(new Gn(p.data, p.width, p.height));
              }
            }
          }
          i[u.uuid] = new En(f);
        } else {
          const f = o(u.url);
          i[u.uuid] = new En(f);
        }
      }
    }
    return i;
  }
  async parseImagesAsync(e) {
    const t = this;
    const n = {};
    let i;
    async function s(a) {
      if (typeof a === "string") {
        const o = a;
        const c = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(o) ? o : t.resourcePath + o;
        return await i.loadAsync(c);
      } else {
        if (a.data) {
          return {
            data: Qi(a.type, a.data),
            width: a.width,
            height: a.height
          };
        } else {
          return null;
        }
      }
    }
    if (e !== void 0 && e.length > 0) {
      i = new Pi(this.manager);
      i.setCrossOrigin(this.crossOrigin);
      for (let a = 0, o = e.length; a < o; a++) {
        const c = e[a];
        const l = c.url;
        if (Array.isArray(l)) {
          const h = [];
          for (let u = 0, d = l.length; u < d; u++) {
            const f = l[u];
            const m = await s(f);
            if (m !== null) {
              if (m instanceof HTMLImageElement) {
                h.push(m);
              } else {
                h.push(new Gn(m.data, m.width, m.height));
              }
            }
          }
          n[c.uuid] = new En(h);
        } else {
          const h = await s(c.url);
          n[c.uuid] = new En(h);
        }
      }
    }
    return n;
  }
  parseTextures(e, t) {
    function n(s, a) {
      if (typeof s === "number")
        return s;
      console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", s);
      return a[s];
    }
    const i = {};
    if (e !== void 0) {
      for (let s = 0, a = e.length; s < a; s++) {
        const o = e[s];
        if (o.image === void 0) {
          console.warn('THREE.ObjectLoader: No "image" specified for', o.uuid);
        }
        if (t[o.image] === void 0) {
          console.warn("THREE.ObjectLoader: Undefined image", o.image);
        }
        const c = t[o.image];
        const l = c.data;
        let h;
        if (Array.isArray(l)) {
          h = new yi();
          if (l.length === 6)
            h.needsUpdate = true;
        } else {
          if (l && l.data) {
            h = new Gn();
          } else {
            h = new pt();
          }
          if (l)
            h.needsUpdate = true;
        }
        h.source = c;
        h.uuid = o.uuid;
        if (o.name !== void 0)
          h.name = o.name;
        if (o.mapping !== void 0)
          h.mapping = n(o.mapping, iv);
        if (o.channel !== void 0)
          h.channel = o.channel;
        if (o.offset !== void 0)
          h.offset.fromArray(o.offset);
        if (o.repeat !== void 0)
          h.repeat.fromArray(o.repeat);
        if (o.center !== void 0)
          h.center.fromArray(o.center);
        if (o.rotation !== void 0)
          h.rotation = o.rotation;
        if (o.wrap !== void 0) {
          h.wrapS = n(o.wrap[0], ed);
          h.wrapT = n(o.wrap[1], ed);
        }
        if (o.format !== void 0)
          h.format = o.format;
        if (o.internalFormat !== void 0)
          h.internalFormat = o.internalFormat;
        if (o.type !== void 0)
          h.type = o.type;
        if (o.colorSpace !== void 0)
          h.colorSpace = o.colorSpace;
        if (o.encoding !== void 0)
          h.encoding = o.encoding;
        if (o.minFilter !== void 0)
          h.minFilter = n(o.minFilter, td);
        if (o.magFilter !== void 0)
          h.magFilter = n(o.magFilter, td);
        if (o.anisotropy !== void 0)
          h.anisotropy = o.anisotropy;
        if (o.flipY !== void 0)
          h.flipY = o.flipY;
        if (o.generateMipmaps !== void 0)
          h.generateMipmaps = o.generateMipmaps;
        if (o.premultiplyAlpha !== void 0)
          h.premultiplyAlpha = o.premultiplyAlpha;
        if (o.unpackAlignment !== void 0)
          h.unpackAlignment = o.unpackAlignment;
        if (o.userData !== void 0)
          h.userData = o.userData;
        i[o.uuid] = h;
      }
    }
    return i;
  }
  parseObject(e, t, n, i, s) {
    let a;
    function o(d) {
      if (t[d] === void 0) {
        console.warn("THREE.ObjectLoader: Undefined geometry", d);
      }
      return t[d];
    }
    function c(d) {
      if (d === void 0)
        return void 0;
      if (Array.isArray(d)) {
        const f = [];
        for (let m = 0, _ = d.length; m < _; m++) {
          const g = d[m];
          if (n[g] === void 0) {
            console.warn("THREE.ObjectLoader: Undefined material", g);
          }
          f.push(n[g]);
        }
        return f;
      }
      if (n[d] === void 0) {
        console.warn("THREE.ObjectLoader: Undefined material", d);
      }
      return n[d];
    }
    function l(d) {
      if (i[d] === void 0) {
        console.warn("THREE.ObjectLoader: Undefined texture", d);
      }
      return i[d];
    }
    let h, u;
    switch (e.type) {
      case "Scene":
        a = new Va();
        if (e.background !== void 0) {
          if (Number.isInteger(e.background)) {
            a.background = new de(e.background);
          } else {
            a.background = l(e.background);
          }
        }
        if (e.environment !== void 0) {
          a.environment = l(e.environment);
        }
        if (e.fog !== void 0) {
          if (e.fog.type === "Fog") {
            a.fog = new ka(e.fog.color, e.fog.near, e.fog.far);
          } else if (e.fog.type === "FogExp2") {
            a.fog = new za(e.fog.color, e.fog.density);
          }
        }
        if (e.backgroundBlurriness !== void 0)
          a.backgroundBlurriness = e.backgroundBlurriness;
        if (e.backgroundIntensity !== void 0)
          a.backgroundIntensity = e.backgroundIntensity;
        break;
      case "PerspectiveCamera":
        a = new dt(e.fov, e.aspect, e.near, e.far);
        if (e.focus !== void 0)
          a.focus = e.focus;
        if (e.zoom !== void 0)
          a.zoom = e.zoom;
        if (e.filmGauge !== void 0)
          a.filmGauge = e.filmGauge;
        if (e.filmOffset !== void 0)
          a.filmOffset = e.filmOffset;
        if (e.view !== void 0)
          a.view = Object.assign({}, e.view);
        break;
      case "OrthographicCamera":
        a = new ds(e.left, e.right, e.top, e.bottom, e.near, e.far);
        if (e.zoom !== void 0)
          a.zoom = e.zoom;
        if (e.view !== void 0)
          a.view = Object.assign({}, e.view);
        break;
      case "AmbientLight":
        a = new vo(e.color, e.intensity);
        break;
      case "DirectionalLight":
        a = new xo(e.color, e.intensity);
        break;
      case "PointLight":
        a = new _o(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        a = new yo(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        a = new go(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
        break;
      case "HemisphereLight":
        a = new mo(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        a = new vs().fromJSON(e);
        break;
      case "SkinnedMesh":
        h = o(e.geometry);
        u = c(e.material);
        a = new Wa(h, u);
        if (e.bindMode !== void 0)
          a.bindMode = e.bindMode;
        if (e.bindMatrix !== void 0)
          a.bindMatrix.fromArray(e.bindMatrix);
        if (e.skeleton !== void 0)
          a.skeleton = e.skeleton;
        break;
      case "Mesh":
        h = o(e.geometry);
        u = c(e.material);
        a = new ft(h, u);
        break;
      case "InstancedMesh":
        h = o(e.geometry);
        u = c(e.material);
        const d = e.count;
        const f = e.instanceMatrix;
        const m = e.instanceColor;
        a = new qa(h, u, d);
        a.instanceMatrix = new Jn(new Float32Array(f.array), 16);
        if (m !== void 0)
          a.instanceColor = new Jn(new Float32Array(m.array), m.itemSize);
        break;
      case "LOD":
        a = new Ga();
        break;
      case "Line":
        a = new fn(o(e.geometry), c(e.material));
        break;
      case "LineLoop":
        a = new Ya(o(e.geometry), c(e.material));
        break;
      case "LineSegments":
        a = new Jt(o(e.geometry), c(e.material));
        break;
      case "PointCloud":
      case "Points":
        a = new Za(o(e.geometry), c(e.material));
        break;
      case "Sprite":
        a = new Ha(c(e.material));
        break;
      case "Group":
        a = new zn();
        break;
      case "Bone":
        a = new rr();
        break;
      default:
        a = new Ze();
    }
    a.uuid = e.uuid;
    if (e.name !== void 0)
      a.name = e.name;
    if (e.matrix !== void 0) {
      a.matrix.fromArray(e.matrix);
      if (e.matrixAutoUpdate !== void 0)
        a.matrixAutoUpdate = e.matrixAutoUpdate;
      if (a.matrixAutoUpdate)
        a.matrix.decompose(a.position, a.quaternion, a.scale);
    } else {
      if (e.position !== void 0)
        a.position.fromArray(e.position);
      if (e.rotation !== void 0)
        a.rotation.fromArray(e.rotation);
      if (e.quaternion !== void 0)
        a.quaternion.fromArray(e.quaternion);
      if (e.scale !== void 0)
        a.scale.fromArray(e.scale);
    }
    if (e.up !== void 0)
      a.up.fromArray(e.up);
    if (e.castShadow !== void 0)
      a.castShadow = e.castShadow;
    if (e.receiveShadow !== void 0)
      a.receiveShadow = e.receiveShadow;
    if (e.shadow) {
      if (e.shadow.bias !== void 0)
        a.shadow.bias = e.shadow.bias;
      if (e.shadow.normalBias !== void 0)
        a.shadow.normalBias = e.shadow.normalBias;
      if (e.shadow.radius !== void 0)
        a.shadow.radius = e.shadow.radius;
      if (e.shadow.mapSize !== void 0)
        a.shadow.mapSize.fromArray(e.shadow.mapSize);
      if (e.shadow.camera !== void 0)
        a.shadow.camera = this.parseObject(e.shadow.camera);
    }
    if (e.visible !== void 0)
      a.visible = e.visible;
    if (e.frustumCulled !== void 0)
      a.frustumCulled = e.frustumCulled;
    if (e.renderOrder !== void 0)
      a.renderOrder = e.renderOrder;
    if (e.userData !== void 0)
      a.userData = e.userData;
    if (e.layers !== void 0)
      a.layers.mask = e.layers;
    if (e.children !== void 0) {
      const d = e.children;
      for (let f = 0; f < d.length; f++) {
        a.add(this.parseObject(d[f], t, n, i, s));
      }
    }
    if (e.animations !== void 0) {
      const d = e.animations;
      for (let f = 0; f < d.length; f++) {
        const m = d[f];
        a.animations.push(s[m]);
      }
    }
    if (e.type === "LOD") {
      if (e.autoUpdate !== void 0)
        a.autoUpdate = e.autoUpdate;
      const d = e.levels;
      for (let f = 0; f < d.length; f++) {
        const m = d[f];
        const _ = a.getObjectByProperty("uuid", m.object);
        if (_ !== void 0) {
          a.addLevel(_, m.distance, m.hysteresis);
        }
      }
    }
    return a;
  }
  bindSkeletons(e, t) {
    if (Object.keys(t).length === 0)
      return;
    e.traverse(function(n) {
      if (n.isSkinnedMesh === true && n.skeleton !== void 0) {
        const i = t[n.skeleton];
        if (i === void 0) {
          console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton);
        } else {
          n.bind(i, n.bindMatrix);
        }
      }
    });
  }
};
var iv = {
  UVMapping: Po,
  CubeReflectionMapping: Wn,
  CubeRefractionMapping: Xn,
  EquirectangularReflectionMapping: Vs,
  EquirectangularRefractionMapping: Hs,
  CubeUVReflectionMapping: ys
};
var ed = {
  RepeatWrapping: Gs,
  ClampToEdgeWrapping: Et,
  MirroredRepeatWrapping: Ws
};
var td = {
  NearestFilter: ct,
  NearestMipmapNearestFilter: La,
  NearestMipmapLinearFilter: Ns,
  LinearFilter: lt,
  LinearMipmapNearestFilter: Ch,
  LinearMipmapLinearFilter: qn
};
var wl = class extends Lt {
  constructor(e) {
    super(e);
    this.isImageBitmapLoader = true;
    if (typeof createImageBitmap === "undefined") {
      console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
    }
    if (typeof fetch === "undefined") {
      console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
    }
    this.options = { premultiplyAlpha: "none" };
  }
  setOptions(e) {
    this.options = e;
    return this;
  }
  load(e, t, n, i) {
    if (e === void 0)
      e = "";
    if (this.path !== void 0)
      e = this.path + e;
    e = this.manager.resolveURL(e);
    const s = this;
    const a = Ci.get(e);
    if (a !== void 0) {
      s.manager.itemStart(e);
      setTimeout(function() {
        if (t)
          t(a);
        s.manager.itemEnd(e);
      }, 0);
      return a;
    }
    const o = {};
    o.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
    o.headers = this.requestHeader;
    fetch(e, o).then(function(c) {
      return c.blob();
    }).then(function(c) {
      return createImageBitmap(c, Object.assign(s.options, { colorSpaceConversion: "none" }));
    }).then(function(c) {
      Ci.add(e, c);
      if (t)
        t(c);
      s.manager.itemEnd(e);
    }).catch(function(c) {
      if (i)
        i(c);
      s.manager.itemError(e);
      s.manager.itemEnd(e);
    });
    s.manager.itemStart(e);
  }
};
var ga;
var Ur = class {
  static getContext() {
    if (ga === void 0) {
      ga = new (window.AudioContext || window.webkitAudioContext)();
    }
    return ga;
  }
  static setContext(e) {
    ga = e;
  }
};
var Al = class extends Lt {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this;
    const a = new sn(this.manager);
    a.setResponseType("arraybuffer");
    a.setPath(this.path);
    a.setRequestHeader(this.requestHeader);
    a.setWithCredentials(this.withCredentials);
    a.load(e, function(c) {
      try {
        const l = c.slice(0);
        const h = Ur.getContext();
        h.decodeAudioData(l, function(u) {
          t(u);
        }, o);
      } catch (l) {
        o(l);
      }
    }, n, i);
    function o(c) {
      if (i) {
        i(c);
      } else {
        console.error(c);
      }
      s.manager.itemError(e);
    }
  }
};
var Rl = class extends vs {
  constructor(e, t, n = 1) {
    super(void 0, n);
    this.isHemisphereLightProbe = true;
    const i = new de().set(e);
    const s = new de().set(t);
    const a = new w(i.r, i.g, i.b);
    const o = new w(s.r, s.g, s.b);
    const c = Math.sqrt(Math.PI);
    const l = c * Math.sqrt(0.75);
    this.sh.coefficients[0].copy(a).add(o).multiplyScalar(c);
    this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(l);
  }
};
var Cl = class extends vs {
  constructor(e, t = 1) {
    super(void 0, t);
    this.isAmbientLightProbe = true;
    const n = new de().set(e);
    this.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI));
  }
};
var nd = new Ne();
var id = new Ne();
var si = new Ne();
var Pl = class {
  constructor() {
    this.type = "StereoCamera";
    this.aspect = 1;
    this.eyeSep = 0.064;
    this.cameraL = new dt();
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = false;
    this.cameraR = new dt();
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = false;
    this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  update(e) {
    const t = this._cache;
    const n = t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep;
    if (n) {
      t.focus = e.focus;
      t.fov = e.fov;
      t.aspect = e.aspect * this.aspect;
      t.near = e.near;
      t.far = e.far;
      t.zoom = e.zoom;
      t.eyeSep = this.eyeSep;
      si.copy(e.projectionMatrix);
      const i = t.eyeSep / 2;
      const s = i * t.near / t.focus;
      const a = t.near * Math.tan(_i * t.fov * 0.5) / t.zoom;
      let o, c;
      id.elements[12] = -i;
      nd.elements[12] = i;
      o = -a * t.aspect + s;
      c = a * t.aspect + s;
      si.elements[0] = 2 * t.near / (c - o);
      si.elements[8] = (c + o) / (c - o);
      this.cameraL.projectionMatrix.copy(si);
      o = -a * t.aspect - s;
      c = a * t.aspect - s;
      si.elements[0] = 2 * t.near / (c - o);
      si.elements[8] = (c + o) / (c - o);
      this.cameraR.projectionMatrix.copy(si);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(id);
    this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(nd);
  }
};
var To = class {
  constructor(e = true) {
    this.autoStart = e;
    this.startTime = 0;
    this.oldTime = 0;
    this.elapsedTime = 0;
    this.running = false;
  }
  start() {
    this.startTime = sd();
    this.oldTime = this.startTime;
    this.elapsedTime = 0;
    this.running = true;
  }
  stop() {
    this.getElapsedTime();
    this.running = false;
    this.autoStart = false;
  }
  getElapsedTime() {
    this.getDelta();
    return this.elapsedTime;
  }
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running) {
      this.start();
      return 0;
    }
    if (this.running) {
      const t = sd();
      e = (t - this.oldTime) / 1e3;
      this.oldTime = t;
      this.elapsedTime += e;
    }
    return e;
  }
};
function sd() {
  return (typeof performance === "undefined" ? Date : performance).now();
}
var ri = new w();
var rd = new Tt();
var sv = new w();
var ai = new w();
var Ll = class extends Ze {
  constructor() {
    super();
    this.type = "AudioListener";
    this.context = Ur.getContext();
    this.gain = this.context.createGain();
    this.gain.connect(this.context.destination);
    this.filter = null;
    this.timeDelta = 0;
    this._clock = new To();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    if (this.filter !== null) {
      this.gain.disconnect(this.filter);
      this.filter.disconnect(this.context.destination);
      this.gain.connect(this.context.destination);
      this.filter = null;
    }
    return this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(e) {
    if (this.filter !== null) {
      this.gain.disconnect(this.filter);
      this.filter.disconnect(this.context.destination);
    } else {
      this.gain.disconnect(this.context.destination);
    }
    this.filter = e;
    this.gain.connect(this.filter);
    this.filter.connect(this.context.destination);
    return this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(e) {
    this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01);
    return this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener;
    const n = this.up;
    this.timeDelta = this._clock.getDelta();
    this.matrixWorld.decompose(ri, rd, sv);
    ai.set(0, 0, -1).applyQuaternion(rd);
    if (t.positionX) {
      const i = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(ri.x, i);
      t.positionY.linearRampToValueAtTime(ri.y, i);
      t.positionZ.linearRampToValueAtTime(ri.z, i);
      t.forwardX.linearRampToValueAtTime(ai.x, i);
      t.forwardY.linearRampToValueAtTime(ai.y, i);
      t.forwardZ.linearRampToValueAtTime(ai.z, i);
      t.upX.linearRampToValueAtTime(n.x, i);
      t.upY.linearRampToValueAtTime(n.y, i);
      t.upZ.linearRampToValueAtTime(n.z, i);
    } else {
      t.setPosition(ri.x, ri.y, ri.z);
      t.setOrientation(ai.x, ai.y, ai.z, n.x, n.y, n.z);
    }
  }
};
var wo = class extends Ze {
  constructor(e) {
    super();
    this.type = "Audio";
    this.listener = e;
    this.context = e.context;
    this.gain = this.context.createGain();
    this.gain.connect(e.getInput());
    this.autoplay = false;
    this.buffer = null;
    this.detune = 0;
    this.loop = false;
    this.loopStart = 0;
    this.loopEnd = 0;
    this.offset = 0;
    this.duration = void 0;
    this.playbackRate = 1;
    this.isPlaying = false;
    this.hasPlaybackControl = true;
    this.source = null;
    this.sourceType = "empty";
    this._startedAt = 0;
    this._progress = 0;
    this._connected = false;
    this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(e) {
    this.hasPlaybackControl = false;
    this.sourceType = "audioNode";
    this.source = e;
    this.connect();
    return this;
  }
  setMediaElementSource(e) {
    this.hasPlaybackControl = false;
    this.sourceType = "mediaNode";
    this.source = this.context.createMediaElementSource(e);
    this.connect();
    return this;
  }
  setMediaStreamSource(e) {
    this.hasPlaybackControl = false;
    this.sourceType = "mediaStreamNode";
    this.source = this.context.createMediaStreamSource(e);
    this.connect();
    return this;
  }
  setBuffer(e) {
    this.buffer = e;
    this.sourceType = "buffer";
    if (this.autoplay)
      this.play();
    return this;
  }
  play(e = 0) {
    if (this.isPlaying === true) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    t.buffer = this.buffer;
    t.loop = this.loop;
    t.loopStart = this.loopStart;
    t.loopEnd = this.loopEnd;
    t.onended = this.onEnded.bind(this);
    t.start(this._startedAt, this._progress + this.offset, this.duration);
    this.isPlaying = true;
    this.source = t;
    this.setDetune(this.detune);
    this.setPlaybackRate(this.playbackRate);
    return this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    if (this.isPlaying === true) {
      this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
      if (this.loop === true) {
        this._progress = this._progress % (this.duration || this.buffer.duration);
      }
      this.source.stop();
      this.source.onended = null;
      this.isPlaying = false;
    }
    return this;
  }
  stop() {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._progress = 0;
    if (this.source !== null) {
      this.source.stop();
      this.source.onended = null;
    }
    this.isPlaying = false;
    return this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++) {
        this.filters[e - 1].connect(this.filters[e]);
      }
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else {
      this.source.connect(this.getOutput());
    }
    this._connected = true;
    return this;
  }
  disconnect() {
    if (this.filters.length > 0) {
      this.source.disconnect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++) {
        this.filters[e - 1].disconnect(this.filters[e]);
      }
      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else {
      this.source.disconnect(this.getOutput());
    }
    this._connected = false;
    return this;
  }
  getFilters() {
    return this.filters;
  }
  setFilters(e) {
    if (!e)
      e = [];
    if (this._connected === true) {
      this.disconnect();
      this.filters = e.slice();
      this.connect();
    } else {
      this.filters = e.slice();
    }
    return this;
  }
  setDetune(e) {
    this.detune = e;
    if (this.source.detune === void 0)
      return;
    if (this.isPlaying === true) {
      this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
    }
    return this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this.playbackRate = e;
    if (this.isPlaying === true) {
      this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
    }
    return this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = false;
  }
  getLoop() {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return false;
    }
    return this.loop;
  }
  setLoop(e) {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this.loop = e;
    if (this.isPlaying === true) {
      this.source.loop = this.loop;
    }
    return this;
  }
  setLoopStart(e) {
    this.loopStart = e;
    return this;
  }
  setLoopEnd(e) {
    this.loopEnd = e;
    return this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(e) {
    this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01);
    return this;
  }
};
var oi = new w();
var ad = new Tt();
var rv = new w();
var ci = new w();
var Il = class extends wo {
  constructor(e) {
    super(e);
    this.panner = this.context.createPanner();
    this.panner.panningModel = "HRTF";
    this.panner.connect(this.gain);
  }
  disconnect() {
    super.disconnect();
    this.panner.disconnect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(e) {
    this.panner.refDistance = e;
    return this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(e) {
    this.panner.rolloffFactor = e;
    return this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(e) {
    this.panner.distanceModel = e;
    return this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(e) {
    this.panner.maxDistance = e;
    return this;
  }
  setDirectionalCone(e, t, n) {
    this.panner.coneInnerAngle = e;
    this.panner.coneOuterAngle = t;
    this.panner.coneOuterGain = n;
    return this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    if (this.hasPlaybackControl === true && this.isPlaying === false)
      return;
    this.matrixWorld.decompose(oi, ad, rv);
    ci.set(0, 0, 1).applyQuaternion(ad);
    const t = this.panner;
    if (t.positionX) {
      const n = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(oi.x, n);
      t.positionY.linearRampToValueAtTime(oi.y, n);
      t.positionZ.linearRampToValueAtTime(oi.z, n);
      t.orientationX.linearRampToValueAtTime(ci.x, n);
      t.orientationY.linearRampToValueAtTime(ci.y, n);
      t.orientationZ.linearRampToValueAtTime(ci.z, n);
    } else {
      t.setPosition(oi.x, oi.y, oi.z);
      t.setOrientation(ci.x, ci.y, ci.z);
    }
  }
};
var Ul = class {
  constructor(e, t = 2048) {
    this.analyser = e.context.createAnalyser();
    this.analyser.fftSize = t;
    this.data = new Uint8Array(this.analyser.frequencyBinCount);
    e.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    this.analyser.getByteFrequencyData(this.data);
    return this.data;
  }
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let n = 0; n < t.length; n++) {
      e += t[n];
    }
    return e / t.length;
  }
};
var Ao = class {
  constructor(e, t, n) {
    this.binding = e;
    this.valueSize = n;
    let i, s, a;
    switch (t) {
      case "quaternion":
        i = this._slerp;
        s = this._slerpAdditive;
        a = this._setAdditiveIdentityQuaternion;
        this.buffer = new Float64Array(n * 6);
        this._workIndex = 5;
        break;
      case "string":
      case "bool":
        i = this._select;
        s = this._select;
        a = this._setAdditiveIdentityOther;
        this.buffer = new Array(n * 5);
        break;
      default:
        i = this._lerp;
        s = this._lerpAdditive;
        a = this._setAdditiveIdentityNumeric;
        this.buffer = new Float64Array(n * 5);
    }
    this._mixBufferRegion = i;
    this._mixBufferRegionAdditive = s;
    this._setIdentity = a;
    this._origIndex = 3;
    this._addIndex = 4;
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
    this.useCount = 0;
    this.referenceCount = 0;
  }
  // accumulate data in the 'incoming' region into 'accu<i>'
  accumulate(e, t) {
    const n = this.buffer, i = this.valueSize, s = e * i + i;
    let a = this.cumulativeWeight;
    if (a === 0) {
      for (let o = 0; o !== i; ++o) {
        n[s + o] = n[o];
      }
      a = t;
    } else {
      a += t;
      const o = t / a;
      this._mixBufferRegion(n, s, 0, o, i);
    }
    this.cumulativeWeight = a;
  }
  // accumulate data in the 'incoming' region into 'add'
  accumulateAdditive(e) {
    const t = this.buffer, n = this.valueSize, i = n * this._addIndex;
    if (this.cumulativeWeightAdditive === 0) {
      this._setIdentity();
    }
    this._mixBufferRegionAdditive(t, i, 0, e, n);
    this.cumulativeWeightAdditive += e;
  }
  // apply the state of 'accu<i>' to the binding when accus differ
  apply(e) {
    const t = this.valueSize, n = this.buffer, i = e * t + t, s = this.cumulativeWeight, a = this.cumulativeWeightAdditive, o = this.binding;
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
    if (s < 1) {
      const c = t * this._origIndex;
      this._mixBufferRegion(
        n,
        i,
        c,
        1 - s,
        t
      );
    }
    if (a > 0) {
      this._mixBufferRegionAdditive(n, i, this._addIndex * t, 1, t);
    }
    for (let c = t, l = t + t; c !== l; ++c) {
      if (n[c] !== n[c + t]) {
        o.setValue(n, i);
        break;
      }
    }
  }
  // remember the state of the bound property and copy it to both accus
  saveOriginalState() {
    const e = this.binding;
    const t = this.buffer, n = this.valueSize, i = n * this._origIndex;
    e.getValue(t, i);
    for (let s = n, a = i; s !== a; ++s) {
      t[s] = t[i + s % n];
    }
    this._setIdentity();
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
  }
  // apply the state previously taken via 'saveOriginalState' to the binding
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize;
    const t = e + this.valueSize;
    for (let n = e; n < t; n++) {
      this.buffer[n] = 0;
    }
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric();
    this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize;
    const t = this._addIndex * this.valueSize;
    for (let n = 0; n < this.valueSize; n++) {
      this.buffer[t + n] = this.buffer[e + n];
    }
  }
  // mix functions
  _select(e, t, n, i, s) {
    if (i >= 0.5) {
      for (let a = 0; a !== s; ++a) {
        e[t + a] = e[n + a];
      }
    }
  }
  _slerp(e, t, n, i) {
    Tt.slerpFlat(e, t, e, t, e, n, i);
  }
  _slerpAdditive(e, t, n, i, s) {
    const a = this._workIndex * s;
    Tt.multiplyQuaternionsFlat(e, a, e, t, e, n);
    Tt.slerpFlat(e, t, e, t, e, a, i);
  }
  _lerp(e, t, n, i, s) {
    const a = 1 - i;
    for (let o = 0; o !== s; ++o) {
      const c = t + o;
      e[c] = e[c] * a + e[n + o] * i;
    }
  }
  _lerpAdditive(e, t, n, i, s) {
    for (let a = 0; a !== s; ++a) {
      const o = t + a;
      e[o] = e[o] + e[n + a] * i;
    }
  }
};
var kh = "\\[\\]\\.:\\/";
var av = new RegExp("[" + kh + "]", "g");
var Vh = "[^" + kh + "]";
var ov = "[^" + kh.replace("\\.", "") + "]";
var cv = /((?:WC+[\/:])*)/.source.replace("WC", Vh);
var lv = /(WCOD+)?/.source.replace("WCOD", ov);
var hv = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", Vh);
var uv = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", Vh);
var dv = new RegExp(
  "^" + cv + lv + hv + uv + "$"
);
var fv = ["material", "materials", "bones", "map"];
var Dl = class {
  constructor(e, t, n) {
    const i = n || Je.parseTrackName(t);
    this._targetGroup = e;
    this._bindings = e.subscribe_(t, i);
  }
  getValue(e, t) {
    this.bind();
    const n = this._targetGroup.nCachedObjects_, i = this._bindings[n];
    if (i !== void 0)
      i.getValue(e, t);
  }
  setValue(e, t) {
    const n = this._bindings;
    for (let i = this._targetGroup.nCachedObjects_, s = n.length; i !== s; ++i) {
      n[i].setValue(e, t);
    }
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t) {
      e[t].bind();
    }
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t) {
      e[t].unbind();
    }
  }
};
var Je = class r {
  constructor(e, t, n) {
    this.path = t;
    this.parsedPath = n || r.parseTrackName(t);
    this.node = r.findNode(e, this.parsedPath.nodeName);
    this.rootNode = e;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
  static create(e, t, n) {
    if (!(e && e.isAnimationObjectGroup)) {
      return new r(e, t, n);
    } else {
      return new r.Composite(e, t, n);
    }
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(av, "");
  }
  static parseTrackName(e) {
    const t = dv.exec(e);
    if (t === null) {
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    }
    const n = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: t[2],
      objectName: t[3],
      objectIndex: t[4],
      propertyName: t[5],
      // required
      propertyIndex: t[6]
    };
    const i = n.nodeName && n.nodeName.lastIndexOf(".");
    if (i !== void 0 && i !== -1) {
      const s = n.nodeName.substring(i + 1);
      if (fv.indexOf(s) !== -1) {
        n.nodeName = n.nodeName.substring(0, i);
        n.objectName = s;
      }
    }
    if (n.propertyName === null || n.propertyName.length === 0) {
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    }
    return n;
  }
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid) {
      return e;
    }
    if (e.skeleton) {
      const n = e.skeleton.getBoneByName(t);
      if (n !== void 0) {
        return n;
      }
    }
    if (e.children) {
      const n = function(s) {
        for (let a = 0; a < s.length; a++) {
          const o = s[a];
          if (o.name === t || o.uuid === t) {
            return o;
          }
          const c = n(o.children);
          if (c)
            return c;
        }
        return null;
      };
      const i = n(e.children);
      if (i) {
        return i;
      }
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i) {
      e[t++] = n[i];
    }
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  // Direct
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t];
    this.targetObject.needsUpdate = true;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // EntireArray
  _setValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i) {
      n[i] = e[t++];
    }
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i) {
      n[i] = e[t++];
    }
    this.targetObject.needsUpdate = true;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i) {
      n[i] = e[t++];
    }
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // ArrayElement
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
    this.targetObject.needsUpdate = true;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // HasToFromArray
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t);
    this.targetObject.needsUpdate = true;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t);
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  _getValue_unbound(e, t) {
    this.bind();
    this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind();
    this.setValue(e, t);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let e = this.node;
    const t = this.parsedPath;
    const n = t.objectName;
    const i = t.propertyName;
    let s = t.propertyIndex;
    if (!e) {
      e = r.findNode(this.rootNode, t.nodeName);
      this.node = e;
    }
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (!e) {
      console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
      return;
    }
    if (n) {
      let l = t.objectIndex;
      switch (n) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let h = 0; h < e.length; h++) {
            if (e[h].name === l) {
              l = h;
              break;
            }
          }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[n] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[n];
      }
      if (l !== void 0) {
        if (e[l] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[l];
      }
    }
    const a = e[i];
    if (a === void 0) {
      const l = t.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + l + "." + i + " but it wasn't found.", e);
      return;
    }
    let o = this.Versioning.None;
    this.targetObject = e;
    if (e.needsUpdate !== void 0) {
      o = this.Versioning.NeedsUpdate;
    } else if (e.matrixWorldNeedsUpdate !== void 0) {
      o = this.Versioning.MatrixWorldNeedsUpdate;
    }
    let c = this.BindingType.Direct;
    if (s !== void 0) {
      if (i === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        if (e.morphTargetDictionary[s] !== void 0) {
          s = e.morphTargetDictionary[s];
        }
      }
      c = this.BindingType.ArrayElement;
      this.resolvedProperty = a;
      this.propertyIndex = s;
    } else if (a.fromArray !== void 0 && a.toArray !== void 0) {
      c = this.BindingType.HasFromToArray;
      this.resolvedProperty = a;
    } else if (Array.isArray(a)) {
      c = this.BindingType.EntireArray;
      this.resolvedProperty = a;
    } else {
      this.propertyName = i;
    }
    this.getValue = this.GetterByBindingType[c];
    this.setValue = this.SetterByBindingTypeAndVersioning[c][o];
  }
  unbind() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
};
Je.Composite = Dl;
Je.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
Je.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
Je.prototype.GetterByBindingType = [
  Je.prototype._getValue_direct,
  Je.prototype._getValue_array,
  Je.prototype._getValue_arrayElement,
  Je.prototype._getValue_toArray
];
Je.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    Je.prototype._setValue_direct,
    Je.prototype._setValue_direct_setNeedsUpdate,
    Je.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    Je.prototype._setValue_array,
    Je.prototype._setValue_array_setNeedsUpdate,
    Je.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    Je.prototype._setValue_arrayElement,
    Je.prototype._setValue_arrayElement_setNeedsUpdate,
    Je.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    Je.prototype._setValue_fromArray,
    Je.prototype._setValue_fromArray_setNeedsUpdate,
    Je.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
var Nl = class {
  constructor() {
    this.isAnimationObjectGroup = true;
    this.uuid = Bt();
    this._objects = Array.prototype.slice.call(arguments);
    this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let n = 0, i = arguments.length; n !== i; ++n) {
      e[arguments[n].uuid] = n;
    }
    this._paths = [];
    this._parsedPaths = [];
    this._bindings = [];
    this._bindingsIndicesByPath = {};
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return t._bindings.length;
      }
    };
  }
  add() {
    const e = this._objects, t = this._indicesByUUID, n = this._paths, i = this._parsedPaths, s = this._bindings, a = s.length;
    let o = void 0, c = e.length, l = this.nCachedObjects_;
    for (let h = 0, u = arguments.length; h !== u; ++h) {
      const d = arguments[h], f = d.uuid;
      let m = t[f];
      if (m === void 0) {
        m = c++;
        t[f] = m;
        e.push(d);
        for (let _ = 0, g = a; _ !== g; ++_) {
          s[_].push(new Je(d, n[_], i[_]));
        }
      } else if (m < l) {
        o = e[m];
        const _ = --l, g = e[_];
        t[g.uuid] = m;
        e[m] = g;
        t[f] = _;
        e[_] = d;
        for (let p = 0, v = a; p !== v; ++p) {
          const x = s[p], M = x[_];
          let S = x[m];
          x[m] = M;
          if (S === void 0) {
            S = new Je(d, n[p], i[p]);
          }
          x[_] = S;
        }
      } else if (e[m] !== o) {
        console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
      }
    }
    this.nCachedObjects_ = l;
  }
  remove() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length;
    let s = this.nCachedObjects_;
    for (let a = 0, o = arguments.length; a !== o; ++a) {
      const c = arguments[a], l = c.uuid, h = t[l];
      if (h !== void 0 && h >= s) {
        const u = s++, d = e[u];
        t[d.uuid] = h;
        e[h] = d;
        t[l] = u;
        e[u] = c;
        for (let f = 0, m = i; f !== m; ++f) {
          const _ = n[f], g = _[u], p = _[h];
          _[h] = g;
          _[u] = p;
        }
      }
    }
    this.nCachedObjects_ = s;
  }
  // remove & forget
  uncache() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length;
    let s = this.nCachedObjects_, a = e.length;
    for (let o = 0, c = arguments.length; o !== c; ++o) {
      const l = arguments[o], h = l.uuid, u = t[h];
      if (u !== void 0) {
        delete t[h];
        if (u < s) {
          const d = --s, f = e[d], m = --a, _ = e[m];
          t[f.uuid] = u;
          e[u] = f;
          t[_.uuid] = d;
          e[d] = _;
          e.pop();
          for (let g = 0, p = i; g !== p; ++g) {
            const v = n[g], x = v[d], M = v[m];
            v[u] = x;
            v[d] = M;
            v.pop();
          }
        } else {
          const d = --a, f = e[d];
          if (d > 0) {
            t[f.uuid] = u;
          }
          e[u] = f;
          e.pop();
          for (let m = 0, _ = i; m !== _; ++m) {
            const g = n[m];
            g[u] = g[d];
            g.pop();
          }
        }
      }
    }
    this.nCachedObjects_ = s;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, t) {
    const n = this._bindingsIndicesByPath;
    let i = n[e];
    const s = this._bindings;
    if (i !== void 0)
      return s[i];
    const a = this._paths, o = this._parsedPaths, c = this._objects, l = c.length, h = this.nCachedObjects_, u = new Array(l);
    i = s.length;
    n[e] = i;
    a.push(e);
    o.push(t);
    s.push(u);
    for (let d = h, f = c.length; d !== f; ++d) {
      const m = c[d];
      u[d] = new Je(m, e, t);
    }
    return u;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath, n = t[e];
    if (n !== void 0) {
      const i = this._paths, s = this._parsedPaths, a = this._bindings, o = a.length - 1, c = a[o], l = e[o];
      t[l] = n;
      a[n] = c;
      a.pop();
      s[n] = s[o];
      s.pop();
      i[n] = i[o];
      i.pop();
    }
  }
};
var Ro = class {
  constructor(e, t, n = null, i = t.blendMode) {
    this._mixer = e;
    this._clip = t;
    this._localRoot = n;
    this.blendMode = i;
    const s = t.tracks, a = s.length, o = new Array(a);
    const c = {
      endingStart: di,
      endingEnd: di
    };
    for (let l = 0; l !== a; ++l) {
      const h = s[l].createInterpolant(null);
      o[l] = h;
      h.settings = c;
    }
    this._interpolantSettings = c;
    this._interpolants = o;
    this._propertyBindings = new Array(a);
    this._cacheIndex = null;
    this._byClipCacheIndex = null;
    this._timeScaleInterpolant = null;
    this._weightInterpolant = null;
    this.loop = cf;
    this._loopCount = -1;
    this._startTime = null;
    this.time = 0;
    this.timeScale = 1;
    this._effectiveTimeScale = 1;
    this.weight = 1;
    this._effectiveWeight = 1;
    this.repetitions = Infinity;
    this.paused = false;
    this.enabled = true;
    this.clampWhenFinished = false;
    this.zeroSlopeAtStart = true;
    this.zeroSlopeAtEnd = true;
  }
  // State & Scheduling
  play() {
    this._mixer._activateAction(this);
    return this;
  }
  stop() {
    this._mixer._deactivateAction(this);
    return this.reset();
  }
  reset() {
    this.paused = false;
    this.enabled = true;
    this.time = 0;
    this._loopCount = -1;
    this._startTime = null;
    return this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  // return true when play has been called
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(e) {
    this._startTime = e;
    return this;
  }
  setLoop(e, t) {
    this.loop = e;
    this.repetitions = t;
    return this;
  }
  // Weight
  // set the weight stopping any scheduled fading
  // although .enabled = false yields an effective weight of zero, this
  // method does *not* change .enabled, because it would be confusing
  setEffectiveWeight(e) {
    this.weight = e;
    this._effectiveWeight = this.enabled ? e : 0;
    return this.stopFading();
  }
  // return the weight considering fading and .enabled
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  crossFadeFrom(e, t, n) {
    e.fadeOut(t);
    this.fadeIn(t);
    if (n) {
      const i = this._clip.duration, s = e._clip.duration, a = s / i, o = i / s;
      e.warp(1, a, t);
      this.warp(o, 1, t);
    }
    return this;
  }
  crossFadeTo(e, t, n) {
    return e.crossFadeFrom(this, t, n);
  }
  stopFading() {
    const e = this._weightInterpolant;
    if (e !== null) {
      this._weightInterpolant = null;
      this._mixer._takeBackControlInterpolant(e);
    }
    return this;
  }
  // Time Scale Control
  // set the time scale stopping any scheduled warping
  // although .paused = true yields an effective time scale of zero, this
  // method does *not* change .paused, because it would be confusing
  setEffectiveTimeScale(e) {
    this.timeScale = e;
    this._effectiveTimeScale = this.paused ? 0 : e;
    return this.stopWarping();
  }
  // return the time scale considering warping and .paused
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(e) {
    this.timeScale = this._clip.duration / e;
    return this.stopWarping();
  }
  syncWith(e) {
    this.time = e.time;
    this.timeScale = e.timeScale;
    return this.stopWarping();
  }
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  warp(e, t, n) {
    const i = this._mixer, s = i.time, a = this.timeScale;
    let o = this._timeScaleInterpolant;
    if (o === null) {
      o = i._lendControlInterpolant();
      this._timeScaleInterpolant = o;
    }
    const c = o.parameterPositions, l = o.sampleValues;
    c[0] = s;
    c[1] = s + n;
    l[0] = e / a;
    l[1] = t / a;
    return this;
  }
  stopWarping() {
    const e = this._timeScaleInterpolant;
    if (e !== null) {
      this._timeScaleInterpolant = null;
      this._mixer._takeBackControlInterpolant(e);
    }
    return this;
  }
  // Object Accessors
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, t, n, i) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const s = this._startTime;
    if (s !== null) {
      const c = (e - s) * n;
      if (c < 0 || n === 0) {
        t = 0;
      } else {
        this._startTime = null;
        t = n * c;
      }
    }
    t *= this._updateTimeScale(e);
    const a = this._updateTime(t);
    const o = this._updateWeight(e);
    if (o > 0) {
      const c = this._interpolants;
      const l = this._propertyBindings;
      switch (this.blendMode) {
        case Lh:
          for (let h = 0, u = c.length; h !== u; ++h) {
            c[h].evaluate(a);
            l[h].accumulateAdditive(o);
          }
          break;
        case Lo:
        default:
          for (let h = 0, u = c.length; h !== u; ++h) {
            c[h].evaluate(a);
            l[h].accumulate(i, o);
          }
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const n = this._weightInterpolant;
      if (n !== null) {
        const i = n.evaluate(e)[0];
        t *= i;
        if (e > n.parameterPositions[1]) {
          this.stopFading();
          if (i === 0) {
            this.enabled = false;
          }
        }
      }
    }
    this._effectiveWeight = t;
    return t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const n = this._timeScaleInterpolant;
      if (n !== null) {
        const i = n.evaluate(e)[0];
        t *= i;
        if (e > n.parameterPositions[1]) {
          this.stopWarping();
          if (t === 0) {
            this.paused = true;
          } else {
            this.timeScale = t;
          }
        }
      }
    }
    this._effectiveTimeScale = t;
    return t;
  }
  _updateTime(e) {
    const t = this._clip.duration;
    const n = this.loop;
    let i = this.time + e;
    let s = this._loopCount;
    const a = n === lf;
    if (e === 0) {
      if (s === -1)
        return i;
      return a && (s & 1) === 1 ? t - i : i;
    }
    if (n === of) {
      if (s === -1) {
        this._loopCount = 0;
        this._setEndings(true, true, false);
      }
      e: {
        if (i >= t) {
          i = t;
        } else if (i < 0) {
          i = 0;
        } else {
          this.time = i;
          break e;
        }
        if (this.clampWhenFinished)
          this.paused = true;
        else
          this.enabled = false;
        this.time = i;
        this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (s === -1) {
        if (e >= 0) {
          s = 0;
          this._setEndings(true, this.repetitions === 0, a);
        } else {
          this._setEndings(this.repetitions === 0, true, a);
        }
      }
      if (i >= t || i < 0) {
        const o = Math.floor(i / t);
        i -= t * o;
        s += Math.abs(o);
        const c = this.repetitions - s;
        if (c <= 0) {
          if (this.clampWhenFinished)
            this.paused = true;
          else
            this.enabled = false;
          i = e > 0 ? t : 0;
          this.time = i;
          this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        } else {
          if (c === 1) {
            const l = e < 0;
            this._setEndings(l, !l, a);
          } else {
            this._setEndings(false, false, a);
          }
          this._loopCount = s;
          this.time = i;
          this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: o
          });
        }
      } else {
        this.time = i;
      }
      if (a && (s & 1) === 1) {
        return t - i;
      }
    }
    return i;
  }
  _setEndings(e, t, n) {
    const i = this._interpolantSettings;
    if (n) {
      i.endingStart = fi;
      i.endingEnd = fi;
    } else {
      if (e) {
        i.endingStart = this.zeroSlopeAtStart ? fi : di;
      } else {
        i.endingStart = Ys;
      }
      if (t) {
        i.endingEnd = this.zeroSlopeAtEnd ? fi : di;
      } else {
        i.endingEnd = Ys;
      }
    }
  }
  _scheduleFading(e, t, n) {
    const i = this._mixer, s = i.time;
    let a = this._weightInterpolant;
    if (a === null) {
      a = i._lendControlInterpolant();
      this._weightInterpolant = a;
    }
    const o = a.parameterPositions, c = a.sampleValues;
    o[0] = s;
    c[0] = t;
    o[1] = s + e;
    c[1] = n;
    return this;
  }
};
var pv = new Float32Array(1);
var Fl = class extends nn {
  constructor(e) {
    super();
    this._root = e;
    this._initMemoryManager();
    this._accuIndex = 0;
    this.time = 0;
    this.timeScale = 1;
  }
  _bindAction(e, t) {
    const n = e._localRoot || this._root, i = e._clip.tracks, s = i.length, a = e._propertyBindings, o = e._interpolants, c = n.uuid, l = this._bindingsByRootAndName;
    let h = l[c];
    if (h === void 0) {
      h = {};
      l[c] = h;
    }
    for (let u = 0; u !== s; ++u) {
      const d = i[u], f = d.name;
      let m = h[f];
      if (m !== void 0) {
        ++m.referenceCount;
        a[u] = m;
      } else {
        m = a[u];
        if (m !== void 0) {
          if (m._cacheIndex === null) {
            ++m.referenceCount;
            this._addInactiveBinding(m, c, f);
          }
          continue;
        }
        const _ = t && t._propertyBindings[u].binding.parsedPath;
        m = new Ao(
          Je.create(n, f, _),
          d.ValueTypeName,
          d.getValueSize()
        );
        ++m.referenceCount;
        this._addInactiveBinding(m, c, f);
        a[u] = m;
      }
      o[u].resultBuffer = m.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const n = (e._localRoot || this._root).uuid, i = e._clip.uuid, s = this._actionsByClip[i];
        this._bindAction(
          e,
          s && s.knownActions[0]
        );
        this._addInactiveAction(e, i, n);
      }
      const t = e._propertyBindings;
      for (let n = 0, i = t.length; n !== i; ++n) {
        const s = t[n];
        if (s.useCount++ === 0) {
          this._lendBinding(s);
          s.saveOriginalState();
        }
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let n = 0, i = t.length; n !== i; ++n) {
        const s = t[n];
        if (--s.useCount === 0) {
          s.restoreOriginalState();
          this._takeBackBinding(s);
        }
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [];
    this._nActiveActions = 0;
    this._actionsByClip = {};
    this._bindings = [];
    this._nActiveBindings = 0;
    this._bindingsByRootAndName = {};
    this._controlInterpolants = [];
    this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, n) {
    const i = this._actions, s = this._actionsByClip;
    let a = s[t];
    if (a === void 0) {
      a = {
        knownActions: [e],
        actionByRoot: {}
      };
      e._byClipCacheIndex = 0;
      s[t] = a;
    } else {
      const o = a.knownActions;
      e._byClipCacheIndex = o.length;
      o.push(e);
    }
    e._cacheIndex = i.length;
    i.push(e);
    a.actionByRoot[n] = e;
  }
  _removeInactiveAction(e) {
    const t = this._actions, n = t[t.length - 1], i = e._cacheIndex;
    n._cacheIndex = i;
    t[i] = n;
    t.pop();
    e._cacheIndex = null;
    const s = e._clip.uuid, a = this._actionsByClip, o = a[s], c = o.knownActions, l = c[c.length - 1], h = e._byClipCacheIndex;
    l._byClipCacheIndex = h;
    c[h] = l;
    c.pop();
    e._byClipCacheIndex = null;
    const u = o.actionByRoot, d = (e._localRoot || this._root).uuid;
    delete u[d];
    if (c.length === 0) {
      delete a[s];
    }
    this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let n = 0, i = t.length; n !== i; ++n) {
      const s = t[n];
      if (--s.referenceCount === 0) {
        this._removeInactiveBinding(s);
      }
    }
  }
  _lendAction(e) {
    const t = this._actions, n = e._cacheIndex, i = this._nActiveActions++, s = t[i];
    e._cacheIndex = i;
    t[i] = e;
    s._cacheIndex = n;
    t[n] = s;
  }
  _takeBackAction(e) {
    const t = this._actions, n = e._cacheIndex, i = --this._nActiveActions, s = t[i];
    e._cacheIndex = i;
    t[i] = e;
    s._cacheIndex = n;
    t[n] = s;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, t, n) {
    const i = this._bindingsByRootAndName, s = this._bindings;
    let a = i[t];
    if (a === void 0) {
      a = {};
      i[t] = a;
    }
    a[n] = e;
    e._cacheIndex = s.length;
    s.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings, n = e.binding, i = n.rootNode.uuid, s = n.path, a = this._bindingsByRootAndName, o = a[i], c = t[t.length - 1], l = e._cacheIndex;
    c._cacheIndex = l;
    t[l] = c;
    t.pop();
    delete o[s];
    if (Object.keys(o).length === 0) {
      delete a[i];
    }
  }
  _lendBinding(e) {
    const t = this._bindings, n = e._cacheIndex, i = this._nActiveBindings++, s = t[i];
    e._cacheIndex = i;
    t[i] = e;
    s._cacheIndex = n;
    t[n] = s;
  }
  _takeBackBinding(e) {
    const t = this._bindings, n = e._cacheIndex, i = --this._nActiveBindings, s = t[i];
    e._cacheIndex = i;
    t[i] = e;
    s._cacheIndex = n;
    t[n] = s;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, t = this._nActiveControlInterpolants++;
    let n = e[t];
    if (n === void 0) {
      n = new Rr(
        new Float32Array(2),
        new Float32Array(2),
        1,
        pv
      );
      n.__cacheIndex = t;
      e[t] = n;
    }
    return n;
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants, n = e.__cacheIndex, i = --this._nActiveControlInterpolants, s = t[i];
    e.__cacheIndex = i;
    t[i] = e;
    s.__cacheIndex = n;
    t[n] = s;
  }
  // return an action for a clip optionally using a custom root target
  // object (this method allocates a lot of dynamic memory in case a
  // previously unknown clip/root combination is specified)
  clipAction(e, t, n) {
    const i = t || this._root, s = i.uuid;
    let a = typeof e === "string" ? Ri.findByName(i, e) : e;
    const o = a !== null ? a.uuid : e;
    const c = this._actionsByClip[o];
    let l = null;
    if (n === void 0) {
      if (a !== null) {
        n = a.blendMode;
      } else {
        n = Lo;
      }
    }
    if (c !== void 0) {
      const u = c.actionByRoot[s];
      if (u !== void 0 && u.blendMode === n) {
        return u;
      }
      l = c.knownActions[0];
      if (a === null)
        a = l._clip;
    }
    if (a === null)
      return null;
    const h = new Ro(this, a, t, n);
    this._bindAction(h, l);
    this._addInactiveAction(h, o, s);
    return h;
  }
  // get an existing action
  existingAction(e, t) {
    const n = t || this._root, i = n.uuid, s = typeof e === "string" ? Ri.findByName(n, e) : e, a = s ? s.uuid : e, o = this._actionsByClip[a];
    if (o !== void 0) {
      return o.actionByRoot[i] || null;
    }
    return null;
  }
  // deactivates all previously scheduled actions
  stopAllAction() {
    const e = this._actions, t = this._nActiveActions;
    for (let n = t - 1; n >= 0; --n) {
      e[n].stop();
    }
    return this;
  }
  // advance the time and update apply the animation
  update(e) {
    e *= this.timeScale;
    const t = this._actions, n = this._nActiveActions, i = this.time += e, s = Math.sign(e), a = this._accuIndex ^= 1;
    for (let l = 0; l !== n; ++l) {
      const h = t[l];
      h._update(i, e, s, a);
    }
    const o = this._bindings, c = this._nActiveBindings;
    for (let l = 0; l !== c; ++l) {
      o[l].apply(a);
    }
    return this;
  }
  // Allows you to seek to a specific time in an animation.
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++) {
      this._actions[t].time = 0;
    }
    return this.update(e);
  }
  // return this mixer's root target object
  getRoot() {
    return this._root;
  }
  // free all resources specific to a particular clip
  uncacheClip(e) {
    const t = this._actions, n = e.uuid, i = this._actionsByClip, s = i[n];
    if (s !== void 0) {
      const a = s.knownActions;
      for (let o = 0, c = a.length; o !== c; ++o) {
        const l = a[o];
        this._deactivateAction(l);
        const h = l._cacheIndex, u = t[t.length - 1];
        l._cacheIndex = null;
        l._byClipCacheIndex = null;
        u._cacheIndex = h;
        t[h] = u;
        t.pop();
        this._removeInactiveBindingsForAction(l);
      }
      delete i[n];
    }
  }
  // free all resources specific to a particular root target object
  uncacheRoot(e) {
    const t = e.uuid, n = this._actionsByClip;
    for (const a in n) {
      const o = n[a].actionByRoot, c = o[t];
      if (c !== void 0) {
        this._deactivateAction(c);
        this._removeInactiveAction(c);
      }
    }
    const i = this._bindingsByRootAndName, s = i[t];
    if (s !== void 0) {
      for (const a in s) {
        const o = s[a];
        o.restoreOriginalState();
        this._removeInactiveBinding(o);
      }
    }
  }
  // remove a targeted clip from the cache
  uncacheAction(e, t) {
    const n = this.existingAction(e, t);
    if (n !== null) {
      this._deactivateAction(n);
      this._removeInactiveAction(n);
    }
  }
};
var Ol = class r {
  constructor(e) {
    this.value = e;
  }
  clone() {
    return new r(this.value.clone === void 0 ? this.value : this.value.clone());
  }
};
var mv = 0;
var Bl = class extends nn {
  constructor() {
    super();
    this.isUniformsGroup = true;
    Object.defineProperty(this, "id", { value: mv++ });
    this.name = "";
    this.usage = Zs;
    this.uniforms = [];
  }
  add(e) {
    this.uniforms.push(e);
    return this;
  }
  remove(e) {
    const t = this.uniforms.indexOf(e);
    if (t !== -1)
      this.uniforms.splice(t, 1);
    return this;
  }
  setName(e) {
    this.name = e;
    return this;
  }
  setUsage(e) {
    this.usage = e;
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
    return this;
  }
  copy(e) {
    this.name = e.name;
    this.usage = e.usage;
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let n = 0, i = t.length; n < i; n++) {
      this.uniforms.push(t[n].clone());
    }
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var zl = class extends fs {
  constructor(e, t, n = 1) {
    super(e, t);
    this.isInstancedInterleavedBuffer = true;
    this.meshPerAttribute = n;
  }
  copy(e) {
    super.copy(e);
    this.meshPerAttribute = e.meshPerAttribute;
    return this;
  }
  clone(e) {
    const t = super.clone(e);
    t.meshPerAttribute = this.meshPerAttribute;
    return t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.isInstancedInterleavedBuffer = true;
    t.meshPerAttribute = this.meshPerAttribute;
    return t;
  }
};
var kl = class {
  constructor(e, t, n, i, s) {
    this.isGLBufferAttribute = true;
    this.name = "";
    this.buffer = e;
    this.type = t;
    this.itemSize = n;
    this.elementSize = i;
    this.count = s;
    this.version = 0;
  }
  set needsUpdate(e) {
    if (e === true)
      this.version++;
  }
  setBuffer(e) {
    this.buffer = e;
    return this;
  }
  setType(e, t) {
    this.type = e;
    this.elementSize = t;
    return this;
  }
  setItemSize(e) {
    this.itemSize = e;
    return this;
  }
  setCount(e) {
    this.count = e;
    return this;
  }
};
var Vl = class {
  constructor(e, t, n = 0, i = Infinity) {
    this.ray = new vi(e, t);
    this.near = n;
    this.far = i;
    this.camera = null;
    this.layers = new os();
    this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    if (t.isPerspectiveCamera) {
      this.ray.origin.setFromMatrixPosition(t.matrixWorld);
      this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize();
      this.camera = t;
    } else if (t.isOrthographicCamera) {
      this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t);
      this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld);
      this.camera = t;
    } else {
      console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
    }
  }
  intersectObject(e, t = true, n = []) {
    Hl(e, this, n, t);
    n.sort(od);
    return n;
  }
  intersectObjects(e, t = true, n = []) {
    for (let i = 0, s = e.length; i < s; i++) {
      Hl(e[i], this, n, t);
    }
    n.sort(od);
    return n;
  }
};
function od(r, e) {
  return r.distance - e.distance;
}
function Hl(r, e, t, n) {
  if (r.layers.test(e.layers)) {
    r.raycast(e, t);
  }
  if (n === true) {
    const i = r.children;
    for (let s = 0, a = i.length; s < a; s++) {
      Hl(i[s], e, t, true);
    }
  }
}
var Gl = class {
  constructor(e = 1, t = 0, n = 0) {
    this.radius = e;
    this.phi = t;
    this.theta = n;
    return this;
  }
  set(e, t, n) {
    this.radius = e;
    this.phi = t;
    this.theta = n;
    return this;
  }
  copy(e) {
    this.radius = e.radius;
    this.phi = e.phi;
    this.theta = e.theta;
    return this;
  }
  // restrict phi to be between EPS and PI-EPS
  makeSafe() {
    const e = 1e-6;
    this.phi = Math.max(e, Math.min(Math.PI - e, this.phi));
    return this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    this.radius = Math.sqrt(e * e + t * t + n * n);
    if (this.radius === 0) {
      this.theta = 0;
      this.phi = 0;
    } else {
      this.theta = Math.atan2(e, n);
      this.phi = Math.acos(st(t / this.radius, -1, 1));
    }
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var Wl = class {
  constructor(e = 1, t = 0, n = 0) {
    this.radius = e;
    this.theta = t;
    this.y = n;
    return this;
  }
  set(e, t, n) {
    this.radius = e;
    this.theta = t;
    this.y = n;
    return this;
  }
  copy(e) {
    this.radius = e.radius;
    this.theta = e.theta;
    this.y = e.y;
    return this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    this.radius = Math.sqrt(e * e + n * n);
    this.theta = Math.atan2(e, n);
    this.y = t;
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var cd = new $();
var Xl = class {
  constructor(e = new $(Infinity, Infinity), t = new $(-Infinity, -Infinity)) {
    this.isBox2 = true;
    this.min = e;
    this.max = t;
  }
  set(e, t) {
    this.min.copy(e);
    this.max.copy(t);
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++) {
      this.expandByPoint(e[t]);
    }
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = cd.copy(t).multiplyScalar(0.5);
    this.min.copy(e).sub(n);
    this.max.copy(e).add(n);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.min.copy(e.min);
    this.max.copy(e.max);
    return this;
  }
  makeEmpty() {
    this.min.x = this.min.y = Infinity;
    this.max.x = this.max.y = -Infinity;
    return this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    this.min.min(e);
    this.max.max(e);
    return this;
  }
  expandByVector(e) {
    this.min.sub(e);
    this.max.add(e);
    return this;
  }
  expandByScalar(e) {
    this.min.addScalar(-e);
    this.max.addScalar(e);
    return this;
  }
  containsPoint(e) {
    return e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y ? false : true;
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  intersectsBox(e) {
    return e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y ? false : true;
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, cd).distanceTo(e);
  }
  intersect(e) {
    this.min.max(e.min);
    this.max.min(e.max);
    if (this.isEmpty())
      this.makeEmpty();
    return this;
  }
  union(e) {
    this.min.min(e.min);
    this.max.max(e.max);
    return this;
  }
  translate(e) {
    this.min.add(e);
    this.max.add(e);
    return this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
};
var ld = new w();
var _a = new w();
var ql = class {
  constructor(e = new w(), t = new w()) {
    this.start = e;
    this.end = t;
  }
  set(e, t) {
    this.start.copy(e);
    this.end.copy(t);
    return this;
  }
  copy(e) {
    this.start.copy(e.start);
    this.end.copy(e.end);
    return this;
  }
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  closestPointToPointParameter(e, t) {
    ld.subVectors(e, this.start);
    _a.subVectors(this.end, this.start);
    const n = _a.dot(_a);
    const i = _a.dot(ld);
    let s = i / n;
    if (t) {
      s = st(s, 0, 1);
    }
    return s;
  }
  closestPointToPoint(e, t, n) {
    const i = this.closestPointToPointParameter(e, t);
    return this.delta(n).multiplyScalar(i).add(this.start);
  }
  applyMatrix4(e) {
    this.start.applyMatrix4(e);
    this.end.applyMatrix4(e);
    return this;
  }
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var hd = new w();
var Yl = class extends Ze {
  constructor(e, t) {
    super();
    this.light = e;
    this.matrix = e.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = t;
    this.type = "SpotLightHelper";
    const n = new ze();
    const i = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let a = 0, o = 1, c = 32; a < c; a++, o++) {
      const l = a / c * Math.PI * 2;
      const h = o / c * Math.PI * 2;
      i.push(
        Math.cos(l),
        Math.sin(l),
        1,
        Math.cos(h),
        Math.sin(h),
        1
      );
    }
    n.setAttribute("position", new xe(i, 3));
    const s = new yt({ fog: false, toneMapped: false });
    this.cone = new Jt(n, s);
    this.add(this.cone);
    this.update();
  }
  dispose() {
    this.cone.geometry.dispose();
    this.cone.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(true, false);
    this.light.target.updateWorldMatrix(true, false);
    const e = this.light.distance ? this.light.distance : 1e3;
    const t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e);
    hd.setFromMatrixPosition(this.light.target.matrixWorld);
    this.cone.lookAt(hd);
    if (this.color !== void 0) {
      this.cone.material.color.set(this.color);
    } else {
      this.cone.material.color.copy(this.light.color);
    }
  }
};
var On = new w();
var xa = new Ne();
var dc = new Ne();
var Zl = class extends Jt {
  constructor(e) {
    const t = If(e);
    const n = new ze();
    const i = [];
    const s = [];
    const a = new de(0, 0, 1);
    const o = new de(0, 1, 0);
    for (let l = 0; l < t.length; l++) {
      const h = t[l];
      if (h.parent && h.parent.isBone) {
        i.push(0, 0, 0);
        i.push(0, 0, 0);
        s.push(a.r, a.g, a.b);
        s.push(o.r, o.g, o.b);
      }
    }
    n.setAttribute("position", new xe(i, 3));
    n.setAttribute("color", new xe(s, 3));
    const c = new yt({ vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true });
    super(n, c);
    this.isSkeletonHelper = true;
    this.type = "SkeletonHelper";
    this.root = e;
    this.bones = t;
    this.matrix = e.matrixWorld;
    this.matrixAutoUpdate = false;
  }
  updateMatrixWorld(e) {
    const t = this.bones;
    const n = this.geometry;
    const i = n.getAttribute("position");
    dc.copy(this.root.matrixWorld).invert();
    for (let s = 0, a = 0; s < t.length; s++) {
      const o = t[s];
      if (o.parent && o.parent.isBone) {
        xa.multiplyMatrices(dc, o.matrixWorld);
        On.setFromMatrixPosition(xa);
        i.setXYZ(a, On.x, On.y, On.z);
        xa.multiplyMatrices(dc, o.parent.matrixWorld);
        On.setFromMatrixPosition(xa);
        i.setXYZ(a + 1, On.x, On.y, On.z);
        a += 2;
      }
    }
    n.getAttribute("position").needsUpdate = true;
    super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
};
function If(r) {
  const e = [];
  if (r.isBone === true) {
    e.push(r);
  }
  for (let t = 0; t < r.children.length; t++) {
    e.push.apply(e, If(r.children[t]));
  }
  return e;
}
var Jl = class extends ft {
  constructor(e, t, n) {
    const i = new xs(t, 4, 2);
    const s = new dn({ wireframe: true, fog: false, toneMapped: false });
    super(i, s);
    this.light = e;
    this.color = n;
    this.type = "PointLightHelper";
    this.matrix = this.light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.update();
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(true, false);
    if (this.color !== void 0) {
      this.material.color.set(this.color);
    } else {
      this.material.color.copy(this.light.color);
    }
  }
};
var gv = new w();
var ud = new de();
var dd = new de();
var $l = class extends Ze {
  constructor(e, t, n) {
    super();
    this.light = e;
    this.matrix = e.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = n;
    this.type = "HemisphereLightHelper";
    const i = new _s(t);
    i.rotateY(Math.PI * 0.5);
    this.material = new dn({ wireframe: true, fog: false, toneMapped: false });
    if (this.color === void 0)
      this.material.vertexColors = true;
    const s = i.getAttribute("position");
    const a = new Float32Array(s.count * 3);
    i.setAttribute("color", new Ke(a, 3));
    this.add(new ft(i, this.material));
    this.update();
  }
  dispose() {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  }
  update() {
    const e = this.children[0];
    if (this.color !== void 0) {
      this.material.color.set(this.color);
    } else {
      const t = e.geometry.getAttribute("color");
      ud.copy(this.light.color);
      dd.copy(this.light.groundColor);
      for (let n = 0, i = t.count; n < i; n++) {
        const s = n < i / 2 ? ud : dd;
        t.setXYZ(n, s.r, s.g, s.b);
      }
      t.needsUpdate = true;
    }
    this.light.updateWorldMatrix(true, false);
    e.lookAt(gv.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
};
var Kl = class extends Jt {
  constructor(e = 10, t = 10, n = 4473924, i = 8947848) {
    n = new de(n);
    i = new de(i);
    const s = t / 2;
    const a = e / t;
    const o = e / 2;
    const c = [], l = [];
    for (let d = 0, f = 0, m = -o; d <= t; d++, m += a) {
      c.push(-o, 0, m, o, 0, m);
      c.push(m, 0, -o, m, 0, o);
      const _ = d === s ? n : i;
      _.toArray(l, f);
      f += 3;
      _.toArray(l, f);
      f += 3;
      _.toArray(l, f);
      f += 3;
      _.toArray(l, f);
      f += 3;
    }
    const h = new ze();
    h.setAttribute("position", new xe(c, 3));
    h.setAttribute("color", new xe(l, 3));
    const u = new yt({ vertexColors: true, toneMapped: false });
    super(h, u);
    this.type = "GridHelper";
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
};
var jl = class extends Jt {
  constructor(e = 10, t = 16, n = 8, i = 64, s = 4473924, a = 8947848) {
    s = new de(s);
    a = new de(a);
    const o = [];
    const c = [];
    if (t > 1) {
      for (let u = 0; u < t; u++) {
        const d = u / t * (Math.PI * 2);
        const f = Math.sin(d) * e;
        const m = Math.cos(d) * e;
        o.push(0, 0, 0);
        o.push(f, 0, m);
        const _ = u & 1 ? s : a;
        c.push(_.r, _.g, _.b);
        c.push(_.r, _.g, _.b);
      }
    }
    for (let u = 0; u < n; u++) {
      const d = u & 1 ? s : a;
      const f = e - e / n * u;
      for (let m = 0; m < i; m++) {
        let _ = m / i * (Math.PI * 2);
        let g = Math.sin(_) * f;
        let p = Math.cos(_) * f;
        o.push(g, 0, p);
        c.push(d.r, d.g, d.b);
        _ = (m + 1) / i * (Math.PI * 2);
        g = Math.sin(_) * f;
        p = Math.cos(_) * f;
        o.push(g, 0, p);
        c.push(d.r, d.g, d.b);
      }
    }
    const l = new ze();
    l.setAttribute("position", new xe(o, 3));
    l.setAttribute("color", new xe(c, 3));
    const h = new yt({ vertexColors: true, toneMapped: false });
    super(l, h);
    this.type = "PolarGridHelper";
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
};
var fd = new w();
var va = new w();
var pd = new w();
var Ql = class extends Ze {
  constructor(e, t, n) {
    super();
    this.light = e;
    this.matrix = e.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = n;
    this.type = "DirectionalLightHelper";
    if (t === void 0)
      t = 1;
    let i = new ze();
    i.setAttribute("position", new xe([
      -t,
      t,
      0,
      t,
      t,
      0,
      t,
      -t,
      0,
      -t,
      -t,
      0,
      -t,
      t,
      0
    ], 3));
    const s = new yt({ fog: false, toneMapped: false });
    this.lightPlane = new fn(i, s);
    this.add(this.lightPlane);
    i = new ze();
    i.setAttribute("position", new xe([0, 0, 0, 0, 0, 1], 3));
    this.targetLine = new fn(i, s);
    this.add(this.targetLine);
    this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose();
    this.lightPlane.material.dispose();
    this.targetLine.geometry.dispose();
    this.targetLine.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(true, false);
    this.light.target.updateWorldMatrix(true, false);
    fd.setFromMatrixPosition(this.light.matrixWorld);
    va.setFromMatrixPosition(this.light.target.matrixWorld);
    pd.subVectors(va, fd);
    this.lightPlane.lookAt(va);
    if (this.color !== void 0) {
      this.lightPlane.material.color.set(this.color);
      this.targetLine.material.color.set(this.color);
    } else {
      this.lightPlane.material.color.copy(this.light.color);
      this.targetLine.material.color.copy(this.light.color);
    }
    this.targetLine.lookAt(va);
    this.targetLine.scale.z = pd.length();
  }
};
var ya = new w();
var it = new ls();
var eh = class extends Jt {
  constructor(e) {
    const t = new ze();
    const n = new yt({ color: 16777215, vertexColors: true, toneMapped: false });
    const i = [];
    const s = [];
    const a = {};
    o("n1", "n2");
    o("n2", "n4");
    o("n4", "n3");
    o("n3", "n1");
    o("f1", "f2");
    o("f2", "f4");
    o("f4", "f3");
    o("f3", "f1");
    o("n1", "f1");
    o("n2", "f2");
    o("n3", "f3");
    o("n4", "f4");
    o("p", "n1");
    o("p", "n2");
    o("p", "n3");
    o("p", "n4");
    o("u1", "u2");
    o("u2", "u3");
    o("u3", "u1");
    o("c", "t");
    o("p", "c");
    o("cn1", "cn2");
    o("cn3", "cn4");
    o("cf1", "cf2");
    o("cf3", "cf4");
    function o(m, _) {
      c(m);
      c(_);
    }
    function c(m) {
      i.push(0, 0, 0);
      s.push(0, 0, 0);
      if (a[m] === void 0) {
        a[m] = [];
      }
      a[m].push(i.length / 3 - 1);
    }
    t.setAttribute("position", new xe(i, 3));
    t.setAttribute("color", new xe(s, 3));
    super(t, n);
    this.type = "CameraHelper";
    this.camera = e;
    if (this.camera.updateProjectionMatrix)
      this.camera.updateProjectionMatrix();
    this.matrix = e.matrixWorld;
    this.matrixAutoUpdate = false;
    this.pointMap = a;
    this.update();
    const l = new de(16755200);
    const h = new de(16711680);
    const u = new de(43775);
    const d = new de(16777215);
    const f = new de(3355443);
    this.setColors(l, h, u, d, f);
  }
  setColors(e, t, n, i, s) {
    const a = this.geometry;
    const o = a.getAttribute("color");
    o.setXYZ(0, e.r, e.g, e.b);
    o.setXYZ(1, e.r, e.g, e.b);
    o.setXYZ(2, e.r, e.g, e.b);
    o.setXYZ(3, e.r, e.g, e.b);
    o.setXYZ(4, e.r, e.g, e.b);
    o.setXYZ(5, e.r, e.g, e.b);
    o.setXYZ(6, e.r, e.g, e.b);
    o.setXYZ(7, e.r, e.g, e.b);
    o.setXYZ(8, e.r, e.g, e.b);
    o.setXYZ(9, e.r, e.g, e.b);
    o.setXYZ(10, e.r, e.g, e.b);
    o.setXYZ(11, e.r, e.g, e.b);
    o.setXYZ(12, e.r, e.g, e.b);
    o.setXYZ(13, e.r, e.g, e.b);
    o.setXYZ(14, e.r, e.g, e.b);
    o.setXYZ(15, e.r, e.g, e.b);
    o.setXYZ(16, e.r, e.g, e.b);
    o.setXYZ(17, e.r, e.g, e.b);
    o.setXYZ(18, e.r, e.g, e.b);
    o.setXYZ(19, e.r, e.g, e.b);
    o.setXYZ(20, e.r, e.g, e.b);
    o.setXYZ(21, e.r, e.g, e.b);
    o.setXYZ(22, e.r, e.g, e.b);
    o.setXYZ(23, e.r, e.g, e.b);
    o.setXYZ(24, t.r, t.g, t.b);
    o.setXYZ(25, t.r, t.g, t.b);
    o.setXYZ(26, t.r, t.g, t.b);
    o.setXYZ(27, t.r, t.g, t.b);
    o.setXYZ(28, t.r, t.g, t.b);
    o.setXYZ(29, t.r, t.g, t.b);
    o.setXYZ(30, t.r, t.g, t.b);
    o.setXYZ(31, t.r, t.g, t.b);
    o.setXYZ(32, n.r, n.g, n.b);
    o.setXYZ(33, n.r, n.g, n.b);
    o.setXYZ(34, n.r, n.g, n.b);
    o.setXYZ(35, n.r, n.g, n.b);
    o.setXYZ(36, n.r, n.g, n.b);
    o.setXYZ(37, n.r, n.g, n.b);
    o.setXYZ(38, i.r, i.g, i.b);
    o.setXYZ(39, i.r, i.g, i.b);
    o.setXYZ(40, s.r, s.g, s.b);
    o.setXYZ(41, s.r, s.g, s.b);
    o.setXYZ(42, s.r, s.g, s.b);
    o.setXYZ(43, s.r, s.g, s.b);
    o.setXYZ(44, s.r, s.g, s.b);
    o.setXYZ(45, s.r, s.g, s.b);
    o.setXYZ(46, s.r, s.g, s.b);
    o.setXYZ(47, s.r, s.g, s.b);
    o.setXYZ(48, s.r, s.g, s.b);
    o.setXYZ(49, s.r, s.g, s.b);
    o.needsUpdate = true;
  }
  update() {
    const e = this.geometry;
    const t = this.pointMap;
    const n = 1, i = 1;
    it.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
    ot("c", t, e, it, 0, 0, -1);
    ot("t", t, e, it, 0, 0, 1);
    ot("n1", t, e, it, -n, -i, -1);
    ot("n2", t, e, it, n, -i, -1);
    ot("n3", t, e, it, -n, i, -1);
    ot("n4", t, e, it, n, i, -1);
    ot("f1", t, e, it, -n, -i, 1);
    ot("f2", t, e, it, n, -i, 1);
    ot("f3", t, e, it, -n, i, 1);
    ot("f4", t, e, it, n, i, 1);
    ot("u1", t, e, it, n * 0.7, i * 1.1, -1);
    ot("u2", t, e, it, -n * 0.7, i * 1.1, -1);
    ot("u3", t, e, it, 0, i * 2, -1);
    ot("cf1", t, e, it, -n, 0, 1);
    ot("cf2", t, e, it, n, 0, 1);
    ot("cf3", t, e, it, 0, -i, 1);
    ot("cf4", t, e, it, 0, i, 1);
    ot("cn1", t, e, it, -n, 0, -1);
    ot("cn2", t, e, it, n, 0, -1);
    ot("cn3", t, e, it, 0, -i, -1);
    ot("cn4", t, e, it, 0, i, -1);
    e.getAttribute("position").needsUpdate = true;
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
};
function ot(r, e, t, n, i, s, a) {
  ya.set(i, s, a).unproject(n);
  const o = e[r];
  if (o !== void 0) {
    const c = t.getAttribute("position");
    for (let l = 0, h = o.length; l < h; l++) {
      c.setXYZ(o[l], ya.x, ya.y, ya.z);
    }
  }
}
var Ma = new qt();
var th = class extends Jt {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    const i = new Float32Array(8 * 3);
    const s = new ze();
    s.setIndex(new Ke(n, 1));
    s.setAttribute("position", new Ke(i, 3));
    super(s, new yt({ color: t, toneMapped: false }));
    this.object = e;
    this.type = "BoxHelper";
    this.matrixAutoUpdate = false;
    this.update();
  }
  update(e) {
    if (e !== void 0) {
      console.warn("THREE.BoxHelper: .update() has no longer arguments.");
    }
    if (this.object !== void 0) {
      Ma.setFromObject(this.object);
    }
    if (Ma.isEmpty())
      return;
    const t = Ma.min;
    const n = Ma.max;
    const i = this.geometry.attributes.position;
    const s = i.array;
    s[0] = n.x;
    s[1] = n.y;
    s[2] = n.z;
    s[3] = t.x;
    s[4] = n.y;
    s[5] = n.z;
    s[6] = t.x;
    s[7] = t.y;
    s[8] = n.z;
    s[9] = n.x;
    s[10] = t.y;
    s[11] = n.z;
    s[12] = n.x;
    s[13] = n.y;
    s[14] = t.z;
    s[15] = t.x;
    s[16] = n.y;
    s[17] = t.z;
    s[18] = t.x;
    s[19] = t.y;
    s[20] = t.z;
    s[21] = n.x;
    s[22] = t.y;
    s[23] = t.z;
    i.needsUpdate = true;
    this.geometry.computeBoundingSphere();
  }
  setFromObject(e) {
    this.object = e;
    this.update();
    return this;
  }
  copy(e, t) {
    super.copy(e, t);
    this.object = e.object;
    return this;
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
};
var nh = class extends Jt {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    const i = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
    const s = new ze();
    s.setIndex(new Ke(n, 1));
    s.setAttribute("position", new xe(i, 3));
    super(s, new yt({ color: t, toneMapped: false }));
    this.box = e;
    this.type = "Box3Helper";
    this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    if (t.isEmpty())
      return;
    t.getCenter(this.position);
    t.getSize(this.scale);
    this.scale.multiplyScalar(0.5);
    super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
};
var ih = class extends fn {
  constructor(e, t = 1, n = 16776960) {
    const i = n;
    const s = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];
    const a = new ze();
    a.setAttribute("position", new xe(s, 3));
    a.computeBoundingSphere();
    super(a, new yt({ color: i, toneMapped: false }));
    this.type = "PlaneHelper";
    this.plane = e;
    this.size = t;
    const o = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];
    const c = new ze();
    c.setAttribute("position", new xe(o, 3));
    c.computeBoundingSphere();
    this.add(new ft(c, new dn({ color: i, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0);
    this.scale.set(0.5 * this.size, 0.5 * this.size, 1);
    this.lookAt(this.plane.normal);
    this.translateZ(-this.plane.constant);
    super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  }
};
var md = new w();
var Sa;
var fc;
var sh = class extends Ze {
  // dir is assumed to be normalized
  constructor(e = new w(0, 0, 1), t = new w(0, 0, 0), n = 1, i = 16776960, s = n * 0.2, a = s * 0.2) {
    super();
    this.type = "ArrowHelper";
    if (Sa === void 0) {
      Sa = new ze();
      Sa.setAttribute("position", new xe([0, 0, 0, 0, 1, 0], 3));
      fc = new bi(0, 0.5, 1, 5, 1);
      fc.translate(0, -0.5, 0);
    }
    this.position.copy(t);
    this.line = new fn(Sa, new yt({ color: i, toneMapped: false }));
    this.line.matrixAutoUpdate = false;
    this.add(this.line);
    this.cone = new ft(fc, new dn({ color: i, toneMapped: false }));
    this.cone.matrixAutoUpdate = false;
    this.add(this.cone);
    this.setDirection(e);
    this.setLength(n, s, a);
  }
  setDirection(e) {
    if (e.y > 0.99999) {
      this.quaternion.set(0, 0, 0, 1);
    } else if (e.y < -0.99999) {
      this.quaternion.set(1, 0, 0, 0);
    } else {
      md.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(md, t);
    }
  }
  setLength(e, t = e * 0.2, n = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1);
    this.line.updateMatrix();
    this.cone.scale.set(n, t, n);
    this.cone.position.y = e;
    this.cone.updateMatrix();
  }
  setColor(e) {
    this.line.material.color.set(e);
    this.cone.material.color.set(e);
  }
  copy(e) {
    super.copy(e, false);
    this.line.copy(e.line);
    this.cone.copy(e.cone);
    return this;
  }
  dispose() {
    this.line.geometry.dispose();
    this.line.material.dispose();
    this.cone.geometry.dispose();
    this.cone.material.dispose();
  }
};
var rh = class extends Jt {
  constructor(e = 1) {
    const t = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ];
    const n = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ];
    const i = new ze();
    i.setAttribute("position", new xe(t, 3));
    i.setAttribute("color", new xe(n, 3));
    const s = new yt({ vertexColors: true, toneMapped: false });
    super(i, s);
    this.type = "AxesHelper";
  }
  setColors(e, t, n) {
    const i = new de();
    const s = this.geometry.attributes.color.array;
    i.set(e);
    i.toArray(s, 0);
    i.toArray(s, 3);
    i.set(t);
    i.toArray(s, 6);
    i.toArray(s, 9);
    i.set(n);
    i.toArray(s, 12);
    i.toArray(s, 15);
    this.geometry.attributes.color.needsUpdate = true;
    return this;
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
};
var ah = class {
  constructor() {
    this.type = "ShapePath";
    this.color = new de();
    this.subPaths = [];
    this.currentPath = null;
  }
  moveTo(e, t) {
    this.currentPath = new Si();
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(e, t);
    return this;
  }
  lineTo(e, t) {
    this.currentPath.lineTo(e, t);
    return this;
  }
  quadraticCurveTo(e, t, n, i) {
    this.currentPath.quadraticCurveTo(e, t, n, i);
    return this;
  }
  bezierCurveTo(e, t, n, i, s, a) {
    this.currentPath.bezierCurveTo(e, t, n, i, s, a);
    return this;
  }
  splineThru(e) {
    this.currentPath.splineThru(e);
    return this;
  }
  toShapes(e) {
    function t(p) {
      const v = [];
      for (let x = 0, M = p.length; x < M; x++) {
        const S = p[x];
        const E = new An();
        E.curves = S.curves;
        v.push(E);
      }
      return v;
    }
    function n(p, v) {
      const x = v.length;
      let M = false;
      for (let S = x - 1, E = 0; E < x; S = E++) {
        let C = v[S];
        let P = v[E];
        let y = P.x - C.x;
        let A = P.y - C.y;
        if (Math.abs(A) > Number.EPSILON) {
          if (A < 0) {
            C = v[E];
            y = -y;
            P = v[S];
            A = -A;
          }
          if (p.y < C.y || p.y > P.y)
            continue;
          if (p.y === C.y) {
            if (p.x === C.x)
              return true;
          } else {
            const O = A * (p.x - C.x) - y * (p.y - C.y);
            if (O === 0)
              return true;
            if (O < 0)
              continue;
            M = !M;
          }
        } else {
          if (p.y !== C.y)
            continue;
          if (P.x <= p.x && p.x <= C.x || C.x <= p.x && p.x <= P.x)
            return true;
        }
      }
      return M;
    }
    const i = un.isClockWise;
    const s = this.subPaths;
    if (s.length === 0)
      return [];
    let a, o, c;
    const l = [];
    if (s.length === 1) {
      o = s[0];
      c = new An();
      c.curves = o.curves;
      l.push(c);
      return l;
    }
    let h = !i(s[0].getPoints());
    h = e ? !h : h;
    const u = [];
    const d = [];
    let f = [];
    let m = 0;
    let _;
    d[m] = void 0;
    f[m] = [];
    for (let p = 0, v = s.length; p < v; p++) {
      o = s[p];
      _ = o.getPoints();
      a = i(_);
      a = e ? !a : a;
      if (a) {
        if (!h && d[m])
          m++;
        d[m] = { s: new An(), p: _ };
        d[m].s.curves = o.curves;
        if (h)
          m++;
        f[m] = [];
      } else {
        f[m].push({ h: o, p: _[0] });
      }
    }
    if (!d[0])
      return t(s);
    if (d.length > 1) {
      let p = false;
      let v = 0;
      for (let x = 0, M = d.length; x < M; x++) {
        u[x] = [];
      }
      for (let x = 0, M = d.length; x < M; x++) {
        const S = f[x];
        for (let E = 0; E < S.length; E++) {
          const C = S[E];
          let P = true;
          for (let y = 0; y < d.length; y++) {
            if (n(C.p, d[y].p)) {
              if (x !== y)
                v++;
              if (P) {
                P = false;
                u[y].push(C);
              } else {
                p = true;
              }
            }
          }
          if (P) {
            u[x].push(C);
          }
        }
      }
      if (v > 0 && p === false) {
        f = u;
      }
    }
    let g;
    for (let p = 0, v = d.length; p < v; p++) {
      c = d[p].s;
      l.push(c);
      g = f[p];
      for (let x = 0, M = g.length; x < M; x++) {
        c.holes.push(g[x].h);
      }
    }
    return l;
  }
};
var oh = class extends Zn {
  // @deprecated, r144
  constructor(e, t, n, i, s, a) {
    console.warn("THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.");
    super(e, t, n, i, s, a);
  }
};
var ch = class extends dr {
  // @deprecated, r144
  constructor(e, t, n, i) {
    console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.");
    super(e, t, n, i);
  }
};
var lh = class extends fr {
  // @deprecated, r144
  constructor(e, t, n, i) {
    console.warn("THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.");
    super(e, t, n, i);
  }
};
var hh = class extends pr {
  // @deprecated, r144
  constructor(e, t, n, i, s, a, o) {
    console.warn("THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.");
    super(e, t, n, i, s, a, o);
  }
};
var uh = class extends bi {
  // @deprecated, r144
  constructor(e, t, n, i, s, a, o, c) {
    console.warn("THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.");
    super(e, t, n, i, s, a, o, c);
  }
};
var dh = class extends mr {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.");
    super(e, t);
  }
};
var fh = class extends vr {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.");
    super(e, t);
  }
};
var ph = class extends yr {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.");
    super(e, t);
  }
};
var mh = class extends gs {
  // @deprecated, r144
  constructor(e, t, n, i) {
    console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.");
    super(e, t, n, i);
  }
};
var gh = class extends _s {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.");
    super(e, t);
  }
};
var _h = class extends us {
  // @deprecated, r144
  constructor(e, t, n, i) {
    console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry.");
    super(e, t, n, i);
  }
};
var xh = class extends Cn {
  // @deprecated, r144
  constructor(e, t, n, i) {
    console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.");
    super(e, t, n, i);
  }
};
var vh = class extends Mr {
  // @deprecated, r144
  constructor(e, t, n, i, s, a) {
    console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.");
    super(e, t, n, i, s, a);
  }
};
var yh = class extends Sr {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.");
    super(e, t);
  }
};
var Mh = class extends xs {
  // @deprecated, r144
  constructor(e, t, n, i, s, a, o) {
    console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.");
    super(e, t, n, i, s, a, o);
  }
};
var Sh = class extends br {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.");
    super(e, t);
  }
};
var bh = class extends Er {
  // @deprecated, r144
  constructor(e, t, n, i, s) {
    console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.");
    super(e, t, n, i, s);
  }
};
var Eh = class extends Tr {
  // @deprecated, r144
  constructor(e, t, n, i, s, a) {
    console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.");
    super(e, t, n, i, s, a);
  }
};
var Th = class extends wr {
  // @deprecated, r144
  constructor(e, t, n, i, s) {
    console.warn("THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.");
    super(e, t, n, i, s);
  }
};
if (typeof __THREE_DEVTOOLS__ !== "undefined") {
  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
    revision: Co
  } }));
}
if (typeof window !== "undefined") {
  if (window.__THREE__) {
    console.warn("WARNING: Multiple instances of Three.js being imported.");
  } else {
    window.__THREE__ = Co;
  }
}

export {
  Co as a,
  Bf as b,
  zf as c,
  gd as d,
  pc as e,
  _d as f,
  kf as g,
  Vf as h,
  wh as i,
  xd as j,
  on as k,
  Rn as l,
  Pt as m,
  ln as n,
  Hf as o,
  wn as p,
  mi as q,
  mc as r,
  gc as s,
  _c as t,
  vd as u,
  hi as v,
  yd as w,
  Md as x,
  xc as y,
  vc as z,
  Sd as A,
  bd as B,
  Ed as C,
  Td as D,
  Ah as E,
  Rh as F,
  wd as G,
  Ad as H,
  Rd as I,
  Cd as J,
  Pd as K,
  Ld as L,
  Id as M,
  Ud as N,
  Pa as O,
  Dd as P,
  Nd as Q,
  Fd as R,
  Od as S,
  Dr as T,
  Bd as U,
  zd as V,
  hn as W,
  kd as X,
  Vd as Y,
  Hd as Z,
  Gd as _,
  Wd as $,
  Po as aa,
  Wn as ba,
  Xn as ca,
  Vs as da,
  Hs as ea,
  ys as fa,
  Gs as ga,
  Et as ha,
  Ws as ia,
  ct as ja,
  La as ka,
  Gf as la,
  Ns as ma,
  Wf as na,
  lt as oa,
  Ch as pa,
  Xf as qa,
  qn as ra,
  qf as sa,
  Yn as ta,
  Xd as ua,
  qd as va,
  Ph as wa,
  Yd as xa,
  Bn as ya,
  bn as za,
  ss as Aa,
  Zd as Ba,
  Jd as Ca,
  gi as Da,
  $d as Ea,
  Ft as Fa,
  Kd as Ga,
  jd as Ha,
  kn as Ia,
  xi as Ja,
  Qd as Ka,
  ef as La,
  tf as Ma,
  nf as Na,
  sf as Oa,
  ba as Pa,
  Ea as Qa,
  Ta as Ra,
  wa as Sa,
  yc as Ta,
  Mc as Ua,
  Sc as Va,
  bc as Wa,
  rf as Xa,
  Ec as Ya,
  Tc as Za,
  wc as _a,
  Ac as $a,
  Rc as ab,
  Cc as bb,
  Pc as cb,
  Lc as db,
  Ic as eb,
  Uc as fb,
  Dc as gb,
  Nc as hb,
  Fc as ib,
  Oc as jb,
  Bc as kb,
  zc as lb,
  Aa as mb,
  af as nb,
  kc as ob,
  Vc as pb,
  Hc as qb,
  of as rb,
  cf as sb,
  lf as tb,
  Xs as ub,
  qs as vb,
  Ra as wb,
  di as xb,
  fi as yb,
  Ys as zb,
  Lo as Ab,
  Lh as Bb,
  Yf as Cb,
  Zf as Db,
  Jf as Eb,
  Ih as Fb,
  Vn as Gb,
  hf as Hb,
  uf as Ib,
  Kn as Jb,
  df as Kb,
  Hn as Lb,
  De as Mb,
  tn as Nb,
  Uh as Ob,
  $f as Pb,
  Ca as Qb,
  Kf as Rb,
  jf as Sb,
  Qf as Tb,
  ep as Ub,
  tp as Vb,
  np as Wb,
  ip as Xb,
  sp as Yb,
  rp as Zb,
  ap as _b,
  op as $b,
  cp as ac,
  lp as bc,
  ff as cc,
  Zs as dc,
  hp as ec,
  up as fc,
  dp as gc,
  fp as hc,
  pp as ic,
  mp as jc,
  gp as kc,
  _p as lc,
  xp as mc,
  Gc as nc,
  Ia as oc,
  nn as pc,
  Ip as qc,
  $ as rc,
  Ge as sc,
  Wt as tc,
  $s as uc,
  En as vc,
  pt as wc,
  $e as xc,
  zt as yc,
  as as zc,
  Xc as Ac,
  Ks as Bc,
  qc as Cc,
  Yc as Dc,
  Tt as Ec,
  w as Fc,
  qt as Gc,
  Yt as Hc,
  vi as Ic,
  Ne as Jc,
  js as Kc,
  os as Lc,
  Ze as Mc,
  Tn as Nc,
  vt as Oc,
  de as Pc,
  dn as Qc,
  $p as Rc,
  Ke as Sc,
  Zc as Tc,
  Jc as Uc,
  $c as Vc,
  Kc as Wc,
  Qs as Xc,
  jc as Yc,
  er as Zc,
  Qc as _c,
  xe as $c,
  el as ad,
  ze as bd,
  ft as cd,
  Zn as dd,
  vf as ed,
  Zt as fd,
  ls as gd,
  dt as hd,
  Ua as id,
  yi as jd,
  Da as kd,
  cn as ld,
  hs as md,
  us as nd,
  Fe as od,
  ae as pd,
  en as qd,
  ds as rd,
  tr as sd,
  nr as td,
  ir as ud,
  Tf as vd,
  Na as wd,
  zn as xd,
  Fa as yd,
  Oa as zd,
  Ba as Ad,
  za as Bd,
  ka as Cd,
  Va as Dd,
  fs as Ed,
  Mi as Fd,
  sr as Gd,
  Ha as Hd,
  Ga as Id,
  Wa as Jd,
  rr as Kd,
  Gn as Ld,
  Xa as Md,
  Jn as Nd,
  qa as Od,
  yt as Pd,
  fn as Qd,
  Jt as Rd,
  Ya as Sd,
  ar as Td,
  Za as Ud,
  ll as Vd,
  hl as Wd,
  or as Xd,
  ul as Yd,
  dl as Zd,
  kt as _d,
  ps as $d,
  Ja as ae,
  $a as be,
  cr as ce,
  Ka as de,
  ms as ee,
  ja as fe,
  lr as ge,
  hr as he,
  ur as ie,
  Qa as je,
  Si as ke,
  gs as le,
  dr as me,
  fr as ne,
  bi as oe,
  pr as pe,
  Cn as qe,
  mr as re,
  eo as se,
  An as te,
  un as ue,
  vr as ve,
  yr as we,
  _s as xe,
  Mr as ye,
  Sr as ze,
  xs as Ae,
  br as Be,
  Er as Ce,
  Tr as De,
  wr as Ee,
  to as Fe,
  no as Ge,
  io as He,
  Ar as Ie,
  so as Je,
  ro as Ke,
  ao as Le,
  oo as Me,
  co as Ne,
  lo as Oe,
  ho as Pe,
  ev as Qe,
  Ti as Re,
  uo as Se,
  Rr as Te,
  fo as Ue,
  Vt as Ve,
  Pn as We,
  Cr as Xe,
  wi as Ye,
  po as Ze,
  $n as _e,
  Ln as $e,
  Ai as af,
  Ri as bf,
  Ci as cf,
  Pr as df,
  Lf as ef,
  Lt as ff,
  sn as gf,
  _l as hf,
  xl as if,
  Pi as jf,
  vl as kf,
  yl as lf,
  Ml as mf,
  pn as nf,
  mo as of,
  go as pf,
  _o as qf,
  xo as rf,
  vo as sf,
  yo as tf,
  Mo as uf,
  vs as vf,
  So as wf,
  Ir as xf,
  bo as yf,
  Eo as zf,
  Tl as Af,
  wl as Bf,
  Ur as Cf,
  Al as Df,
  Rl as Ef,
  Cl as Ff,
  Pl as Gf,
  To as Hf,
  Ll as If,
  wo as Jf,
  Il as Kf,
  Ul as Lf,
  Ao as Mf,
  Je as Nf,
  Nl as Of,
  Ro as Pf,
  Fl as Qf,
  Ol as Rf,
  Bl as Sf,
  zl as Tf,
  kl as Uf,
  Vl as Vf,
  Gl as Wf,
  Wl as Xf,
  Xl as Yf,
  ql as Zf,
  Yl as _f,
  Zl as $f,
  Jl as ag,
  $l as bg,
  Kl as cg,
  jl as dg,
  Ql as eg,
  eh as fg,
  th as gg,
  nh as hg,
  ih as ig,
  sh as jg,
  rh as kg,
  ah as lg,
  oh as mg,
  ch as ng,
  lh as og,
  hh as pg,
  uh as qg,
  dh as rg,
  fh as sg,
  ph as tg,
  mh as ug,
  gh as vg,
  _h as wg,
  xh as xg,
  vh as yg,
  yh as zg,
  Mh as Ag,
  Sh as Bg,
  bh as Cg,
  Eh as Dg,
  Th as Eg,
  _v as Fg
};
/*! Bundled license information:

three/build/three.module.js:
  (**
   * @license
   * Copyright 2010-2023 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)
*/
//# sourceMappingURL=chunk-DTA4YFQH.js.map
